// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/framework/reader_base.proto

package framework

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// For serializing and restoring the state of ReaderBase, see
// reader_base.h for details.
type ReaderBaseState struct {
	WorkStarted        int64  `protobuf:"varint,1,opt,name=work_started,json=workStarted" json:"work_started,omitempty"`
	WorkFinished       int64  `protobuf:"varint,2,opt,name=work_finished,json=workFinished" json:"work_finished,omitempty"`
	NumRecordsProduced int64  `protobuf:"varint,3,opt,name=num_records_produced,json=numRecordsProduced" json:"num_records_produced,omitempty"`
	CurrentWork        []byte `protobuf:"bytes,4,opt,name=current_work,json=currentWork,proto3" json:"current_work,omitempty"`
}

func (m *ReaderBaseState) Reset()                    { *m = ReaderBaseState{} }
func (m *ReaderBaseState) String() string            { return proto.CompactTextString(m) }
func (*ReaderBaseState) ProtoMessage()               {}
func (*ReaderBaseState) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *ReaderBaseState) GetWorkStarted() int64 {
	if m != nil {
		return m.WorkStarted
	}
	return 0
}

func (m *ReaderBaseState) GetWorkFinished() int64 {
	if m != nil {
		return m.WorkFinished
	}
	return 0
}

func (m *ReaderBaseState) GetNumRecordsProduced() int64 {
	if m != nil {
		return m.NumRecordsProduced
	}
	return 0
}

func (m *ReaderBaseState) GetCurrentWork() []byte {
	if m != nil {
		return m.CurrentWork
	}
	return nil
}

func init() {
	proto.RegisterType((*ReaderBaseState)(nil), "tensorflow.ReaderBaseState")
}

func init() { proto.RegisterFile("tensorflow/core/framework/reader_base.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x14, 0x45, 0x89, 0x23, 0x2e, 0x32, 0x23, 0x4a, 0x71, 0xd1, 0xe5, 0xa8, 0x9b, 0x01, 0x99, 0x46,
	0xf0, 0x0f, 0x8a, 0xb8, 0x2e, 0x9d, 0x85, 0xe0, 0xa6, 0xa4, 0xcd, 0x6b, 0xa6, 0xd4, 0xe6, 0x95,
	0x97, 0xc4, 0xe2, 0x4f, 0xf9, 0x7d, 0x2e, 0x25, 0x99, 0x62, 0x57, 0xb3, 0xbd, 0xef, 0xdc, 0x84,
	0x73, 0xf9, 0x93, 0x03, 0x63, 0x91, 0xda, 0x4f, 0x9c, 0x44, 0x83, 0x04, 0xa2, 0x25, 0x39, 0xc0,
	0x84, 0xd4, 0x0b, 0x02, 0xa9, 0x80, 0xaa, 0x5a, 0x5a, 0xc8, 0x46, 0x42, 0x87, 0x09, 0x5f, 0xe0,
	0x87, 0x1f, 0xc6, 0x6f, 0xca, 0x48, 0xe4, 0xd2, 0xc2, 0xc1, 0x49, 0x07, 0xc9, 0x3d, 0xdf, 0x84,
	0x66, 0x65, 0x9d, 0x24, 0x07, 0x2a, 0x65, 0x5b, 0xb6, 0x5b, 0x95, 0xeb, 0x90, 0x1d, 0x4e, 0x51,
	0xf2, 0xc8, 0xaf, 0x23, 0xd2, 0x76, 0xa6, 0xb3, 0x47, 0x50, 0xe9, 0x45, 0x64, 0x62, 0xef, 0x6d,
	0xce, 0x92, 0x67, 0x7e, 0x67, 0xfc, 0x50, 0x11, 0x34, 0x48, 0xca, 0x56, 0x23, 0xa1, 0xf2, 0x0d,
	0xa8, 0x74, 0x15, 0xd9, 0xc4, 0xf8, 0xa1, 0x3c, 0x9d, 0x8a, 0xf9, 0x12, 0x7e, 0x6e, 0x3c, 0x11,
	0x18, 0x57, 0x85, 0x97, 0xd2, 0xcb, 0x2d, 0xdb, 0x6d, 0xca, 0xf5, 0x9c, 0xbd, 0x23, 0xf5, 0xf9,
	0xc4, 0x53, 0x24, 0x9d, 0x2d, 0x0a, 0xd9, 0xbf, 0x6a, 0x7e, 0xbb, 0x98, 0x14, 0xc1, 0xd4, 0x16,
	0xec, 0xe3, 0x55, 0x77, 0xee, 0xe8, 0xeb, 0xac, 0xc1, 0x41, 0x28, 0x82, 0xef, 0x5e, 0x2c, 0xd5,
	0xbd, 0x05, 0xfa, 0xea, 0x8c, 0xde, 0x6b, 0x14, 0x63, 0xaf, 0xc5, 0xd9, 0x11, 0x7f, 0x19, 0xab,
	0xaf, 0xe2, 0x78, 0x2f, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0xb3, 0x49, 0x3c, 0x6b, 0x01,
	0x00, 0x00,
}
