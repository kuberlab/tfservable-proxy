// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/control_flow.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Protocol buffer representing the values in ControlFlowContext.
type ValuesDef struct {
	// Value names that have been seen in this context.
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	// Value names referenced by but external to this context.
	ExternalValues map[string]string `protobuf:"bytes,2,rep,name=external_values,json=externalValues" json:"external_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ValuesDef) Reset()                    { *m = ValuesDef{} }
func (m *ValuesDef) String() string            { return proto.CompactTextString(m) }
func (*ValuesDef) ProtoMessage()               {}
func (*ValuesDef) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ValuesDef) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ValuesDef) GetExternalValues() map[string]string {
	if m != nil {
		return m.ExternalValues
	}
	return nil
}

// Protocol buffer representing a CondContext object.
type CondContextDef struct {
	// Name of the context.
	ContextName string `protobuf:"bytes,1,opt,name=context_name,json=contextName" json:"context_name,omitempty"`
	// Name of the pred tensor.
	PredName string `protobuf:"bytes,2,opt,name=pred_name,json=predName" json:"pred_name,omitempty"`
	// Name of the pivot tensor.
	PivotName string `protobuf:"bytes,3,opt,name=pivot_name,json=pivotName" json:"pivot_name,omitempty"`
	// Branch prediction. 0 or 1.
	Branch int32 `protobuf:"varint,4,opt,name=branch" json:"branch,omitempty"`
	// Values and external values in control flow context.
	ValuesDef *ValuesDef `protobuf:"bytes,5,opt,name=values_def,json=valuesDef" json:"values_def,omitempty"`
}

func (m *CondContextDef) Reset()                    { *m = CondContextDef{} }
func (m *CondContextDef) String() string            { return proto.CompactTextString(m) }
func (*CondContextDef) ProtoMessage()               {}
func (*CondContextDef) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CondContextDef) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

func (m *CondContextDef) GetPredName() string {
	if m != nil {
		return m.PredName
	}
	return ""
}

func (m *CondContextDef) GetPivotName() string {
	if m != nil {
		return m.PivotName
	}
	return ""
}

func (m *CondContextDef) GetBranch() int32 {
	if m != nil {
		return m.Branch
	}
	return 0
}

func (m *CondContextDef) GetValuesDef() *ValuesDef {
	if m != nil {
		return m.ValuesDef
	}
	return nil
}

// Protocol buffer representing a WhileContext object.
type WhileContextDef struct {
	// Name of the context.
	ContextName string `protobuf:"bytes,1,opt,name=context_name,json=contextName" json:"context_name,omitempty"`
	// The number of iterations allowed to run in parallel.
	ParallelIterations int32 `protobuf:"varint,2,opt,name=parallel_iterations,json=parallelIterations" json:"parallel_iterations,omitempty"`
	// Whether backprop is enabled for this while loop.
	BackProp bool `protobuf:"varint,3,opt,name=back_prop,json=backProp" json:"back_prop,omitempty"`
	// Whether GPU-CPU memory swap is enabled for this loop.
	SwapMemory bool `protobuf:"varint,4,opt,name=swap_memory,json=swapMemory" json:"swap_memory,omitempty"`
	// Name of the pivot tensor.
	PivotName string `protobuf:"bytes,5,opt,name=pivot_name,json=pivotName" json:"pivot_name,omitempty"`
	// Name of the pivot_for_pred tensor.
	PivotForPredName string `protobuf:"bytes,6,opt,name=pivot_for_pred_name,json=pivotForPredName" json:"pivot_for_pred_name,omitempty"`
	// Name of the pivot_for_body tensor.
	PivotForBodyName string `protobuf:"bytes,7,opt,name=pivot_for_body_name,json=pivotForBodyName" json:"pivot_for_body_name,omitempty"`
	// List of names for exit tensors.
	LoopExitNames []string `protobuf:"bytes,8,rep,name=loop_exit_names,json=loopExitNames" json:"loop_exit_names,omitempty"`
	// List of names for enter tensors.
	LoopEnterNames []string `protobuf:"bytes,10,rep,name=loop_enter_names,json=loopEnterNames" json:"loop_enter_names,omitempty"`
	// Values and external values in control flow context.
	ValuesDef *ValuesDef `protobuf:"bytes,9,opt,name=values_def,json=valuesDef" json:"values_def,omitempty"`
}

func (m *WhileContextDef) Reset()                    { *m = WhileContextDef{} }
func (m *WhileContextDef) String() string            { return proto.CompactTextString(m) }
func (*WhileContextDef) ProtoMessage()               {}
func (*WhileContextDef) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *WhileContextDef) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

func (m *WhileContextDef) GetParallelIterations() int32 {
	if m != nil {
		return m.ParallelIterations
	}
	return 0
}

func (m *WhileContextDef) GetBackProp() bool {
	if m != nil {
		return m.BackProp
	}
	return false
}

func (m *WhileContextDef) GetSwapMemory() bool {
	if m != nil {
		return m.SwapMemory
	}
	return false
}

func (m *WhileContextDef) GetPivotName() string {
	if m != nil {
		return m.PivotName
	}
	return ""
}

func (m *WhileContextDef) GetPivotForPredName() string {
	if m != nil {
		return m.PivotForPredName
	}
	return ""
}

func (m *WhileContextDef) GetPivotForBodyName() string {
	if m != nil {
		return m.PivotForBodyName
	}
	return ""
}

func (m *WhileContextDef) GetLoopExitNames() []string {
	if m != nil {
		return m.LoopExitNames
	}
	return nil
}

func (m *WhileContextDef) GetLoopEnterNames() []string {
	if m != nil {
		return m.LoopEnterNames
	}
	return nil
}

func (m *WhileContextDef) GetValuesDef() *ValuesDef {
	if m != nil {
		return m.ValuesDef
	}
	return nil
}

func init() {
	proto.RegisterType((*ValuesDef)(nil), "tensorflow.ValuesDef")
	proto.RegisterType((*CondContextDef)(nil), "tensorflow.CondContextDef")
	proto.RegisterType((*WhileContextDef)(nil), "tensorflow.WhileContextDef")
}

func init() { proto.RegisterFile("tensorflow/core/protobuf/control_flow.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0xaa, 0xd3, 0x40,
	0x14, 0xc6, 0x49, 0x6b, 0x6b, 0x73, 0xaa, 0x6d, 0x4d, 0xf5, 0x12, 0x14, 0xb1, 0x76, 0x21, 0x11,
	0x69, 0x03, 0x57, 0x17, 0xe2, 0xce, 0xd6, 0x5e, 0x70, 0xa1, 0x94, 0x2c, 0x14, 0xdc, 0x84, 0x49,
	0x72, 0xd2, 0x86, 0x26, 0x73, 0xc2, 0x64, 0xfa, 0x27, 0x6f, 0xe4, 0x33, 0x08, 0xbe, 0x97, 0x4b,
	0xc9, 0x4c, 0x7a, 0x6b, 0x2f, 0x57, 0xd0, 0xdd, 0x9c, 0xef, 0xfb, 0xcd, 0xc9, 0x9c, 0x6f, 0x32,
	0xf0, 0x4a, 0x22, 0x2f, 0x48, 0xc4, 0x29, 0xed, 0xdd, 0x90, 0x04, 0xba, 0xb9, 0x20, 0x49, 0xc1,
	0x36, 0x76, 0x43, 0xe2, 0x52, 0x50, 0xea, 0x57, 0xd6, 0x54, 0xa9, 0x16, 0x9c, 0xe0, 0xf1, 0x0f,
	0x03, 0xcc, 0x2f, 0x2c, 0xdd, 0x62, 0xf1, 0x01, 0x63, 0xeb, 0x02, 0xda, 0x3b, 0x55, 0xd8, 0xc6,
	0xa8, 0xe9, 0x98, 0x5e, 0x5d, 0x59, 0x1e, 0xf4, 0xf1, 0x20, 0x51, 0x70, 0x96, 0xfa, 0x35, 0xd0,
	0x18, 0x35, 0x9d, 0xee, 0xe5, 0xcb, 0xe9, 0xa9, 0xd7, 0xf4, 0xba, 0xcf, 0x74, 0x51, 0xc3, 0x5a,
	0x59, 0x70, 0x29, 0x4a, 0xaf, 0x87, 0x67, 0xe2, 0xe3, 0xf7, 0x30, 0xbc, 0x05, 0xb3, 0x06, 0xd0,
	0xdc, 0x60, 0x69, 0x1b, 0x23, 0xc3, 0x31, 0xbd, 0x6a, 0x69, 0x3d, 0x84, 0x96, 0xfa, 0xa6, 0xdd,
	0x50, 0x9a, 0x2e, 0xde, 0x35, 0xde, 0x1a, 0xe3, 0x9f, 0x06, 0xf4, 0xe6, 0xc4, 0xa3, 0x39, 0x71,
	0x89, 0x07, 0x59, 0x4d, 0xf0, 0x1c, 0xee, 0x85, 0xba, 0xf2, 0x39, 0xcb, 0xb0, 0xee, 0xd3, 0xad,
	0xb5, 0xcf, 0x2c, 0x43, 0xeb, 0x09, 0x98, 0xb9, 0xc0, 0x48, 0xfb, 0xba, 0x67, 0xa7, 0x12, 0x94,
	0xf9, 0x14, 0x20, 0x4f, 0x76, 0x54, 0xef, 0x6e, 0x2a, 0xd7, 0x54, 0x8a, 0xb2, 0x2f, 0xa0, 0x1d,
	0x08, 0xc6, 0xc3, 0xb5, 0x7d, 0x67, 0x64, 0x38, 0x2d, 0xaf, 0xae, 0xac, 0x37, 0x00, 0x3a, 0x17,
	0x3f, 0xc2, 0xd8, 0x6e, 0x8d, 0x0c, 0xa7, 0x7b, 0xf9, 0xe8, 0xd6, 0x6c, 0x3c, 0x73, 0x77, 0x5c,
	0x8e, 0xbf, 0x37, 0xa1, 0xff, 0x75, 0x9d, 0xa4, 0xf8, 0x7f, 0x03, 0xb8, 0x30, 0xcc, 0x99, 0x60,
	0x69, 0x8a, 0xa9, 0x9f, 0x48, 0x14, 0x4c, 0x26, 0xc4, 0x0b, 0x35, 0x4a, 0xcb, 0xb3, 0x8e, 0xd6,
	0xc7, 0x6b, 0xa7, 0x9a, 0x38, 0x60, 0xe1, 0xc6, 0xcf, 0x05, 0xe5, 0x6a, 0xa6, 0x8e, 0xd7, 0xa9,
	0x84, 0xa5, 0xa0, 0xdc, 0x7a, 0x06, 0xdd, 0x62, 0xcf, 0x72, 0x3f, 0xc3, 0x8c, 0x44, 0xa9, 0xe6,
	0xea, 0x78, 0x50, 0x49, 0x9f, 0x94, 0x72, 0x23, 0x92, 0xd6, 0xcd, 0x48, 0x26, 0x30, 0xd4, 0x76,
	0x4c, 0xc2, 0x3f, 0x05, 0xdb, 0x56, 0xdc, 0x40, 0x59, 0x57, 0x24, 0x96, 0xc7, 0x80, 0xcf, 0xf0,
	0x80, 0xa2, 0x52, 0xe3, 0x77, 0xcf, 0xf1, 0x19, 0x45, 0xa5, 0xc2, 0x5f, 0x40, 0x3f, 0x25, 0xca,
	0x7d, 0x3c, 0x24, 0xfa, 0x00, 0x85, 0xdd, 0x51, 0xbf, 0xe6, 0xfd, 0x4a, 0x5e, 0x1c, 0x12, 0x75,
	0x88, 0xc2, 0x72, 0x60, 0xa0, 0x39, 0x2e, 0x51, 0xd4, 0x20, 0x28, 0xb0, 0xa7, 0xc0, 0x4a, 0xd6,
	0xe4, 0xf9, 0x55, 0x99, 0xff, 0x76, 0x55, 0xb3, 0x3d, 0xd8, 0x24, 0x56, 0x7f, 0x62, 0xb1, 0x60,
	0x19, 0xee, 0x49, 0x6c, 0x66, 0x0f, 0xe6, 0xfa, 0x8d, 0x5d, 0xa5, 0xb4, 0x5f, 0x56, 0x2f, 0xac,
	0x58, 0x1a, 0xdf, 0xe6, 0xab, 0x44, 0xae, 0xb7, 0xc1, 0x34, 0xa4, 0xcc, 0x8d, 0x04, 0x96, 0x1b,
	0xf7, 0xb4, 0x77, 0x52, 0xa0, 0xd8, 0x25, 0x7c, 0x35, 0x59, 0x91, 0x9b, 0x6f, 0x56, 0xee, 0xdf,
	0x1e, 0xef, 0x2f, 0xc3, 0x08, 0xda, 0xaa, 0x78, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x13, 0xbf,
	0x90, 0xef, 0xe2, 0x03, 0x00, 0x00,
}
