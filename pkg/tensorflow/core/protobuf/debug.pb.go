// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/debug.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// EXPERIMENTAL. Option for watching a node.
type DebugTensorWatch struct {
	// Name of the node to watch.
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	// Output slot to watch.
	// The semantics of output_slot == -1 is that the node is only watched for
	// completion, but not for any output tensors. See NodeCompletionCallback
	// in debug_gateway.h.
	// TODO(cais): Implement this semantics.
	OutputSlot int32 `protobuf:"varint,2,opt,name=output_slot,json=outputSlot" json:"output_slot,omitempty"`
	// Name(s) of the debugging op(s).
	// One or more than one probes on a tensor.
	// e.g., {"DebugIdentity", "DebugNanCount"}
	DebugOps []string `protobuf:"bytes,3,rep,name=debug_ops,json=debugOps" json:"debug_ops,omitempty"`
	// URL(s) for debug targets(s).
	//   E.g., "file:///foo/tfdbg_dump", "grpc://localhost:11011"
	// Each debug op listed in debug_ops will publish its output tensor (debug
	// signal) to all URLs in debug_urls.
	//
	// N.B. Session::Run() supports concurrent invocations of the same inputs
	// (feed keys), outputs and target nodes. If such concurrent invocations
	// are to be debugged, the callers of Session::Run() must use distinct
	// debug_urls to make sure that the streamed or dumped events do not overlap
	// among the invocations.
	// TODO(cais): More visible documentation of this in g3docs.
	DebugUrls []string `protobuf:"bytes,4,rep,name=debug_urls,json=debugUrls" json:"debug_urls,omitempty"`
	// Do not error out if debug op creation fails (e.g., due to dtype
	// incompatibility). Instead, just log the failure.
	TolerateDebugOpCreationFailures bool `protobuf:"varint,5,opt,name=tolerate_debug_op_creation_failures,json=tolerateDebugOpCreationFailures" json:"tolerate_debug_op_creation_failures,omitempty"`
}

func (m *DebugTensorWatch) Reset()                    { *m = DebugTensorWatch{} }
func (m *DebugTensorWatch) String() string            { return proto.CompactTextString(m) }
func (*DebugTensorWatch) ProtoMessage()               {}
func (*DebugTensorWatch) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *DebugTensorWatch) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *DebugTensorWatch) GetOutputSlot() int32 {
	if m != nil {
		return m.OutputSlot
	}
	return 0
}

func (m *DebugTensorWatch) GetDebugOps() []string {
	if m != nil {
		return m.DebugOps
	}
	return nil
}

func (m *DebugTensorWatch) GetDebugUrls() []string {
	if m != nil {
		return m.DebugUrls
	}
	return nil
}

func (m *DebugTensorWatch) GetTolerateDebugOpCreationFailures() bool {
	if m != nil {
		return m.TolerateDebugOpCreationFailures
	}
	return false
}

// EXPERIMENTAL. Options for initializing DebuggerState.
type DebugOptions struct {
	// Debugging options
	DebugTensorWatchOpts []*DebugTensorWatch `protobuf:"bytes,4,rep,name=debug_tensor_watch_opts,json=debugTensorWatchOpts" json:"debug_tensor_watch_opts,omitempty"`
	// Caller-specified global step count.
	// Note that this is distinct from the session run count and the executor
	// step count.
	GlobalStep int64 `protobuf:"varint,10,opt,name=global_step,json=globalStep" json:"global_step,omitempty"`
}

func (m *DebugOptions) Reset()                    { *m = DebugOptions{} }
func (m *DebugOptions) String() string            { return proto.CompactTextString(m) }
func (*DebugOptions) ProtoMessage()               {}
func (*DebugOptions) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *DebugOptions) GetDebugTensorWatchOpts() []*DebugTensorWatch {
	if m != nil {
		return m.DebugTensorWatchOpts
	}
	return nil
}

func (m *DebugOptions) GetGlobalStep() int64 {
	if m != nil {
		return m.GlobalStep
	}
	return 0
}

func init() {
	proto.RegisterType((*DebugTensorWatch)(nil), "tensorflow.DebugTensorWatch")
	proto.RegisterType((*DebugOptions)(nil), "tensorflow.DebugOptions")
}

func init() { proto.RegisterFile("tensorflow/core/protobuf/debug.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x6b, 0xe3, 0x30,
	0x10, 0x85, 0xd1, 0x66, 0xb3, 0x24, 0xca, 0x1e, 0x16, 0xb3, 0xb0, 0x86, 0x6d, 0x89, 0x49, 0x7b,
	0xf0, 0x25, 0x36, 0xb4, 0xff, 0x20, 0x09, 0x3d, 0x95, 0x26, 0x38, 0x2d, 0x85, 0x5e, 0x84, 0x6c,
	0xcb, 0x8e, 0x89, 0xec, 0x51, 0xa5, 0x71, 0x43, 0xef, 0xfd, 0x95, 0xfd, 0x25, 0x3d, 0x16, 0x59,
	0x09, 0x29, 0x81, 0x1e, 0xf5, 0xbd, 0x37, 0x6f, 0xec, 0x37, 0xf4, 0x12, 0x45, 0x63, 0x40, 0x17,
	0x12, 0x76, 0x71, 0x06, 0x5a, 0xc4, 0x4a, 0x03, 0x42, 0xda, 0x16, 0x71, 0x2e, 0xd2, 0xb6, 0x8c,
	0xba, 0xa7, 0x47, 0x8f, 0xae, 0xc9, 0x3b, 0xa1, 0x7f, 0x16, 0x56, 0xbb, 0xef, 0xd8, 0x23, 0xc7,
	0x6c, 0xe3, 0xfd, 0xa7, 0xc3, 0x06, 0x72, 0xc1, 0x1a, 0x5e, 0x0b, 0x9f, 0x04, 0x24, 0x1c, 0x26,
	0x03, 0x0b, 0xee, 0x78, 0x2d, 0xbc, 0x31, 0x1d, 0x41, 0x8b, 0xaa, 0x45, 0x66, 0x24, 0xa0, 0xff,
	0x23, 0x20, 0x61, 0x3f, 0xa1, 0x0e, 0xad, 0x25, 0xa0, 0x9d, 0xee, 0xb6, 0x31, 0x50, 0xc6, 0xef,
	0x05, 0x3d, 0x3b, 0xdd, 0x81, 0xa5, 0x32, 0xde, 0x39, 0xa5, 0x4e, 0x6c, 0xb5, 0x34, 0xfe, 0xcf,
	0x4e, 0x75, 0xf6, 0x07, 0x2d, 0x8d, 0x77, 0x4b, 0x2f, 0x10, 0xa4, 0xd0, 0x1c, 0x05, 0x3b, 0x84,
	0xb0, 0x4c, 0x0b, 0x8e, 0x15, 0x34, 0xac, 0xe0, 0x95, 0x6c, 0xb5, 0x30, 0x7e, 0x3f, 0x20, 0xe1,
	0x20, 0x19, 0x1f, 0xac, 0x0b, 0x97, 0x3e, 0xdf, 0xfb, 0x6e, 0xf6, 0xb6, 0xc9, 0x1b, 0xa1, 0xbf,
	0xf7, 0x9a, 0xe5, 0xc6, 0x5b, 0xd3, 0x7f, 0x2e, 0xd5, 0x35, 0xc0, 0x76, 0xf6, 0x77, 0x19, 0x28,
	0x74, 0x9f, 0x32, 0xba, 0x3a, 0x8b, 0x8e, 0xdd, 0x44, 0xa7, 0xbd, 0x24, 0x7f, 0xf3, 0x13, 0xb2,
	0x54, 0x68, 0x6c, 0x21, 0xa5, 0x84, 0x94, 0x4b, 0x66, 0x50, 0x28, 0x9f, 0x06, 0x24, 0xec, 0x25,
	0xd4, 0xa1, 0x35, 0x0a, 0x35, 0x7b, 0xa6, 0x3e, 0xe8, 0xf2, 0x6b, 0x72, 0xa1, 0x79, 0x2d, 0x76,
	0xa0, 0xb7, 0xb3, 0x51, 0xb7, 0x64, 0x65, 0xef, 0x62, 0x56, 0xe4, 0x69, 0x5e, 0x56, 0xb8, 0x69,
	0xd3, 0x28, 0x83, 0x3a, 0xce, 0xb5, 0x78, 0xdd, 0xc6, 0xc7, 0xa9, 0xa9, 0x11, 0xfa, 0xa5, 0x6a,
	0xca, 0x69, 0x09, 0xb1, 0xda, 0x96, 0xf1, 0x77, 0xb7, 0xfe, 0x20, 0x24, 0xfd, 0xd5, 0x3d, 0xae,
	0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x0f, 0x0f, 0x5b, 0x11, 0x02, 0x00, 0x00,
}
