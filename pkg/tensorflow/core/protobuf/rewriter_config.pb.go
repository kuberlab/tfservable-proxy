// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/rewriter_config.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RewriterConfig_MemOptType int32

const (
	// Disabled in the meta-optimizer.
	RewriterConfig_NO_MEM_OPT RewriterConfig_MemOptType = 0
	// Driven by manual op-level annotations.
	RewriterConfig_MANUAL RewriterConfig_MemOptType = 1
	// Driven by heuristics. The behavior of these heuristics is subject to
	// change. Currently includes an experimental recomputation heuristic.
	RewriterConfig_HEURISTICS RewriterConfig_MemOptType = 2
)

var RewriterConfig_MemOptType_name = map[int32]string{
	0: "NO_MEM_OPT",
	1: "MANUAL",
	2: "HEURISTICS",
}
var RewriterConfig_MemOptType_value = map[string]int32{
	"NO_MEM_OPT": 0,
	"MANUAL":     1,
	"HEURISTICS": 2,
}

func (x RewriterConfig_MemOptType) String() string {
	return proto.EnumName(RewriterConfig_MemOptType_name, int32(x))
}
func (RewriterConfig_MemOptType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor10, []int{1, 0}
}

type AutoParallelOptions struct {
	Enable      bool  `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	NumReplicas int32 `protobuf:"varint,2,opt,name=num_replicas,json=numReplicas" json:"num_replicas,omitempty"`
}

func (m *AutoParallelOptions) Reset()                    { *m = AutoParallelOptions{} }
func (m *AutoParallelOptions) String() string            { return proto.CompactTextString(m) }
func (*AutoParallelOptions) ProtoMessage()               {}
func (*AutoParallelOptions) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *AutoParallelOptions) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *AutoParallelOptions) GetNumReplicas() int32 {
	if m != nil {
		return m.NumReplicas
	}
	return 0
}

type RewriterConfig struct {
	OptimizeTensorLayout bool `protobuf:"varint,1,opt,name=optimize_tensor_layout,json=optimizeTensorLayout" json:"optimize_tensor_layout,omitempty"`
	DisableModelPruning  bool `protobuf:"varint,2,opt,name=disable_model_pruning,json=disableModelPruning" json:"disable_model_pruning,omitempty"`
	ConstantFolding      bool `protobuf:"varint,3,opt,name=constant_folding,json=constantFolding" json:"constant_folding,omitempty"`
	// Configures memory optimization passes through the meta-optimizer. Has no
	// effect on manually requested memory optimization passes in the optimizers
	// field.
	MemoryOptimization RewriterConfig_MemOptType `protobuf:"varint,4,opt,name=memory_optimization,json=memoryOptimization,enum=tensorflow.RewriterConfig_MemOptType" json:"memory_optimization,omitempty"`
	// Configures AutoParallel optimization passes either through the
	// meta-optimizer or when manually specified through the optimizers field.
	AutoParallel *AutoParallelOptions `protobuf:"bytes,5,opt,name=auto_parallel,json=autoParallel" json:"auto_parallel,omitempty"`
	// If non-empty, will use this as an alternative way to specify a list of
	// optimizations to turn on and the order of the optimizations (replacing the
	// meta-optimizer).
	//
	// Of the RewriterConfig options, only the AutoParallel configuration options
	// (the auto_parallel field) apply to manually requested optimization passes
	// ("autoparallel"). Memory optimization passes ("memory") invoked here are
	// not configurable (in contrast to memory optimization passes through the
	// meta-optimizer) and act only on manual op annotations.
	Optimizers []string `protobuf:"bytes,100,rep,name=optimizers" json:"optimizers,omitempty"`
}

func (m *RewriterConfig) Reset()                    { *m = RewriterConfig{} }
func (m *RewriterConfig) String() string            { return proto.CompactTextString(m) }
func (*RewriterConfig) ProtoMessage()               {}
func (*RewriterConfig) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *RewriterConfig) GetOptimizeTensorLayout() bool {
	if m != nil {
		return m.OptimizeTensorLayout
	}
	return false
}

func (m *RewriterConfig) GetDisableModelPruning() bool {
	if m != nil {
		return m.DisableModelPruning
	}
	return false
}

func (m *RewriterConfig) GetConstantFolding() bool {
	if m != nil {
		return m.ConstantFolding
	}
	return false
}

func (m *RewriterConfig) GetMemoryOptimization() RewriterConfig_MemOptType {
	if m != nil {
		return m.MemoryOptimization
	}
	return RewriterConfig_NO_MEM_OPT
}

func (m *RewriterConfig) GetAutoParallel() *AutoParallelOptions {
	if m != nil {
		return m.AutoParallel
	}
	return nil
}

func (m *RewriterConfig) GetOptimizers() []string {
	if m != nil {
		return m.Optimizers
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoParallelOptions)(nil), "tensorflow.AutoParallelOptions")
	proto.RegisterType((*RewriterConfig)(nil), "tensorflow.RewriterConfig")
	proto.RegisterEnum("tensorflow.RewriterConfig_MemOptType", RewriterConfig_MemOptType_name, RewriterConfig_MemOptType_value)
}

func init() { proto.RegisterFile("tensorflow/core/protobuf/rewriter_config.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0xc9, 0xca, 0xaa, 0xf1, 0x36, 0x4a, 0xe5, 0x8e, 0x29, 0x27, 0x08, 0x95, 0x90, 0xc2,
	0x61, 0x89, 0x54, 0x38, 0x70, 0xed, 0xca, 0x10, 0x93, 0x96, 0x25, 0xca, 0x3a, 0x0e, 0x5c, 0x2c,
	0x37, 0x71, 0x82, 0xd5, 0xc4, 0xcf, 0x72, 0x1c, 0xaa, 0xee, 0x7f, 0xe1, 0xff, 0xe4, 0x88, 0x92,
	0xa6, 0x6a, 0x26, 0xc1, 0xd1, 0xdf, 0xef, 0xf9, 0xfb, 0xfc, 0x3e, 0x19, 0x3c, 0xc3, 0x65, 0x85,
	0x3a, 0x2b, 0x70, 0xe3, 0x27, 0xa8, 0xb9, 0xaf, 0x34, 0x1a, 0x5c, 0xd5, 0x99, 0xaf, 0xf9, 0x46,
	0x0b, 0xc3, 0x35, 0x4d, 0x50, 0x66, 0x22, 0xf7, 0x5a, 0x40, 0xe0, 0x30, 0x3f, 0x8d, 0x60, 0x32,
	0xaf, 0x0d, 0x46, 0x4c, 0xb3, 0xa2, 0xe0, 0x45, 0xa8, 0x8c, 0x40, 0x59, 0x91, 0x0b, 0x18, 0x72,
	0xc9, 0x56, 0x05, 0xb7, 0x2d, 0xc7, 0x72, 0x4f, 0xe2, 0xee, 0x44, 0xde, 0xc1, 0x99, 0xac, 0x4b,
	0xaa, 0xb9, 0x2a, 0x44, 0xc2, 0x2a, 0xfb, 0xc8, 0xb1, 0xdc, 0xe3, 0xf8, 0x54, 0xd6, 0x65, 0xdc,
	0x49, 0xd3, 0xdf, 0x03, 0x18, 0xc5, 0x5d, 0xee, 0xa2, 0x8d, 0x25, 0x9f, 0xe0, 0x02, 0x95, 0x11,
	0xa5, 0x78, 0xe4, 0x74, 0x97, 0x4d, 0x0b, 0xb6, 0xc5, 0xda, 0x74, 0xee, 0xe7, 0x7b, 0xba, 0x6c,
	0xe1, 0x6d, 0xcb, 0xc8, 0x0c, 0x5e, 0xa7, 0xa2, 0x6a, 0x62, 0x69, 0x89, 0x29, 0x2f, 0xa8, 0xd2,
	0xb5, 0x14, 0x32, 0x6f, 0x43, 0x4f, 0xe2, 0x49, 0x07, 0x83, 0x86, 0x45, 0x3b, 0x44, 0x3e, 0xc0,
	0x38, 0x41, 0x59, 0x19, 0x26, 0x0d, 0xcd, 0xb0, 0x48, 0x9b, 0xf1, 0x41, 0x3b, 0xfe, 0x6a, 0xaf,
	0x7f, 0xdd, 0xc9, 0xe4, 0x3b, 0x4c, 0x4a, 0x5e, 0xa2, 0xde, 0xd2, 0x2e, 0x9d, 0x35, 0xab, 0xdb,
	0xcf, 0x1d, 0xcb, 0x1d, 0xcd, 0xde, 0xf7, 0x3a, 0xf5, 0x9e, 0x6e, 0xe3, 0x05, 0xbc, 0x0c, 0x95,
	0x59, 0x6e, 0x15, 0x8f, 0xc9, 0xce, 0x21, 0xec, 0x19, 0x90, 0x2f, 0xf0, 0x92, 0xd5, 0x06, 0xa9,
	0xea, 0x2a, 0xb5, 0x8f, 0x1d, 0xcb, 0x3d, 0x9d, 0xbd, 0xed, 0x3b, 0xfe, 0xa3, 0xf2, 0xf8, 0x8c,
	0xf5, 0x44, 0xf2, 0x06, 0x60, 0x5f, 0x8a, 0xae, 0xec, 0xd4, 0x19, 0xb8, 0x2f, 0xe2, 0x9e, 0x32,
	0xfd, 0x0c, 0x70, 0x78, 0x07, 0x19, 0x01, 0xdc, 0x85, 0x34, 0xb8, 0x0e, 0x68, 0x18, 0x2d, 0xc7,
	0xcf, 0x08, 0xc0, 0x30, 0x98, 0xdf, 0x3d, 0xcc, 0x6f, 0xc7, 0x56, 0xc3, 0xbe, 0x5d, 0x3f, 0xc4,
	0x37, 0xf7, 0xcb, 0x9b, 0xc5, 0xfd, 0xf8, 0xe8, 0xea, 0x11, 0x6c, 0xd4, 0x79, 0xff, 0x35, 0x99,
	0x66, 0x25, 0xdf, 0xa0, 0x5e, 0x5f, 0x9d, 0x3f, 0x5d, 0x35, 0x6a, 0xbe, 0x4b, 0x15, 0x59, 0x3f,
	0x16, 0xb9, 0x30, 0x3f, 0xeb, 0x95, 0x97, 0x60, 0xe9, 0xa7, 0x9a, 0x6f, 0xd7, 0xfe, 0xe1, 0xfa,
	0x65, 0xc5, 0xf5, 0x2f, 0x21, 0xf3, 0xcb, 0x1c, 0x7d, 0xb5, 0xce, 0xfd, 0xff, 0x7d, 0xc6, 0x3f,
	0x96, 0xb5, 0x1a, 0xb6, 0x87, 0x8f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x57, 0xbc, 0x4c, 0x94,
	0xb2, 0x02, 0x00, 0x00,
}
