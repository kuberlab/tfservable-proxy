// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/tensorflow_server.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Defines the configuration of a single TensorFlow server.
type ServerDef struct {
	// The cluster of which this server is a member.
	Cluster *ClusterDef `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// The name of the job of which this server is a member.
	//
	// NOTE(mrry): The `cluster` field must contain a `JobDef` with a `name` field
	// that matches this name.
	JobName string `protobuf:"bytes,2,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
	// The task index of this server in its job.
	//
	// NOTE: The `cluster` field must contain a `JobDef` with a matching `name`
	// and a mapping in its `tasks` field for this index.
	TaskIndex int32 `protobuf:"varint,3,opt,name=task_index,json=taskIndex" json:"task_index,omitempty"`
	// The default configuration for sessions that run on this server.
	DefaultSessionConfig *ConfigProto `protobuf:"bytes,4,opt,name=default_session_config,json=defaultSessionConfig" json:"default_session_config,omitempty"`
	// The protocol to be used by this server.
	//
	// Acceptable values include: "grpc".
	Protocol string `protobuf:"bytes,5,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *ServerDef) Reset()                    { *m = ServerDef{} }
func (m *ServerDef) String() string            { return proto.CompactTextString(m) }
func (*ServerDef) ProtoMessage()               {}
func (*ServerDef) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *ServerDef) GetCluster() *ClusterDef {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ServerDef) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *ServerDef) GetTaskIndex() int32 {
	if m != nil {
		return m.TaskIndex
	}
	return 0
}

func (m *ServerDef) GetDefaultSessionConfig() *ConfigProto {
	if m != nil {
		return m.DefaultSessionConfig
	}
	return nil
}

func (m *ServerDef) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerDef)(nil), "tensorflow.ServerDef")
}

func init() { proto.RegisterFile("tensorflow/core/protobuf/tensorflow_server.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4d, 0x4f, 0x3a, 0x31,
	0x10, 0xc6, 0xd3, 0xff, 0x5f, 0x04, 0xaa, 0xa7, 0x8d, 0xc1, 0x75, 0x13, 0x13, 0x62, 0xa2, 0xe1,
	0xc2, 0x96, 0xe8, 0x37, 0x00, 0x2e, 0x1e, 0x34, 0x64, 0xb9, 0x79, 0xd9, 0xec, 0xcb, 0xb4, 0x16,
	0x76, 0x3b, 0xa4, 0xed, 0xfa, 0xf2, 0x75, 0xfd, 0x14, 0x1e, 0xcd, 0xb6, 0x20, 0x78, 0xe0, 0xd8,
	0xf9, 0xcd, 0xf3, 0xcc, 0x3c, 0x1d, 0x3a, 0xb1, 0xa0, 0x0c, 0x6a, 0x5e, 0xe1, 0x3b, 0x2b, 0x50,
	0x03, 0xdb, 0x68, 0xb4, 0x98, 0x37, 0x9c, 0xed, 0x41, 0x6a, 0x40, 0xbf, 0x81, 0x8e, 0x1d, 0x0a,
	0xe8, 0x1e, 0x44, 0xb7, 0x47, 0xd5, 0x05, 0x2a, 0x2e, 0x85, 0x97, 0x44, 0x77, 0xc7, 0xdb, 0xaa,
	0xc6, 0xd8, 0x9d, 0xf5, 0xcd, 0x17, 0xa1, 0xfd, 0xa5, 0x9b, 0x35, 0x07, 0x1e, 0x4c, 0x68, 0x77,
	0x8b, 0x43, 0x32, 0x24, 0xa3, 0xb3, 0xfb, 0x41, 0xbc, 0xf7, 0x89, 0x67, 0x1e, 0xcd, 0x81, 0x27,
	0xbb, 0xb6, 0xe0, 0x8a, 0xf6, 0x56, 0x98, 0xa7, 0x2a, 0xab, 0x21, 0xfc, 0x37, 0x24, 0xa3, 0x7e,
	0xd2, 0x5d, 0x61, 0xfe, 0x9c, 0xd5, 0x10, 0x5c, 0x53, 0x6a, 0x33, 0xb3, 0x4e, 0xa5, 0x2a, 0xe1,
	0x23, 0xfc, 0x3f, 0x24, 0xa3, 0x4e, 0xd2, 0x6f, 0x2b, 0x8f, 0x6d, 0x21, 0x78, 0xa2, 0x83, 0x12,
	0x78, 0xd6, 0x54, 0x36, 0x35, 0x60, 0x8c, 0x44, 0x95, 0xfa, 0x04, 0xe1, 0x89, 0x1b, 0x7d, 0xf9,
	0x67, 0xb4, 0x23, 0x8b, 0x76, 0xe5, 0xe4, 0x62, 0x2b, 0x5b, 0x7a, 0x95, 0x47, 0x41, 0x44, 0x7b,
	0x2e, 0x51, 0x81, 0x55, 0xd8, 0x71, 0x8b, 0xfc, 0xbe, 0xa7, 0x96, 0x46, 0xa8, 0xc5, 0xa1, 0x5f,
	0x29, 0x8d, 0xd5, 0x8d, 0xb2, 0xb2, 0x86, 0xe9, 0xb9, 0xcf, 0xef, 0xcc, 0xcd, 0x82, 0xbc, 0xcc,
	0x84, 0xb4, 0xaf, 0x4d, 0x1e, 0x17, 0x58, 0xb3, 0x52, 0xc3, 0xe7, 0xfa, 0xe0, 0x2e, 0xe3, 0xf6,
	0x2e, 0x52, 0x89, 0xb1, 0x40, 0xb6, 0x59, 0x0b, 0x76, 0xec, 0x97, 0xbf, 0x09, 0xc9, 0x4f, 0xdd,
	0xe3, 0xe1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x6b, 0x03, 0x1a, 0xf0, 0x01, 0x00, 0x00,
}
