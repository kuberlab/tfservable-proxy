// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/queue_runner.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow_error "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/lib/core"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Protocol buffer representing a QueueRunner.
type QueueRunnerDef struct {
	// Queue name.
	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName" json:"queue_name,omitempty"`
	// A list of enqueue operations.
	EnqueueOpName []string `protobuf:"bytes,2,rep,name=enqueue_op_name,json=enqueueOpName" json:"enqueue_op_name,omitempty"`
	// The operation to run to close the queue.
	CloseOpName string `protobuf:"bytes,3,opt,name=close_op_name,json=closeOpName" json:"close_op_name,omitempty"`
	// The operation to run to cancel the queue.
	CancelOpName string `protobuf:"bytes,4,opt,name=cancel_op_name,json=cancelOpName" json:"cancel_op_name,omitempty"`
	// A list of exception types considered to signal a safely closed queue
	// if raised during enqueue operations.
	QueueClosedExceptionTypes []tensorflow_error.Code `protobuf:"varint,5,rep,packed,name=queue_closed_exception_types,json=queueClosedExceptionTypes,enum=tensorflow.error.Code" json:"queue_closed_exception_types,omitempty"`
}

func (m *QueueRunnerDef) Reset()                    { *m = QueueRunnerDef{} }
func (m *QueueRunnerDef) String() string            { return proto.CompactTextString(m) }
func (*QueueRunnerDef) ProtoMessage()               {}
func (*QueueRunnerDef) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *QueueRunnerDef) GetQueueName() string {
	if m != nil {
		return m.QueueName
	}
	return ""
}

func (m *QueueRunnerDef) GetEnqueueOpName() []string {
	if m != nil {
		return m.EnqueueOpName
	}
	return nil
}

func (m *QueueRunnerDef) GetCloseOpName() string {
	if m != nil {
		return m.CloseOpName
	}
	return ""
}

func (m *QueueRunnerDef) GetCancelOpName() string {
	if m != nil {
		return m.CancelOpName
	}
	return ""
}

func (m *QueueRunnerDef) GetQueueClosedExceptionTypes() []tensorflow_error.Code {
	if m != nil {
		return m.QueueClosedExceptionTypes
	}
	return nil
}

func init() {
	proto.RegisterType((*QueueRunnerDef)(nil), "tensorflow.QueueRunnerDef")
}

func init() { proto.RegisterFile("tensorflow/core/protobuf/queue_runner.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x89, 0x55, 0xa1, 0xab, 0xad, 0xd8, 0x83, 0x54, 0x51, 0x28, 0x45, 0xa4, 0x28, 0xcd,
	0x82, 0xbe, 0x41, 0xab, 0x57, 0xad, 0x41, 0x10, 0xbc, 0x84, 0x64, 0x33, 0x89, 0xa1, 0xc9, 0xce,
	0x3a, 0x9b, 0x58, 0xfb, 0xe6, 0xe2, 0x49, 0x3a, 0x5b, 0x4d, 0x11, 0xbc, 0x25, 0x3f, 0xdf, 0xf7,
	0x0f, 0x33, 0x2b, 0xae, 0x2a, 0xd0, 0x16, 0x29, 0x2d, 0x70, 0x21, 0x15, 0x12, 0x48, 0x43, 0x58,
	0x61, 0x5c, 0xa7, 0xf2, 0xad, 0x86, 0x1a, 0x42, 0xaa, 0xb5, 0x06, 0xf2, 0x39, 0xed, 0x89, 0x06,
	0x3e, 0xb9, 0xfc, 0x2b, 0x16, 0x79, 0xec, 0x3e, 0x80, 0x08, 0x29, 0x54, 0x98, 0x80, 0x75, 0xde,
	0xf0, 0xcb, 0x13, 0xdd, 0xc7, 0x55, 0x5d, 0xc0, 0x6d, 0xb7, 0x90, 0xf6, 0xce, 0x84, 0x70, 0x03,
	0x74, 0x54, 0x42, 0xdf, 0x1b, 0x78, 0xa3, 0x76, 0xd0, 0xe6, 0xe4, 0x3e, 0x2a, 0xa1, 0x77, 0x21,
	0x0e, 0x40, 0x3b, 0x00, 0x8d, 0x63, 0xb6, 0x06, 0xad, 0x51, 0x3b, 0xe8, 0xac, 0xe3, 0x07, 0xc3,
	0xdc, 0x50, 0x74, 0x54, 0x81, 0xb6, 0xa1, 0x5a, 0xdc, 0xb4, 0xc7, 0xe1, 0x9a, 0x39, 0x17, 0x5d,
	0x15, 0x69, 0x05, 0xc5, 0x2f, 0xb4, 0xcd, 0xd0, 0xbe, 0x4b, 0xd7, 0xd4, 0xb3, 0x38, 0x75, 0xf3,
	0x58, 0x4d, 0x42, 0xf8, 0x50, 0x60, 0xaa, 0x1c, 0x75, 0x58, 0x2d, 0x0d, 0xd8, 0xfe, 0xce, 0xa0,
	0x35, 0xea, 0x5e, 0x1f, 0xf9, 0xcd, 0xda, 0x3e, 0x2f, 0xea, 0x4f, 0x31, 0x81, 0xe0, 0x98, 0xdd,
	0x29, 0xab, 0x77, 0x3f, 0xe6, 0xd3, 0x4a, 0x9c, 0x2c, 0x44, 0x1f, 0x29, 0xdb, 0xf4, 0x52, 0x8a,
	0x4a, 0x58, 0x20, 0xcd, 0x27, 0x87, 0x1b, 0x57, 0x99, 0xad, 0x4e, 0x65, 0x67, 0xde, 0xcb, 0x34,
	0xcb, 0xab, 0xd7, 0x3a, 0xf6, 0x15, 0x96, 0x32, 0x21, 0x58, 0xce, 0x65, 0xe3, 0x8e, 0x2d, 0xd0,
	0x7b, 0xae, 0xb3, 0x71, 0x86, 0xd2, 0xcc, 0x33, 0xf9, 0xdf, 0xeb, 0x7d, 0x7a, 0x5e, 0xbc, 0xcb,
	0x3f, 0x37, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xd7, 0x7b, 0x5a, 0xe3, 0x01, 0x00, 0x00,
}
