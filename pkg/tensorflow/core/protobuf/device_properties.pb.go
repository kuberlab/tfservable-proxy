// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/device_properties.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DeviceProperties struct {
	// Device type (CPU, GPU, ...)
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Vendor (Intel, nvidia, ...)
	Vendor string `protobuf:"bytes,2,opt,name=vendor" json:"vendor,omitempty"`
	// Model (Haswell, K40, ...)
	Model string `protobuf:"bytes,3,opt,name=model" json:"model,omitempty"`
	// Core Frequency in Mhz
	Frequency int64 `protobuf:"varint,4,opt,name=frequency" json:"frequency,omitempty"`
	// Number of cores
	NumCores int64 `protobuf:"varint,5,opt,name=num_cores,json=numCores" json:"num_cores,omitempty"`
	// Version of the tools and libraries used with this device (e.g. gcc 4.9,
	// cudnn 5.1)
	Environment map[string]string `protobuf:"bytes,6,rep,name=environment" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Number of registers per core.
	NumRegisters int64 `protobuf:"varint,7,opt,name=num_registers,json=numRegisters" json:"num_registers,omitempty"`
	// L1 cache size in bytes
	L1CacheSize int64 `protobuf:"varint,8,opt,name=l1_cache_size,json=l1CacheSize" json:"l1_cache_size,omitempty"`
	// L2 cache size in bytes
	L2CacheSize int64 `protobuf:"varint,9,opt,name=l2_cache_size,json=l2CacheSize" json:"l2_cache_size,omitempty"`
	// L3 cache size in bytes
	L3CacheSize int64 `protobuf:"varint,10,opt,name=l3_cache_size,json=l3CacheSize" json:"l3_cache_size,omitempty"`
	// Shared memory size per multiprocessor in bytes. This field is
	// applicable to GPUs only.
	SharedMemorySizePerMultiprocessor int64 `protobuf:"varint,11,opt,name=shared_memory_size_per_multiprocessor,json=sharedMemorySizePerMultiprocessor" json:"shared_memory_size_per_multiprocessor,omitempty"`
	// Memory size in bytes
	MemorySize int64 `protobuf:"varint,12,opt,name=memory_size,json=memorySize" json:"memory_size,omitempty"`
	// Memory bandwidth in KB/s
	Bandwidth int64 `protobuf:"varint,13,opt,name=bandwidth" json:"bandwidth,omitempty"`
}

func (m *DeviceProperties) Reset()                    { *m = DeviceProperties{} }
func (m *DeviceProperties) String() string            { return proto.CompactTextString(m) }
func (*DeviceProperties) ProtoMessage()               {}
func (*DeviceProperties) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *DeviceProperties) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DeviceProperties) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *DeviceProperties) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *DeviceProperties) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *DeviceProperties) GetNumCores() int64 {
	if m != nil {
		return m.NumCores
	}
	return 0
}

func (m *DeviceProperties) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *DeviceProperties) GetNumRegisters() int64 {
	if m != nil {
		return m.NumRegisters
	}
	return 0
}

func (m *DeviceProperties) GetL1CacheSize() int64 {
	if m != nil {
		return m.L1CacheSize
	}
	return 0
}

func (m *DeviceProperties) GetL2CacheSize() int64 {
	if m != nil {
		return m.L2CacheSize
	}
	return 0
}

func (m *DeviceProperties) GetL3CacheSize() int64 {
	if m != nil {
		return m.L3CacheSize
	}
	return 0
}

func (m *DeviceProperties) GetSharedMemorySizePerMultiprocessor() int64 {
	if m != nil {
		return m.SharedMemorySizePerMultiprocessor
	}
	return 0
}

func (m *DeviceProperties) GetMemorySize() int64 {
	if m != nil {
		return m.MemorySize
	}
	return 0
}

func (m *DeviceProperties) GetBandwidth() int64 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

type DeviceMap struct {
	NameAndDevice []*DeviceMap_NamedDevice `protobuf:"bytes,1,rep,name=name_and_device,json=nameAndDevice" json:"name_and_device,omitempty"`
}

func (m *DeviceMap) Reset()                    { *m = DeviceMap{} }
func (m *DeviceMap) String() string            { return proto.CompactTextString(m) }
func (*DeviceMap) ProtoMessage()               {}
func (*DeviceMap) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *DeviceMap) GetNameAndDevice() []*DeviceMap_NamedDevice {
	if m != nil {
		return m.NameAndDevice
	}
	return nil
}

type DeviceMap_NamedDevice struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Device *DeviceProperties `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *DeviceMap_NamedDevice) Reset()                    { *m = DeviceMap_NamedDevice{} }
func (m *DeviceMap_NamedDevice) String() string            { return proto.CompactTextString(m) }
func (*DeviceMap_NamedDevice) ProtoMessage()               {}
func (*DeviceMap_NamedDevice) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1, 0} }

func (m *DeviceMap_NamedDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceMap_NamedDevice) GetDevice() *DeviceProperties {
	if m != nil {
		return m.Device
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceProperties)(nil), "tensorflow.DeviceProperties")
	proto.RegisterType((*DeviceMap)(nil), "tensorflow.DeviceMap")
	proto.RegisterType((*DeviceMap_NamedDevice)(nil), "tensorflow.DeviceMap.NamedDevice")
}

func init() { proto.RegisterFile("tensorflow/core/protobuf/device_properties.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe5, 0x26, 0x0d, 0xcd, 0xb8, 0x11, 0xd1, 0x0a, 0x55, 0xab, 0x52, 0x89, 0x34, 0x08,
	0x29, 0x97, 0xd8, 0x34, 0xe1, 0x80, 0x38, 0x20, 0xd1, 0xd0, 0x03, 0x87, 0x40, 0x64, 0x0e, 0x48,
	0x5c, 0x8c, 0x63, 0x4f, 0x12, 0x2b, 0xde, 0x5d, 0xb3, 0x6b, 0xa7, 0x72, 0x5f, 0x8a, 0x77, 0xe0,
	0xa9, 0x38, 0xa2, 0x5d, 0xbb, 0xb1, 0x1b, 0x44, 0x6f, 0xfb, 0xcd, 0xfc, 0xe6, 0x8f, 0x3c, 0x9f,
	0xe1, 0x75, 0x86, 0x5c, 0x09, 0xb9, 0x4a, 0xc4, 0xad, 0x1b, 0x0a, 0x89, 0x6e, 0x2a, 0x45, 0x26,
	0x96, 0xf9, 0xca, 0x8d, 0x70, 0x17, 0x87, 0xe8, 0xa7, 0x52, 0xa4, 0x28, 0xb3, 0x18, 0x95, 0x63,
	0x52, 0x04, 0xea, 0x8a, 0xe1, 0xef, 0x36, 0xf4, 0x3f, 0x1a, 0x6e, 0xb1, 0xc7, 0x08, 0x81, 0x76,
	0x56, 0xa4, 0x48, 0xad, 0x81, 0x35, 0xea, 0x7a, 0xe6, 0x4d, 0xce, 0xa0, 0xb3, 0x43, 0x1e, 0x09,
	0x49, 0x8f, 0x4c, 0xb4, 0x52, 0xe4, 0x19, 0x1c, 0x33, 0x11, 0x61, 0x42, 0x5b, 0x26, 0x5c, 0x0a,
	0x72, 0x01, 0xdd, 0x95, 0xc4, 0x9f, 0x39, 0xf2, 0xb0, 0xa0, 0xed, 0x81, 0x35, 0x6a, 0x79, 0x75,
	0x80, 0x3c, 0x87, 0x2e, 0xcf, 0x99, 0xaf, 0xb7, 0x55, 0xf4, 0xd8, 0x64, 0x4f, 0x78, 0xce, 0x66,
	0x5a, 0x93, 0x2f, 0x60, 0x23, 0xdf, 0xc5, 0x52, 0x70, 0x86, 0x3c, 0xa3, 0x9d, 0x41, 0x6b, 0x64,
	0x4f, 0xc6, 0x4e, 0xbd, 0xb3, 0x73, 0xb8, 0xaf, 0x73, 0x53, 0xf3, 0x37, 0x3c, 0x93, 0x85, 0xd7,
	0xec, 0x40, 0x5e, 0x42, 0x4f, 0x4f, 0x93, 0xb8, 0x8e, 0x55, 0x86, 0x52, 0xd1, 0x27, 0x66, 0xe2,
	0x29, 0xcf, 0x99, 0x77, 0x1f, 0x23, 0x43, 0xe8, 0x25, 0x57, 0x7e, 0x18, 0x84, 0x1b, 0xf4, 0x55,
	0x7c, 0x87, 0xf4, 0xc4, 0x40, 0x76, 0x72, 0x35, 0xd3, 0xb1, 0xaf, 0xf1, 0x1d, 0x1a, 0x66, 0xd2,
	0x64, 0xba, 0x15, 0x33, 0x79, 0xc8, 0x4c, 0x9b, 0x0c, 0x54, 0xcc, 0xb4, 0x66, 0x16, 0xf0, 0x4a,
	0x6d, 0x02, 0x89, 0x91, 0xcf, 0x90, 0x09, 0x59, 0x18, 0xd0, 0x4f, 0x51, 0xfa, 0x2c, 0x4f, 0xb2,
	0x38, 0x95, 0x22, 0x44, 0xa5, 0x84, 0xa4, 0xb6, 0xa9, 0xbd, 0x2c, 0xe1, 0xb9, 0x61, 0x75, 0x83,
	0x05, 0xca, 0xf9, 0x03, 0x90, 0xbc, 0x00, 0xbb, 0xd1, 0x8a, 0x9e, 0x9a, 0x3a, 0x60, 0xfb, 0x0a,
	0x7d, 0x8f, 0x65, 0xc0, 0xa3, 0xdb, 0x38, 0xca, 0x36, 0xb4, 0x57, 0xde, 0x63, 0x1f, 0x38, 0x7f,
	0x0f, 0xfd, 0xc3, 0x4f, 0x48, 0xfa, 0xd0, 0xda, 0x62, 0x51, 0x59, 0x40, 0x3f, 0xf5, 0xa5, 0x77,
	0x41, 0x92, 0x63, 0x65, 0x80, 0x52, 0xbc, 0x3b, 0x7a, 0x6b, 0x0d, 0x7f, 0x59, 0xd0, 0x2d, 0x8f,
	0x32, 0x0f, 0x52, 0xf2, 0x09, 0x9e, 0xf2, 0x80, 0xa1, 0x1f, 0xf0, 0xc8, 0x2f, 0x2d, 0x48, 0x2d,
	0x73, 0xc4, 0xcb, 0x7f, 0x8f, 0x38, 0x0f, 0x52, 0xe7, 0x73, 0xc0, 0x30, 0x2a, 0xa5, 0xd7, 0xd3,
	0x95, 0x1f, 0x78, 0x25, 0xcf, 0xbf, 0x81, 0xdd, 0xc8, 0x6a, 0x5f, 0xea, 0xfc, 0xbd, 0x2f, 0xf5,
	0x9b, 0xbc, 0x81, 0x4e, 0x35, 0x44, 0xaf, 0x65, 0x4f, 0x2e, 0x1e, 0x73, 0x8a, 0x57, 0xb1, 0xd7,
	0x3f, 0xae, 0xcf, 0x0e, 0x73, 0x0b, 0xfd, 0x6f, 0xa8, 0xef, 0xb3, 0x75, 0x9c, 0x6d, 0xf2, 0xa5,
	0x13, 0x0a, 0xe6, 0x46, 0x12, 0x8b, 0xad, 0x5b, 0xf7, 0x1b, 0x2b, 0x94, 0xbb, 0x98, 0xaf, 0xc7,
	0x6b, 0xe1, 0xa6, 0xdb, 0xb5, 0xfb, 0xbf, 0x3f, 0xef, 0x8f, 0x65, 0x2d, 0x3b, 0x46, 0x4c, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x8b, 0xbc, 0x2c, 0x9f, 0x03, 0x00, 0x00,
}
