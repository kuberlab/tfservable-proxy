// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/util/saved_tensor_slice.proto

package util

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow1 "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/framework"
import tensorflow6 "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/framework"
import tensorflow3 "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/framework"
import tensorflow2 "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/framework"
import tensorflow7 "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/framework"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Metadata describing the set of slices of the same tensor saved in a
// checkpoint file.
type SavedSliceMeta struct {
	// Name of the tensor.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Shape of the tensor
	Shape *tensorflow1.TensorShapeProto `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	// Type of the tensor
	Type tensorflow2.DataType `protobuf:"varint,3,opt,name=type,enum=tensorflow.DataType" json:"type,omitempty"`
	// Explicit list of slices saved in the checkpoint file.
	Slice []*tensorflow6.TensorSliceProto `protobuf:"bytes,4,rep,name=slice" json:"slice,omitempty"`
}

func (m *SavedSliceMeta) Reset()                    { *m = SavedSliceMeta{} }
func (m *SavedSliceMeta) String() string            { return proto.CompactTextString(m) }
func (*SavedSliceMeta) ProtoMessage()               {}
func (*SavedSliceMeta) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *SavedSliceMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SavedSliceMeta) GetShape() *tensorflow1.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *SavedSliceMeta) GetType() tensorflow2.DataType {
	if m != nil {
		return m.Type
	}
	return tensorflow2.DataType_DT_INVALID
}

func (m *SavedSliceMeta) GetSlice() []*tensorflow6.TensorSliceProto {
	if m != nil {
		return m.Slice
	}
	return nil
}

// Metadata describing the set of tensor slices saved in a checkpoint file.
// It is always stored at the beginning of each checkpoint file.
type SavedTensorSliceMeta struct {
	// Each SavedSliceMeta describes the slices for one tensor.
	Tensor []*SavedSliceMeta `protobuf:"bytes,1,rep,name=tensor" json:"tensor,omitempty"`
	// Compatibility version of this checkpoint.  See core/public/version.h
	// for version history.
	Versions *tensorflow7.VersionDef `protobuf:"bytes,2,opt,name=versions" json:"versions,omitempty"`
}

func (m *SavedTensorSliceMeta) Reset()                    { *m = SavedTensorSliceMeta{} }
func (m *SavedTensorSliceMeta) String() string            { return proto.CompactTextString(m) }
func (*SavedTensorSliceMeta) ProtoMessage()               {}
func (*SavedTensorSliceMeta) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *SavedTensorSliceMeta) GetTensor() []*SavedSliceMeta {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *SavedTensorSliceMeta) GetVersions() *tensorflow7.VersionDef {
	if m != nil {
		return m.Versions
	}
	return nil
}

// Saved tensor slice: it stores the name of the tensors, the slice, and the
// raw data.
type SavedSlice struct {
	// Name of the tensor that this slice belongs to. This must be identical to
	// the name used to encode the key for this record.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Extent of the slice.  Must have one entry for each of the dimension of the
	// tensor that this slice belongs to.
	Slice *tensorflow6.TensorSliceProto `protobuf:"bytes,2,opt,name=slice" json:"slice,omitempty"`
	// The raw data of the slice is stored as a TensorProto. Only raw data are
	// stored (we don't fill in fields such as dtype or tensor_shape).
	Data *tensorflow3.TensorProto `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *SavedSlice) Reset()                    { *m = SavedSlice{} }
func (m *SavedSlice) String() string            { return proto.CompactTextString(m) }
func (*SavedSlice) ProtoMessage()               {}
func (*SavedSlice) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *SavedSlice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SavedSlice) GetSlice() *tensorflow6.TensorSliceProto {
	if m != nil {
		return m.Slice
	}
	return nil
}

func (m *SavedSlice) GetData() *tensorflow3.TensorProto {
	if m != nil {
		return m.Data
	}
	return nil
}

// Each record in a v3 checkpoint file is a serialized SavedTensorSlices
// message.
type SavedTensorSlices struct {
	// This is only present at the first item of each checkpoint file and serves
	// as a table of contents, listing all the tensor slices saved in this file.
	Meta *SavedTensorSliceMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// This exists in all but the first item of each checkpoint file.
	Data *SavedSlice `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *SavedTensorSlices) Reset()                    { *m = SavedTensorSlices{} }
func (m *SavedTensorSlices) String() string            { return proto.CompactTextString(m) }
func (*SavedTensorSlices) ProtoMessage()               {}
func (*SavedTensorSlices) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *SavedTensorSlices) GetMeta() *SavedTensorSliceMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SavedTensorSlices) GetData() *SavedSlice {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SavedSliceMeta)(nil), "tensorflow.SavedSliceMeta")
	proto.RegisterType((*SavedTensorSliceMeta)(nil), "tensorflow.SavedTensorSliceMeta")
	proto.RegisterType((*SavedSlice)(nil), "tensorflow.SavedSlice")
	proto.RegisterType((*SavedTensorSlices)(nil), "tensorflow.SavedTensorSlices")
}

func init() { proto.RegisterFile("tensorflow/core/util/saved_tensor_slice.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6b, 0xe2, 0x40,
	0x14, 0xc6, 0x99, 0x35, 0x2b, 0xbb, 0x23, 0x08, 0x3b, 0x2b, 0x6e, 0x90, 0x3d, 0x84, 0xc0, 0x2e,
	0x61, 0x77, 0x4d, 0x20, 0xdb, 0x7b, 0x41, 0xbc, 0x16, 0x24, 0x4a, 0x0f, 0xbd, 0xc8, 0xa8, 0x63,
	0x0c, 0x9a, 0x4c, 0x98, 0x19, 0x15, 0x2f, 0x85, 0xfe, 0x53, 0xfd, 0xdb, 0x7a, 0x2c, 0xf3, 0x92,
	0x34, 0x69, 0x34, 0x6d, 0x6f, 0x0f, 0xde, 0xef, 0xfb, 0xde, 0xfb, 0x1e, 0x33, 0x78, 0xa8, 0x58,
	0x22, 0xb9, 0x58, 0xef, 0xf8, 0xd1, 0x5b, 0x72, 0xc1, 0xbc, 0xbd, 0x8a, 0x76, 0x9e, 0xa4, 0x07,
	0xb6, 0x9a, 0x67, 0xad, 0xb9, 0xdc, 0x45, 0x4b, 0xe6, 0xa6, 0x82, 0x2b, 0x4e, 0x70, 0x89, 0x0f,
	0xfe, 0xd5, 0xa5, 0x6b, 0x41, 0x63, 0x76, 0xe4, 0x62, 0xeb, 0x15, 0xca, 0x0d, 0x4d, 0x73, 0xe5,
	0x47, 0xe8, 0x72, 0xce, 0xe0, 0xf7, 0x7b, 0x74, 0xce, 0xfd, 0x7a, 0x83, 0x3b, 0xa5, 0x4c, 0xe6,
	0x98, 0xd3, 0x8c, 0x1d, 0x98, 0x90, 0x11, 0x4f, 0x72, 0xd2, 0x7e, 0x44, 0xb8, 0x3b, 0xd5, 0xe9,
	0xa7, 0x7a, 0x9b, 0x1b, 0xa6, 0x28, 0x21, 0xd8, 0x48, 0x68, 0xcc, 0x4c, 0x64, 0x21, 0xe7, 0x6b,
	0x00, 0x35, 0xf1, 0xf1, 0x67, 0x08, 0x67, 0x7e, 0xb2, 0x90, 0xd3, 0xf1, 0x7f, 0xba, 0xe5, 0x00,
	0x77, 0x06, 0xe5, 0x54, 0xb7, 0x27, 0xda, 0x33, 0xc8, 0x50, 0xe2, 0x60, 0x43, 0xef, 0x64, 0xb6,
	0x2c, 0xe4, 0x74, 0xfd, 0x5e, 0x55, 0x32, 0xa6, 0x8a, 0xce, 0x4e, 0x29, 0x0b, 0x80, 0x00, 0x77,
	0x3d, 0xde, 0x34, 0xac, 0x56, 0x83, 0xbb, 0x6e, 0x17, 0xee, 0xba, 0xb6, 0xef, 0x71, 0x0f, 0xf6,
	0xae, 0xf4, 0x61, 0x7b, 0x1f, 0xb7, 0x33, 0xb5, 0x89, 0xc0, 0x6c, 0x50, 0x35, 0x7b, 0x9d, 0x34,
	0xc8, 0x49, 0xe2, 0xe3, 0x2f, 0xc5, 0x59, 0xf2, 0x80, 0xfd, 0xaa, 0xea, 0x36, 0xeb, 0x8d, 0xd9,
	0x3a, 0x78, 0xe1, 0xec, 0x07, 0x84, 0x71, 0x69, 0xd7, 0x78, 0x34, 0x88, 0xd5, 0x7c, 0xb4, 0x7a,
	0x2c, 0xf2, 0x17, 0x1b, 0x2b, 0xaa, 0x28, 0x1c, 0xad, 0xe3, 0xff, 0x38, 0x97, 0x64, 0x34, 0x40,
	0xf6, 0x1e, 0x7f, 0xab, 0xdf, 0x40, 0x92, 0x2b, 0x6c, 0xc4, 0x4c, 0x51, 0xd8, 0xa4, 0xe3, 0x5b,
	0x67, 0xf1, 0x6b, 0x07, 0x0b, 0x80, 0x26, 0x7f, 0xf2, 0xb9, 0x17, 0xe2, 0x97, 0x29, 0xb3, 0xb1,
	0x23, 0x89, 0xbf, 0x73, 0x11, 0x56, 0x11, 0xfd, 0x89, 0x46, 0xfd, 0xba, 0x3d, 0xac, 0x2a, 0x27,
	0xe8, 0xee, 0x3a, 0x8c, 0xd4, 0x66, 0xbf, 0x70, 0x97, 0x3c, 0xf6, 0x56, 0x82, 0x9d, 0x8a, 0x47,
	0xad, 0xb5, 0x43, 0xc9, 0xc4, 0x21, 0x4a, 0xc2, 0x61, 0xc8, 0xbd, 0x74, 0x1b, 0x7a, 0x97, 0xfe,
	0xe7, 0x13, 0x42, 0x8b, 0x36, 0xbc, 0xd7, 0xff, 0xcf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x14,
	0x9b, 0x55, 0xc1, 0x03, 0x00, 0x00,
}
