// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/util/example_proto_fast_parsing_test.proto

package util

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow5 "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/example"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This message is parallel to Example, but with additional fields to test
// unknown fields handling in example_proto_fast_parsing_test.cc.
type ExampleWithExtras struct {
	Features *tensorflow5.Features `protobuf:"bytes,1,opt,name=features" json:"features,omitempty"`
	Extra1   string                `protobuf:"bytes,1337,opt,name=extra1" json:"extra1,omitempty"`
	Extra2   int64                 `protobuf:"varint,1338,opt,name=extra2" json:"extra2,omitempty"`
	Extra3   uint32                `protobuf:"fixed32,1339,opt,name=extra3" json:"extra3,omitempty"`
	Extra4   uint64                `protobuf:"fixed64,1340,opt,name=extra4" json:"extra4,omitempty"`
	Extra5   float64               `protobuf:"fixed64,1341,opt,name=extra5" json:"extra5,omitempty"`
	Extra6   []float32             `protobuf:"fixed32,1342,rep,packed,name=extra6" json:"extra6,omitempty"`
	Extra7   *tensorflow5.Features `protobuf:"bytes,1343,opt,name=extra7" json:"extra7,omitempty"`
}

func (m *ExampleWithExtras) Reset()                    { *m = ExampleWithExtras{} }
func (m *ExampleWithExtras) String() string            { return proto.CompactTextString(m) }
func (*ExampleWithExtras) ProtoMessage()               {}
func (*ExampleWithExtras) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ExampleWithExtras) GetFeatures() *tensorflow5.Features {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ExampleWithExtras) GetExtra1() string {
	if m != nil {
		return m.Extra1
	}
	return ""
}

func (m *ExampleWithExtras) GetExtra2() int64 {
	if m != nil {
		return m.Extra2
	}
	return 0
}

func (m *ExampleWithExtras) GetExtra3() uint32 {
	if m != nil {
		return m.Extra3
	}
	return 0
}

func (m *ExampleWithExtras) GetExtra4() uint64 {
	if m != nil {
		return m.Extra4
	}
	return 0
}

func (m *ExampleWithExtras) GetExtra5() float64 {
	if m != nil {
		return m.Extra5
	}
	return 0
}

func (m *ExampleWithExtras) GetExtra6() []float32 {
	if m != nil {
		return m.Extra6
	}
	return nil
}

func (m *ExampleWithExtras) GetExtra7() *tensorflow5.Features {
	if m != nil {
		return m.Extra7
	}
	return nil
}

func init() {
	proto.RegisterType((*ExampleWithExtras)(nil), "tensorflow.ExampleWithExtras")
}

func init() {
	proto.RegisterFile("tensorflow/core/util/example_proto_fast_parsing_test.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd1, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x05, 0x60, 0xa6, 0x85, 0xa8, 0xe3, 0xca, 0x20, 0x38, 0xb8, 0x0a, 0x82, 0x90, 0x4d, 0x32,
	0x9a, 0xb4, 0x15, 0xdc, 0x08, 0x62, 0x7d, 0x80, 0x6e, 0x04, 0x37, 0x21, 0xad, 0x37, 0x69, 0x68,
	0x9a, 0x09, 0x33, 0x37, 0x5a, 0x5f, 0xc1, 0x37, 0xf2, 0xff, 0xb5, 0x5c, 0x4a, 0xda, 0xcb, 0x04,
	0x44, 0xba, 0x4c, 0xbe, 0x73, 0x0e, 0xcc, 0x0c, 0xbf, 0x44, 0xa8, 0x8c, 0xd2, 0x59, 0xa9, 0x9e,
	0xe4, 0x4c, 0x69, 0x90, 0x0d, 0x16, 0xa5, 0x84, 0x55, 0xba, 0xac, 0x4b, 0x48, 0x6a, 0xad, 0x50,
	0x25, 0x59, 0x6a, 0x30, 0xa9, 0x53, 0x6d, 0x8a, 0x2a, 0x4f, 0x10, 0x0c, 0x86, 0xeb, 0xff, 0x2e,
	0xef, 0xba, 0xc7, 0xa7, 0x7f, 0x77, 0x68, 0x42, 0x66, 0x90, 0x62, 0xa3, 0x61, 0x53, 0x39, 0x79,
	0xe9, 0xf1, 0x83, 0xf1, 0x46, 0xee, 0x0a, 0x9c, 0x8f, 0x57, 0xa8, 0x53, 0xe3, 0x9e, 0xf1, 0x5d,
	0x8a, 0x19, 0xc1, 0x3c, 0xe6, 0xef, 0x47, 0x87, 0x61, 0xb7, 0x17, 0xde, 0x92, 0x4d, 0x6c, 0xca,
	0x3d, 0xe2, 0x0e, 0xb4, 0xdd, 0x73, 0xf1, 0xca, 0x3d, 0xe6, 0xef, 0x4d, 0xe8, 0xd3, 0x42, 0x24,
	0xde, 0x5a, 0xe8, 0x13, 0x44, 0x16, 0x62, 0xf1, 0xde, 0xc2, 0x0e, 0x41, 0x6c, 0x61, 0x20, 0x3e,
	0x5a, 0x70, 0x08, 0x06, 0x16, 0x86, 0xe2, 0xb3, 0x05, 0x46, 0x30, 0xb4, 0x30, 0x12, 0x5f, 0xdc,
	0xeb, 0xfb, 0x3d, 0x82, 0x91, 0x1b, 0x10, 0x5c, 0x88, 0x6f, 0xbe, 0xe5, 0x18, 0x14, 0xba, 0xbe,
	0xb9, 0xbf, 0xca, 0x0b, 0x9c, 0x37, 0xd3, 0x70, 0xa6, 0x96, 0xf2, 0x41, 0xc3, 0xf3, 0x42, 0x76,
	0xf9, 0xc0, 0x80, 0x7e, 0x2c, 0xaa, 0x3c, 0xc8, 0x95, 0xac, 0x17, 0xb9, 0xfc, 0xef, 0xa1, 0x7e,
	0x18, 0x9b, 0x3a, 0xeb, 0x9b, 0x8d, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x79, 0xde, 0xbc, 0xea,
	0xca, 0x01, 0x00, 0x00,
}
