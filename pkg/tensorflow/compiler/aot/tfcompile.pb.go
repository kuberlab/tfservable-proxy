// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/compiler/aot/tfcompile.proto

/*
Package aot is a generated protocol buffer package.

It is generated from these files:
	tensorflow/compiler/aot/tfcompile.proto

It has these top-level messages:
	TensorId
	Feed
	Fetch
	Config
*/
package aot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/framework"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TensorId identifies a tensor in a TensorFlow graph, by specifying the output
// index of a particular node in the graph.  If the output of the named node
// feeds into other node(s), this corresponds to one or more edges.  Otherwise
// it doesn't correspond to any existing edges at all, e.g. for output nodes.
type TensorId struct {
	NodeName    string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	OutputIndex int64  `protobuf:"varint,2,opt,name=output_index,json=outputIndex" json:"output_index,omitempty"`
}

func (m *TensorId) Reset()                    { *m = TensorId{} }
func (m *TensorId) String() string            { return proto.CompactTextString(m) }
func (*TensorId) ProtoMessage()               {}
func (*TensorId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TensorId) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *TensorId) GetOutputIndex() int64 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

// Feed represents a single feed tensor in the graph, which corresponds to an
// input argument for the generated function.
type Feed struct {
	Id    *TensorId                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Shape *tensorflow.TensorShapeProto `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	Name  string                       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *Feed) Reset()                    { *m = Feed{} }
func (m *Feed) String() string            { return proto.CompactTextString(m) }
func (*Feed) ProtoMessage()               {}
func (*Feed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Feed) GetId() *TensorId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Feed) GetShape() *tensorflow.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *Feed) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Fetch represents a single fetch tensor in the graph, which corresponds to an
// output argument for the generated function.
type Fetch struct {
	Id   *TensorId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Fetch) Reset()                    { *m = Fetch{} }
func (m *Fetch) String() string            { return proto.CompactTextString(m) }
func (*Fetch) ProtoMessage()               {}
func (*Fetch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Fetch) GetId() *TensorId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Fetch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Config represents configuration information for tfcompile.
type Config struct {
	// Each feed is a positional input argument for the generated function.  The
	// order of each entry matches the order of each input argument.
	Feed []*Feed `protobuf:"bytes,1,rep,name=feed" json:"feed,omitempty"`
	// Each fetch is a positional output argument for the generated function.  The
	// order of each entry matches the order of each output argument.
	Fetch []*Fetch `protobuf:"bytes,2,rep,name=fetch" json:"fetch,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Config) GetFeed() []*Feed {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *Config) GetFetch() []*Fetch {
	if m != nil {
		return m.Fetch
	}
	return nil
}

func init() {
	proto.RegisterType((*TensorId)(nil), "tensorflow.tfcompile.TensorId")
	proto.RegisterType((*Feed)(nil), "tensorflow.tfcompile.Feed")
	proto.RegisterType((*Fetch)(nil), "tensorflow.tfcompile.Fetch")
	proto.RegisterType((*Config)(nil), "tensorflow.tfcompile.Config")
}

func init() { proto.RegisterFile("tensorflow/compiler/aot/tfcompile.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3f, 0x6f, 0xea, 0x30,
	0x14, 0xc5, 0x95, 0xf0, 0x47, 0xe0, 0xbc, 0xb7, 0x58, 0x6f, 0x88, 0xe0, 0xa9, 0xa2, 0x2c, 0x65,
	0x28, 0xb6, 0x9a, 0x7e, 0x03, 0x90, 0x90, 0x68, 0xa5, 0x0a, 0xa5, 0x9d, 0xba, 0xa0, 0x10, 0xdf,
	0x24, 0x16, 0x24, 0x37, 0x72, 0x4c, 0x69, 0x97, 0x7e, 0xee, 0x8e, 0x95, 0x1d, 0x68, 0xa9, 0x04,
	0x43, 0x37, 0xe7, 0xdc, 0x73, 0x4e, 0x7e, 0x96, 0x2f, 0xb9, 0xd2, 0x50, 0x54, 0xa8, 0x92, 0x0d,
	0xee, 0x78, 0x8c, 0x79, 0x29, 0x37, 0xa0, 0x78, 0x84, 0x9a, 0xeb, 0x64, 0xff, 0xc9, 0x4a, 0x85,
	0x1a, 0xe9, 0xbf, 0x6f, 0x23, 0xfb, 0x9a, 0xf5, 0xae, 0x7f, 0xc4, 0x15, 0xf0, 0x44, 0x45, 0x39,
	0xec, 0x50, 0xad, 0x79, 0x3d, 0x59, 0x56, 0x59, 0x54, 0xee, 0x3b, 0x86, 0x77, 0xa4, 0xf3, 0x64,
	0xd5, 0xb9, 0xa0, 0x7d, 0xd2, 0x2d, 0x50, 0xc0, 0xb2, 0x88, 0x72, 0xf0, 0x9d, 0x81, 0x33, 0xea,
	0x86, 0x1d, 0x23, 0x3c, 0x44, 0x39, 0xd0, 0x4b, 0xf2, 0x07, 0xb7, 0xba, 0xdc, 0xea, 0xa5, 0x2c,
	0x04, 0xbc, 0xfa, 0xee, 0xc0, 0x19, 0x35, 0x42, 0xaf, 0xd6, 0xe6, 0x46, 0x1a, 0xbe, 0x93, 0xe6,
	0x0c, 0x40, 0x50, 0x46, 0x5c, 0x29, 0x6c, 0x81, 0x17, 0x5c, 0xb0, 0x53, 0x90, 0xec, 0xf0, 0xcf,
	0xd0, 0x95, 0x82, 0x06, 0xa4, 0x65, 0x91, 0x6c, 0xa7, 0x17, 0xfc, 0x3f, 0x8e, 0xd4, 0xc6, 0x47,
	0x33, 0x5e, 0x18, 0xe0, 0xb0, 0xb6, 0x52, 0x4a, 0x9a, 0x16, 0xb3, 0x61, 0x31, 0xed, 0x79, 0x78,
	0x4f, 0x5a, 0x33, 0xd0, 0x71, 0xf6, 0x6b, 0x80, 0x43, 0x99, 0x7b, 0x54, 0xb6, 0x26, 0xed, 0x29,
	0x16, 0x89, 0x4c, 0x29, 0x23, 0xcd, 0x04, 0xc0, 0xf4, 0x35, 0x46, 0x5e, 0xd0, 0x3b, 0xdd, 0x67,
	0x2e, 0x1e, 0x5a, 0x1f, 0xbd, 0x21, 0xad, 0xc4, 0x60, 0xf8, 0xae, 0x0d, 0xf4, 0xcf, 0x05, 0x74,
	0x9c, 0x85, 0xb5, 0x73, 0xa2, 0x88, 0x8f, 0x2a, 0x3d, 0x69, 0x9c, 0xfc, 0x9d, 0xd6, 0x07, 0x7b,
	0xfd, 0x6a, 0xe1, 0x3c, 0x4f, 0x52, 0xa9, 0xb3, 0xed, 0x8a, 0xc5, 0x98, 0x73, 0xa1, 0xe0, 0xed,
	0xf0, 0xae, 0x26, 0x37, 0xae, 0x40, 0xbd, 0xc8, 0x22, 0x1d, 0xa7, 0xc8, 0xcb, 0x75, 0xca, 0xcf,
	0xac, 0xd2, 0x87, 0xe3, 0xac, 0xda, 0x76, 0x01, 0x6e, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5c,
	0x18, 0x68, 0xc5, 0x6f, 0x02, 0x00, 0x00,
}
