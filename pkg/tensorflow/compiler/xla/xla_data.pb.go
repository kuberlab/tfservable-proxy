// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/compiler/xla/xla_data.proto

package xla

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Primitive types are the individual values that can be held in rectangular
// multidimensional arrays. A description of the rectangular multidimensional
// array dimensions / primitive type is given by Shape, below.
type PrimitiveType int32

const (
	// Invalid primitive type to serve as default.
	PrimitiveType_PRIMITIVE_TYPE_INVALID PrimitiveType = 0
	// Predicates are two-state booleans.
	PrimitiveType_PRED PrimitiveType = 1
	// Signed integral values of fixed width.
	PrimitiveType_S8  PrimitiveType = 2
	PrimitiveType_S16 PrimitiveType = 3
	PrimitiveType_S32 PrimitiveType = 4
	PrimitiveType_S64 PrimitiveType = 5
	// Unsigned integral values of fixed width.
	PrimitiveType_U8  PrimitiveType = 6
	PrimitiveType_U16 PrimitiveType = 7
	PrimitiveType_U32 PrimitiveType = 8
	PrimitiveType_U64 PrimitiveType = 9
	// Floating-point values of fixed width.
	//
	// Note: if f16s are not natively supported on the device, they will be
	// converted to f16 from f32 at arbirary points in the computation.
	PrimitiveType_F16 PrimitiveType = 10
	PrimitiveType_F32 PrimitiveType = 11
	PrimitiveType_F64 PrimitiveType = 12
	// A tuple is a polymorphic sequence; e.g. a shape that holds different
	// sub-shapes. They are used for things like returning multiple values from a
	// computation; e.g. a computation that returns weights and biases may have a
	// signature that results in a tuple like (f32[784x2000], f32[2000])
	//
	// If a shape proto has the tuple element type, it may not have any entries
	// in the dimensions field.
	PrimitiveType_TUPLE PrimitiveType = 13
	// An opaque type used for passing context specific data to a custom
	// operation.
	PrimitiveType_OPAQUE PrimitiveType = 14
)

var PrimitiveType_name = map[int32]string{
	0:  "PRIMITIVE_TYPE_INVALID",
	1:  "PRED",
	2:  "S8",
	3:  "S16",
	4:  "S32",
	5:  "S64",
	6:  "U8",
	7:  "U16",
	8:  "U32",
	9:  "U64",
	10: "F16",
	11: "F32",
	12: "F64",
	13: "TUPLE",
	14: "OPAQUE",
}
var PrimitiveType_value = map[string]int32{
	"PRIMITIVE_TYPE_INVALID": 0,
	"PRED":   1,
	"S8":     2,
	"S16":    3,
	"S32":    4,
	"S64":    5,
	"U8":     6,
	"U16":    7,
	"U32":    8,
	"U64":    9,
	"F16":    10,
	"F32":    11,
	"F64":    12,
	"TUPLE":  13,
	"OPAQUE": 14,
}

func (x PrimitiveType) String() string {
	return proto.EnumName(PrimitiveType_name, int32(x))
}
func (PrimitiveType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Describes the value held inside padding elements.
type PaddingValue int32

const (
	PaddingValue_INVALID_PAD PaddingValue = 0
	// Zero padding must be 0-values that correspond to the shape's element type.
	PaddingValue_ZERO_PAD PaddingValue = 1
	// One padding must be 1-values that correspond to the shape's element type.
	PaddingValue_ONE_PAD PaddingValue = 2
	// "Lowest" padding must be the lowest values in the shape's element type,
	// used as padding for operations like max-accumulation.
	PaddingValue_LOWEST_PAD PaddingValue = 3
	// "Highest" padding must be the largest values in the shape's element type,
	// used as padding for operations like min-accumulation.
	PaddingValue_HIGHEST_PAD PaddingValue = 4
	// Unknown padding could be anything; e.g. floating NaNs!
	PaddingValue_UNKNOWN_PAD PaddingValue = 5
)

var PaddingValue_name = map[int32]string{
	0: "INVALID_PAD",
	1: "ZERO_PAD",
	2: "ONE_PAD",
	3: "LOWEST_PAD",
	4: "HIGHEST_PAD",
	5: "UNKNOWN_PAD",
}
var PaddingValue_value = map[string]int32{
	"INVALID_PAD": 0,
	"ZERO_PAD":    1,
	"ONE_PAD":     2,
	"LOWEST_PAD":  3,
	"HIGHEST_PAD": 4,
	"UNKNOWN_PAD": 5,
}

func (x PaddingValue) String() string {
	return proto.EnumName(PaddingValue_name, int32(x))
}
func (PaddingValue) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type UnaryOperation int32

const (
	UnaryOperation_UNOP_INVALID UnaryOperation = 0
	// Elementwise, logical negation
	UnaryOperation_UNOP_LOGICAL_NOT UnaryOperation = 1
	// Elementwise, computes e^x.
	UnaryOperation_UNOP_EXP UnaryOperation = 2
	// Elementwise, computes -x.
	UnaryOperation_UNOP_NEGATE UnaryOperation = 3
	// Puts the elements in the operand into sorted order.
	UnaryOperation_UNOP_SORT UnaryOperation = 4
	// Elementwise, computes tanh(x).
	UnaryOperation_UNOP_TANH UnaryOperation = 5
	// Elementwise, computes the natural logarithm of x.
	UnaryOperation_UNOP_LOG UnaryOperation = 6
	// Elementwise, computes the floor of x.
	UnaryOperation_UNOP_FLOOR UnaryOperation = 7
	// Elementwise, computes the ceil of x.
	UnaryOperation_UNOP_CEIL UnaryOperation = 8
	// Elementwise, computes the abs of x.
	UnaryOperation_UNOP_ABS UnaryOperation = 9
	// Elementwise, computes the sign of x.
	UnaryOperation_UNOP_SIGN UnaryOperation = 10
	// Elementwise, tests if values are finite (not NaN or inf)
	UnaryOperation_UNOP_IS_FINITE UnaryOperation = 11
	// Elementwise, computes the cosine of x.
	UnaryOperation_UNOP_COS UnaryOperation = 12
)

var UnaryOperation_name = map[int32]string{
	0:  "UNOP_INVALID",
	1:  "UNOP_LOGICAL_NOT",
	2:  "UNOP_EXP",
	3:  "UNOP_NEGATE",
	4:  "UNOP_SORT",
	5:  "UNOP_TANH",
	6:  "UNOP_LOG",
	7:  "UNOP_FLOOR",
	8:  "UNOP_CEIL",
	9:  "UNOP_ABS",
	10: "UNOP_SIGN",
	11: "UNOP_IS_FINITE",
	12: "UNOP_COS",
}
var UnaryOperation_value = map[string]int32{
	"UNOP_INVALID":     0,
	"UNOP_LOGICAL_NOT": 1,
	"UNOP_EXP":         2,
	"UNOP_NEGATE":      3,
	"UNOP_SORT":        4,
	"UNOP_TANH":        5,
	"UNOP_LOG":         6,
	"UNOP_FLOOR":       7,
	"UNOP_CEIL":        8,
	"UNOP_ABS":         9,
	"UNOP_SIGN":        10,
	"UNOP_IS_FINITE":   11,
	"UNOP_COS":         12,
}

func (x UnaryOperation) String() string {
	return proto.EnumName(UnaryOperation_name, int32(x))
}
func (UnaryOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type BinaryOperation int32

const (
	BinaryOperation_BINOP_INVALID BinaryOperation = 0
	// Arithmetic operations.
	BinaryOperation_BINOP_ADD BinaryOperation = 1
	BinaryOperation_BINOP_DIV BinaryOperation = 2
	BinaryOperation_BINOP_MUL BinaryOperation = 3
	BinaryOperation_BINOP_SUB BinaryOperation = 4
	// Comparison operators.
	BinaryOperation_BINOP_EQ BinaryOperation = 5
	BinaryOperation_BINOP_GE BinaryOperation = 6
	BinaryOperation_BINOP_GT BinaryOperation = 7
	BinaryOperation_BINOP_LE BinaryOperation = 8
	BinaryOperation_BINOP_LT BinaryOperation = 9
	BinaryOperation_BINOP_NE BinaryOperation = 10
	// Dot product, matrix multiply.
	BinaryOperation_BINOP_DOT BinaryOperation = 12
	// Indexes into the LHS with the RHS.
	//
	// If the RHS is higher-rank, this is a gather operation.
	//
	// Note: currently out of bounds indices may crash the underlying XLA
	// machine.
	BinaryOperation_BINOP_INDEX BinaryOperation = 13
	// Element-wise maximum.
	BinaryOperation_BINOP_MAX BinaryOperation = 14
	// Element-wise minimum.
	BinaryOperation_BINOP_MIN BinaryOperation = 15
	// Raises the left-hand-side to the right-hand-side power.
	BinaryOperation_BINOP_POW BinaryOperation = 16
	// Remainder operation.
	BinaryOperation_BINOP_REM BinaryOperation = 17
	// Logical operators
	BinaryOperation_BINOP_LOGICAL_AND BinaryOperation = 18
	BinaryOperation_BINOP_LOGICAL_OR  BinaryOperation = 19
)

var BinaryOperation_name = map[int32]string{
	0:  "BINOP_INVALID",
	1:  "BINOP_ADD",
	2:  "BINOP_DIV",
	3:  "BINOP_MUL",
	4:  "BINOP_SUB",
	5:  "BINOP_EQ",
	6:  "BINOP_GE",
	7:  "BINOP_GT",
	8:  "BINOP_LE",
	9:  "BINOP_LT",
	10: "BINOP_NE",
	12: "BINOP_DOT",
	13: "BINOP_INDEX",
	14: "BINOP_MAX",
	15: "BINOP_MIN",
	16: "BINOP_POW",
	17: "BINOP_REM",
	18: "BINOP_LOGICAL_AND",
	19: "BINOP_LOGICAL_OR",
}
var BinaryOperation_value = map[string]int32{
	"BINOP_INVALID":     0,
	"BINOP_ADD":         1,
	"BINOP_DIV":         2,
	"BINOP_MUL":         3,
	"BINOP_SUB":         4,
	"BINOP_EQ":          5,
	"BINOP_GE":          6,
	"BINOP_GT":          7,
	"BINOP_LE":          8,
	"BINOP_LT":          9,
	"BINOP_NE":          10,
	"BINOP_DOT":         12,
	"BINOP_INDEX":       13,
	"BINOP_MAX":         14,
	"BINOP_MIN":         15,
	"BINOP_POW":         16,
	"BINOP_REM":         17,
	"BINOP_LOGICAL_AND": 18,
	"BINOP_LOGICAL_OR":  19,
}

func (x BinaryOperation) String() string {
	return proto.EnumName(BinaryOperation_name, int32(x))
}
func (BinaryOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type RandomDistribution int32

const (
	RandomDistribution_RNG_INVALID RandomDistribution = 0
	// Creates a uniform-distribution-generated random number on the semi-open
	// interval [parameter[0], parameter[1]).
	RandomDistribution_RNG_UNIFORM RandomDistribution = 1
	// Creates a normal-distribution-generated random number with mean
	// parameter[0] and standard deviation parameter[1].
	RandomDistribution_RNG_NORMAL RandomDistribution = 2
	// Creates a Bernoulli-distribution-generated random number with mean
	// parameter[0].
	RandomDistribution_RNG_BERNOULLI RandomDistribution = 3
)

var RandomDistribution_name = map[int32]string{
	0: "RNG_INVALID",
	1: "RNG_UNIFORM",
	2: "RNG_NORMAL",
	3: "RNG_BERNOULLI",
}
var RandomDistribution_value = map[string]int32{
	"RNG_INVALID":   0,
	"RNG_UNIFORM":   1,
	"RNG_NORMAL":    2,
	"RNG_BERNOULLI": 3,
}

func (x RandomDistribution) String() string {
	return proto.EnumName(RandomDistribution_name, int32(x))
}
func (RandomDistribution) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type TernaryOperation int32

const (
	TernaryOperation_TRIOP_INVALID TernaryOperation = 0
	// Given a predicate and two operands, selects operand0 if the predicate is
	// true and operand1 if the predicate is false.
	TernaryOperation_TRIOP_SELECT TernaryOperation = 1
	// Updates operand0 at index operand1 with value operand2 and outputs the
	// updated value.
	TernaryOperation_TRIOP_UPDATE TernaryOperation = 2
	// Given a min, max and an operand returns the operand if between min and max,
	// else returns min if operand is less than min or max if operand is greater
	// than max.
	TernaryOperation_TRIOP_CLAMP TernaryOperation = 3
)

var TernaryOperation_name = map[int32]string{
	0: "TRIOP_INVALID",
	1: "TRIOP_SELECT",
	2: "TRIOP_UPDATE",
	3: "TRIOP_CLAMP",
}
var TernaryOperation_value = map[string]int32{
	"TRIOP_INVALID": 0,
	"TRIOP_SELECT":  1,
	"TRIOP_UPDATE":  2,
	"TRIOP_CLAMP":   3,
}

func (x TernaryOperation) String() string {
	return proto.EnumName(TernaryOperation_name, int32(x))
}
func (TernaryOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type VariadicOperation int32

const (
	VariadicOperation_VAROP_INVALID VariadicOperation = 0
	// Creates a tuple from its operands.
	VariadicOperation_VAROP_TUPLE VariadicOperation = 1
)

var VariadicOperation_name = map[int32]string{
	0: "VAROP_INVALID",
	1: "VAROP_TUPLE",
}
var VariadicOperation_value = map[string]int32{
	"VAROP_INVALID": 0,
	"VAROP_TUPLE":   1,
}

func (x VariadicOperation) String() string {
	return proto.EnumName(VariadicOperation_name, int32(x))
}
func (VariadicOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

// Describes the padding configuration for Pad operation. The padding amount on
// both edges as well as between the elements are specified for each dimension.
type PaddingConfig struct {
	// The padding configuration for all dimensions.
	Dimensions []*PaddingConfig_PaddingConfigDimension `protobuf:"bytes,1,rep,name=dimensions" json:"dimensions,omitempty"`
}

func (m *PaddingConfig) Reset()                    { *m = PaddingConfig{} }
func (m *PaddingConfig) String() string            { return proto.CompactTextString(m) }
func (*PaddingConfig) ProtoMessage()               {}
func (*PaddingConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PaddingConfig) GetDimensions() []*PaddingConfig_PaddingConfigDimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

// Describes the padding configuration for a dimension.
type PaddingConfig_PaddingConfigDimension struct {
	// Padding amount on the low-end (next to the index 0).
	EdgePaddingLow int64 `protobuf:"varint,1,opt,name=edge_padding_low,json=edgePaddingLow" json:"edge_padding_low,omitempty"`
	// Padding amount on the high-end (next to the highest index).
	EdgePaddingHigh int64 `protobuf:"varint,2,opt,name=edge_padding_high,json=edgePaddingHigh" json:"edge_padding_high,omitempty"`
	// Padding amount between the elements.
	InteriorPadding int64 `protobuf:"varint,3,opt,name=interior_padding,json=interiorPadding" json:"interior_padding,omitempty"`
}

func (m *PaddingConfig_PaddingConfigDimension) Reset()         { *m = PaddingConfig_PaddingConfigDimension{} }
func (m *PaddingConfig_PaddingConfigDimension) String() string { return proto.CompactTextString(m) }
func (*PaddingConfig_PaddingConfigDimension) ProtoMessage()    {}
func (*PaddingConfig_PaddingConfigDimension) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 0}
}

func (m *PaddingConfig_PaddingConfigDimension) GetEdgePaddingLow() int64 {
	if m != nil {
		return m.EdgePaddingLow
	}
	return 0
}

func (m *PaddingConfig_PaddingConfigDimension) GetEdgePaddingHigh() int64 {
	if m != nil {
		return m.EdgePaddingHigh
	}
	return 0
}

func (m *PaddingConfig_PaddingConfigDimension) GetInteriorPadding() int64 {
	if m != nil {
		return m.InteriorPadding
	}
	return 0
}

// A layout describes how the array is placed in (1D) memory space.  This
// includes the minor-to-major ordering of dimensions within a shape, as well as
// any padding present in those dimensions.
//
// Clients must specify the layouts of input Literals to the
// computation. Layouts specified in interior operations which take Shapes (for
// example, Convert) are ignored.
//
// See the XLA documentation for more information on shapes and layouts.
type Layout struct {
	// Sequence of dimension numbers, from minor (fastest varying index) to major
	// (slowest varying index). This field is required.
	MinorToMajor []int64 `protobuf:"varint,1,rep,packed,name=minor_to_major,json=minorToMajor" json:"minor_to_major,omitempty"`
	// The width to which the layout of each dimension is padded up
	// to. If present, the size of the padded_dimensions must equal the
	// rank of the shape. The padding appears at the end of a dimension,
	// not at the beginning. This kind of padding, unlike padding in
	// e.g. convolution, is not part of the shape.
	PaddedDimensions []int64 `protobuf:"varint,2,rep,packed,name=padded_dimensions,json=paddedDimensions" json:"padded_dimensions,omitempty"`
	// Describes the values in the padding specified by
	// padded_dimensions.
	PaddingValue PaddingValue `protobuf:"varint,3,opt,name=padding_value,json=paddingValue,enum=xla.PaddingValue" json:"padding_value,omitempty"`
}

func (m *Layout) Reset()                    { *m = Layout{} }
func (m *Layout) String() string            { return proto.CompactTextString(m) }
func (*Layout) ProtoMessage()               {}
func (*Layout) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Layout) GetMinorToMajor() []int64 {
	if m != nil {
		return m.MinorToMajor
	}
	return nil
}

func (m *Layout) GetPaddedDimensions() []int64 {
	if m != nil {
		return m.PaddedDimensions
	}
	return nil
}

func (m *Layout) GetPaddingValue() PaddingValue {
	if m != nil {
		return m.PaddingValue
	}
	return PaddingValue_INVALID_PAD
}

// A shape describes the number of dimensions in the array, the size of each
// dimension, and the primitive component type.
//
// Tuples are a special case in that they have rank zero and have tuple_shapes
// defined.
//
// See the XLA documentation for more information on shapes and layouts.
type Shape struct {
	// The element type for this shape.
	ElementType PrimitiveType `protobuf:"varint,2,opt,name=element_type,json=elementType,enum=xla.PrimitiveType" json:"element_type,omitempty"`
	// The size (number of elements) for each dimension.
	// In XLA, dimensions are numbered from 0 to N-1 for an
	// N-dimensional array. The first element of 'dimensions' is the size of
	// dimension 0, the second element is the size of dimension 1, and so forth.
	// Empty list indicates a scalar.
	Dimensions []int64 `protobuf:"varint,3,rep,packed,name=dimensions" json:"dimensions,omitempty"`
	// For tuples only, the shapes of constitutent shapes in the tuple sequence.
	TupleShapes []*Shape `protobuf:"bytes,4,rep,name=tuple_shapes,json=tupleShapes" json:"tuple_shapes,omitempty"`
	// The layout used to back this shape.
	Layout *Layout `protobuf:"bytes,5,opt,name=layout" json:"layout,omitempty"`
}

func (m *Shape) Reset()                    { *m = Shape{} }
func (m *Shape) String() string            { return proto.CompactTextString(m) }
func (*Shape) ProtoMessage()               {}
func (*Shape) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Shape) GetElementType() PrimitiveType {
	if m != nil {
		return m.ElementType
	}
	return PrimitiveType_PRIMITIVE_TYPE_INVALID
}

func (m *Shape) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Shape) GetTupleShapes() []*Shape {
	if m != nil {
		return m.TupleShapes
	}
	return nil
}

func (m *Shape) GetLayout() *Layout {
	if m != nil {
		return m.Layout
	}
	return nil
}

// Shape of the parameters and output of a computation (like a traditional
// function signature).
type ProgramShape struct {
	Parameters     []*Shape `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
	Result         *Shape   `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	ParameterNames []string `protobuf:"bytes,3,rep,name=parameter_names,json=parameterNames" json:"parameter_names,omitempty"`
}

func (m *ProgramShape) Reset()                    { *m = ProgramShape{} }
func (m *ProgramShape) String() string            { return proto.CompactTextString(m) }
func (*ProgramShape) ProtoMessage()               {}
func (*ProgramShape) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ProgramShape) GetParameters() []*Shape {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ProgramShape) GetResult() *Shape {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ProgramShape) GetParameterNames() []string {
	if m != nil {
		return m.ParameterNames
	}
	return nil
}

// Statistics of a computation.
type ComputationStats struct {
	// The number of floating point operations in the computation.
	FlopCount float64 `protobuf:"fixed64,1,opt,name=flop_count,json=flopCount" json:"flop_count,omitempty"`
	// The number of transcendental operations (e.g., exp) in the computation.
	TranscendentalCount float64 `protobuf:"fixed64,2,opt,name=transcendental_count,json=transcendentalCount" json:"transcendental_count,omitempty"`
}

func (m *ComputationStats) Reset()                    { *m = ComputationStats{} }
func (m *ComputationStats) String() string            { return proto.CompactTextString(m) }
func (*ComputationStats) ProtoMessage()               {}
func (*ComputationStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ComputationStats) GetFlopCount() float64 {
	if m != nil {
		return m.FlopCount
	}
	return 0
}

func (m *ComputationStats) GetTranscendentalCount() float64 {
	if m != nil {
		return m.TranscendentalCount
	}
	return 0
}

// Symbolization metadata for HLO Instructions.
//
// This metadata is used for debugging XLA code generation, as well as
// performance profiling of XLA-generated executables.
type OpMetadata struct {
	// The framework op name that generated this XLA op.
	//
	// Frameworks that build on top of XLA should mirror the names of their ops
	// back to users by specifying the op_type. In this way, even if the
	// framework's "ops" are implemented as multiple XLA HLO Ops, they can be
	// grouped appropriately. (e.g. if a SoftMax layer is emitted into XLA as
	// multiple ops, then each op should have the op_type be "SoftMax".)
	OpType string `protobuf:"bytes,1,opt,name=op_type,json=opType" json:"op_type,omitempty"`
	// The user-specified name of the op.
	//
	// This name is often unique within a computation. Note: some frameworks
	// add auto-generated names if the user does not provide one.
	OpName string `protobuf:"bytes,2,opt,name=op_name,json=opName" json:"op_name,omitempty"`
	// Indicate a file and line that this op is associated to in a user's program.
	//
	// e.g. it could be the file and line of user code that generated the op.
	SourceFile string `protobuf:"bytes,3,opt,name=source_file,json=sourceFile" json:"source_file,omitempty"`
	SourceLine int32  `protobuf:"varint,4,opt,name=source_line,json=sourceLine" json:"source_line,omitempty"`
}

func (m *OpMetadata) Reset()                    { *m = OpMetadata{} }
func (m *OpMetadata) String() string            { return proto.CompactTextString(m) }
func (*OpMetadata) ProtoMessage()               {}
func (*OpMetadata) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *OpMetadata) GetOpType() string {
	if m != nil {
		return m.OpType
	}
	return ""
}

func (m *OpMetadata) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

func (m *OpMetadata) GetSourceFile() string {
	if m != nil {
		return m.SourceFile
	}
	return ""
}

func (m *OpMetadata) GetSourceLine() int32 {
	if m != nil {
		return m.SourceLine
	}
	return 0
}

// Profile data from the execution of a computation.
type ExecutionProfile struct {
	// Whether the executable was read from the compilation cache.
	CompilationCacheHit bool `protobuf:"varint,1,opt,name=compilation_cache_hit,json=compilationCacheHit" json:"compilation_cache_hit,omitempty"`
	// The time in milliseconds spent to compile the computation. This only set if
	// the executable was not read from the compilation cache
	// (compilation_cache_hit == false).
	CompileTimeMs int64 `protobuf:"varint,2,opt,name=compile_time_ms,json=compileTimeMs" json:"compile_time_ms,omitempty"`
	// The number of cycles spent for the computation. This does not include the
	// time taken for the data transfers between the host and the device. This is
	// a target-dependent field and only used for debugging purposes.
	ComputeCycleCount int64 `protobuf:"varint,3,opt,name=compute_cycle_count,json=computeCycleCount" json:"compute_cycle_count,omitempty"`
	// The time in nanoseconds spent for the computation, without data transfer.
	ComputeTimeNs int64 `protobuf:"varint,4,opt,name=compute_time_ns,json=computeTimeNs" json:"compute_time_ns,omitempty"`
	// The time in nanoseconds spent for the entire computation, including the
	// result data transfer time. Current implementation does not spend any cycles
	// for the input data transfer since the memory is initialized with the proper
	// values before the execution.
	ComputeAndTransferTimeNs int64 `protobuf:"varint,5,opt,name=compute_and_transfer_time_ns,json=computeAndTransferTimeNs" json:"compute_and_transfer_time_ns,omitempty"`
}

func (m *ExecutionProfile) Reset()                    { *m = ExecutionProfile{} }
func (m *ExecutionProfile) String() string            { return proto.CompactTextString(m) }
func (*ExecutionProfile) ProtoMessage()               {}
func (*ExecutionProfile) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ExecutionProfile) GetCompilationCacheHit() bool {
	if m != nil {
		return m.CompilationCacheHit
	}
	return false
}

func (m *ExecutionProfile) GetCompileTimeMs() int64 {
	if m != nil {
		return m.CompileTimeMs
	}
	return 0
}

func (m *ExecutionProfile) GetComputeCycleCount() int64 {
	if m != nil {
		return m.ComputeCycleCount
	}
	return 0
}

func (m *ExecutionProfile) GetComputeTimeNs() int64 {
	if m != nil {
		return m.ComputeTimeNs
	}
	return 0
}

func (m *ExecutionProfile) GetComputeAndTransferTimeNs() int64 {
	if m != nil {
		return m.ComputeAndTransferTimeNs
	}
	return 0
}

// Handle given to a user that represents a computation that the user builds up
// before execution.
type ComputationHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *ComputationHandle) Reset()                    { *m = ComputationHandle{} }
func (m *ComputationHandle) String() string            { return proto.CompactTextString(m) }
func (*ComputationHandle) ProtoMessage()               {}
func (*ComputationHandle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ComputationHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Handle given to a user that represents an execution that the user launched
// asynchronously on the device.
type ExecutionHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *ExecutionHandle) Reset()                    { *m = ExecutionHandle{} }
func (m *ExecutionHandle) String() string            { return proto.CompactTextString(m) }
func (*ExecutionHandle) ProtoMessage()               {}
func (*ExecutionHandle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ExecutionHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Handle given to a user that represents a globally accessible allocation.
// Contrast this against a ComputationDataHandle, which is not globally
// accessible, since it only exists within a specific computation.
type GlobalDataHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *GlobalDataHandle) Reset()                    { *m = GlobalDataHandle{} }
func (m *GlobalDataHandle) String() string            { return proto.CompactTextString(m) }
func (*GlobalDataHandle) ProtoMessage()               {}
func (*GlobalDataHandle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *GlobalDataHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Handle given to a user that represents a data result in a computation.
// This is used to pass to subsequent computations that depends upon the data as
// an operand.
type ComputationDataHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *ComputationDataHandle) Reset()                    { *m = ComputationDataHandle{} }
func (m *ComputationDataHandle) String() string            { return proto.CompactTextString(m) }
func (*ComputationDataHandle) ProtoMessage()               {}
func (*ComputationDataHandle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ComputationDataHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Handle given to a user that represents a replicated virtual device. Each
// replicated device represents N physical devices for execution where N is the
// number of replicas.
type DeviceHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
	// The number of model-parallel virtual devices that communicate via XLA
	// Send/Recv instructions.
	DeviceCount int64 `protobuf:"varint,2,opt,name=device_count,json=deviceCount" json:"device_count,omitempty"`
}

func (m *DeviceHandle) Reset()                    { *m = DeviceHandle{} }
func (m *DeviceHandle) String() string            { return proto.CompactTextString(m) }
func (*DeviceHandle) ProtoMessage()               {}
func (*DeviceHandle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *DeviceHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *DeviceHandle) GetDeviceCount() int64 {
	if m != nil {
		return m.DeviceCount
	}
	return 0
}

// Handle given to a user to represent a channel between two computations
// via a Send and Recv instruction pair. Channels are unbuffered, so Send
// Send instructions will be blocked until the data is transferred.
type ChannelHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *ChannelHandle) Reset()                    { *m = ChannelHandle{} }
func (m *ChannelHandle) String() string            { return proto.CompactTextString(m) }
func (*ChannelHandle) ProtoMessage()               {}
func (*ChannelHandle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *ChannelHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// DeviceAssignmentProto is a serialized form of DeviceAssignment class, which
// represents the device ids assigned to a set of replicated computations.
// See xla::DeviceAssignment class comment for more details.
type DeviceAssignmentProto struct {
	ReplicaCount       int32                                      `protobuf:"varint,1,opt,name=replica_count,json=replicaCount" json:"replica_count,omitempty"`
	ComputationCount   int32                                      `protobuf:"varint,2,opt,name=computation_count,json=computationCount" json:"computation_count,omitempty"`
	ComputationDevices []*DeviceAssignmentProto_ComputationDevice `protobuf:"bytes,3,rep,name=computation_devices,json=computationDevices" json:"computation_devices,omitempty"`
}

func (m *DeviceAssignmentProto) Reset()                    { *m = DeviceAssignmentProto{} }
func (m *DeviceAssignmentProto) String() string            { return proto.CompactTextString(m) }
func (*DeviceAssignmentProto) ProtoMessage()               {}
func (*DeviceAssignmentProto) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *DeviceAssignmentProto) GetReplicaCount() int32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *DeviceAssignmentProto) GetComputationCount() int32 {
	if m != nil {
		return m.ComputationCount
	}
	return 0
}

func (m *DeviceAssignmentProto) GetComputationDevices() []*DeviceAssignmentProto_ComputationDevice {
	if m != nil {
		return m.ComputationDevices
	}
	return nil
}

// Each logical computation runs on replica_count physical devices.
// ComputationDevice represents the device ids assinged to the replicas.
type DeviceAssignmentProto_ComputationDevice struct {
	ReplicaDeviceIds []int32 `protobuf:"varint,1,rep,packed,name=replica_device_ids,json=replicaDeviceIds" json:"replica_device_ids,omitempty"`
}

func (m *DeviceAssignmentProto_ComputationDevice) Reset() {
	*m = DeviceAssignmentProto_ComputationDevice{}
}
func (m *DeviceAssignmentProto_ComputationDevice) String() string { return proto.CompactTextString(m) }
func (*DeviceAssignmentProto_ComputationDevice) ProtoMessage()    {}
func (*DeviceAssignmentProto_ComputationDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{13, 0}
}

func (m *DeviceAssignmentProto_ComputationDevice) GetReplicaDeviceIds() []int32 {
	if m != nil {
		return m.ReplicaDeviceIds
	}
	return nil
}

// Literals are used when the server and client need to exchange materialized
// data / results. Literals are also used to describe constants used in
// computations.
//
// Transfers to/from the client are encoded in literal form, and the structure
// of the repeated fields is implied by the shape.
type LiteralProto struct {
	Shape         *Shape          `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
	Preds         []bool          `protobuf:"varint,2,rep,packed,name=preds" json:"preds,omitempty"`
	U8S           []byte          `protobuf:"bytes,3,opt,name=u8s,proto3" json:"u8s,omitempty"`
	S32S          []int32         `protobuf:"varint,4,rep,packed,name=s32s" json:"s32s,omitempty"`
	S64S          []int64         `protobuf:"varint,5,rep,packed,name=s64s" json:"s64s,omitempty"`
	U32S          []uint32        `protobuf:"varint,6,rep,packed,name=u32s" json:"u32s,omitempty"`
	U64S          []uint64        `protobuf:"varint,7,rep,packed,name=u64s" json:"u64s,omitempty"`
	F32S          []float32       `protobuf:"fixed32,8,rep,packed,name=f32s" json:"f32s,omitempty"`
	F64S          []float64       `protobuf:"fixed64,9,rep,packed,name=f64s" json:"f64s,omitempty"`
	TupleLiterals []*LiteralProto `protobuf:"bytes,10,rep,name=tuple_literals,json=tupleLiterals" json:"tuple_literals,omitempty"`
	F16S          []byte          `protobuf:"bytes,11,opt,name=f16s,proto3" json:"f16s,omitempty"`
}

func (m *LiteralProto) Reset()                    { *m = LiteralProto{} }
func (m *LiteralProto) String() string            { return proto.CompactTextString(m) }
func (*LiteralProto) ProtoMessage()               {}
func (*LiteralProto) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *LiteralProto) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *LiteralProto) GetPreds() []bool {
	if m != nil {
		return m.Preds
	}
	return nil
}

func (m *LiteralProto) GetU8S() []byte {
	if m != nil {
		return m.U8S
	}
	return nil
}

func (m *LiteralProto) GetS32S() []int32 {
	if m != nil {
		return m.S32S
	}
	return nil
}

func (m *LiteralProto) GetS64S() []int64 {
	if m != nil {
		return m.S64S
	}
	return nil
}

func (m *LiteralProto) GetU32S() []uint32 {
	if m != nil {
		return m.U32S
	}
	return nil
}

func (m *LiteralProto) GetU64S() []uint64 {
	if m != nil {
		return m.U64S
	}
	return nil
}

func (m *LiteralProto) GetF32S() []float32 {
	if m != nil {
		return m.F32S
	}
	return nil
}

func (m *LiteralProto) GetF64S() []float64 {
	if m != nil {
		return m.F64S
	}
	return nil
}

func (m *LiteralProto) GetTupleLiterals() []*LiteralProto {
	if m != nil {
		return m.TupleLiterals
	}
	return nil
}

func (m *LiteralProto) GetF16S() []byte {
	if m != nil {
		return m.F16S
	}
	return nil
}

type WindowDimension struct {
	// The size of the window in this dimension. For a rectangle, this would be
	// the width or height.
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	// The stride at which the window moves across the base area in this
	// dimension. In other words, this is the spacing between different
	// positions of the window in this dimension.
	Stride int64 `protobuf:"varint,2,opt,name=stride" json:"stride,omitempty"`
	// If positive, means the amount of padding with zeroes to add to the base
	// area at the low end of this dimension; if negative, its negative means the
	// number of elements removed from the low end of this dimension. For example,
	// in the horizontal dimension of a rectangle, this would be the number of
	// zeroes to pad on the left, given that indices increase when going right.
	PaddingLow int64 `protobuf:"varint,3,opt,name=padding_low,json=paddingLow" json:"padding_low,omitempty"`
	// As padding_low, but on the high end of this dimension. For
	// example, in the horizontal dimension of a rectangle, this would
	// be the number of zeroes to pad on the right, given that indices
	// increase when going right.
	PaddingHigh int64 `protobuf:"varint,4,opt,name=padding_high,json=paddingHigh" json:"padding_high,omitempty"`
	// Dilation factor of the sliding window in this dimension. A dilation factor
	// of 1 means no dilation. window_dilation - 1 no-op entries ("holes") are
	// implicitly placed between each kernel element. See documentation for
	// convolution.
	WindowDilation int64 `protobuf:"varint,5,opt,name=window_dilation,json=windowDilation" json:"window_dilation,omitempty"`
	// Dilation factor of the base area in this dimension. A dilation factor of 1
	// means no dilation. base_dilation - 1 no-op entries ("holes") are implicitly
	// placed between each base area element. See documentation for convolution.
	BaseDilation int64 `protobuf:"varint,6,opt,name=base_dilation,json=baseDilation" json:"base_dilation,omitempty"`
}

func (m *WindowDimension) Reset()                    { *m = WindowDimension{} }
func (m *WindowDimension) String() string            { return proto.CompactTextString(m) }
func (*WindowDimension) ProtoMessage()               {}
func (*WindowDimension) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *WindowDimension) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *WindowDimension) GetStride() int64 {
	if m != nil {
		return m.Stride
	}
	return 0
}

func (m *WindowDimension) GetPaddingLow() int64 {
	if m != nil {
		return m.PaddingLow
	}
	return 0
}

func (m *WindowDimension) GetPaddingHigh() int64 {
	if m != nil {
		return m.PaddingHigh
	}
	return 0
}

func (m *WindowDimension) GetWindowDilation() int64 {
	if m != nil {
		return m.WindowDilation
	}
	return 0
}

func (m *WindowDimension) GetBaseDilation() int64 {
	if m != nil {
		return m.BaseDilation
	}
	return 0
}

// Describes the windowing in an operation such as convolution.
//
// The window is moved across a base area and for each position of the
// window a computation is performed. The field below describes the
// window and the movement of the window across a base area.
type Window struct {
	Dimensions []*WindowDimension `protobuf:"bytes,1,rep,name=dimensions" json:"dimensions,omitempty"`
}

func (m *Window) Reset()                    { *m = Window{} }
func (m *Window) String() string            { return proto.CompactTextString(m) }
func (*Window) ProtoMessage()               {}
func (*Window) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *Window) GetDimensions() []*WindowDimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type ConstantRequest struct {
	Literal *LiteralProto `protobuf:"bytes,2,opt,name=literal" json:"literal,omitempty"`
}

func (m *ConstantRequest) Reset()                    { *m = ConstantRequest{} }
func (m *ConstantRequest) String() string            { return proto.CompactTextString(m) }
func (*ConstantRequest) ProtoMessage()               {}
func (*ConstantRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *ConstantRequest) GetLiteral() *LiteralProto {
	if m != nil {
		return m.Literal
	}
	return nil
}

type GetTupleElementRequest struct {
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	Index   int64                  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (m *GetTupleElementRequest) Reset()                    { *m = GetTupleElementRequest{} }
func (m *GetTupleElementRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTupleElementRequest) ProtoMessage()               {}
func (*GetTupleElementRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *GetTupleElementRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *GetTupleElementRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type SliceRequest struct {
	Operand      *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	StartIndices []int64                `protobuf:"varint,3,rep,packed,name=start_indices,json=startIndices" json:"start_indices,omitempty"`
	LimitIndices []int64                `protobuf:"varint,4,rep,packed,name=limit_indices,json=limitIndices" json:"limit_indices,omitempty"`
	Stride       []int64                `protobuf:"varint,5,rep,packed,name=stride" json:"stride,omitempty"`
}

func (m *SliceRequest) Reset()                    { *m = SliceRequest{} }
func (m *SliceRequest) String() string            { return proto.CompactTextString(m) }
func (*SliceRequest) ProtoMessage()               {}
func (*SliceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *SliceRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *SliceRequest) GetStartIndices() []int64 {
	if m != nil {
		return m.StartIndices
	}
	return nil
}

func (m *SliceRequest) GetLimitIndices() []int64 {
	if m != nil {
		return m.LimitIndices
	}
	return nil
}

func (m *SliceRequest) GetStride() []int64 {
	if m != nil {
		return m.Stride
	}
	return nil
}

type DynamicSliceRequest struct {
	// Operand from which to slice at dynamic 'start_indices'.
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// Dynamically computed 'start_indices' for slice operation.
	StartIndices *ComputationDataHandle `protobuf:"bytes,3,opt,name=start_indices,json=startIndices" json:"start_indices,omitempty"`
	// Slice sizes for each dimension (note that indices calculations are computed
	// modulo dimension sizes to avoid out-of-bound array accesses).
	SliceSizes []int64 `protobuf:"varint,4,rep,packed,name=slice_sizes,json=sliceSizes" json:"slice_sizes,omitempty"`
}

func (m *DynamicSliceRequest) Reset()                    { *m = DynamicSliceRequest{} }
func (m *DynamicSliceRequest) String() string            { return proto.CompactTextString(m) }
func (*DynamicSliceRequest) ProtoMessage()               {}
func (*DynamicSliceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *DynamicSliceRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *DynamicSliceRequest) GetStartIndices() *ComputationDataHandle {
	if m != nil {
		return m.StartIndices
	}
	return nil
}

func (m *DynamicSliceRequest) GetSliceSizes() []int64 {
	if m != nil {
		return m.SliceSizes
	}
	return nil
}

type DynamicUpdateSliceRequest struct {
	// Operand on which slice 'update' is to be applied.
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// The slice update to apply to 'operand'.
	Update *ComputationDataHandle `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
	// Dynamically computed start indices for the update slice operation.
	StartIndices *ComputationDataHandle `protobuf:"bytes,4,opt,name=start_indices,json=startIndices" json:"start_indices,omitempty"`
}

func (m *DynamicUpdateSliceRequest) Reset()                    { *m = DynamicUpdateSliceRequest{} }
func (m *DynamicUpdateSliceRequest) String() string            { return proto.CompactTextString(m) }
func (*DynamicUpdateSliceRequest) ProtoMessage()               {}
func (*DynamicUpdateSliceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *DynamicUpdateSliceRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *DynamicUpdateSliceRequest) GetUpdate() *ComputationDataHandle {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *DynamicUpdateSliceRequest) GetStartIndices() *ComputationDataHandle {
	if m != nil {
		return m.StartIndices
	}
	return nil
}

type ConvolutionDimensionNumbers struct {
	// The number of the dimension that represents batch in the input
	// (lhs) and output.
	BatchDimension int64 `protobuf:"varint,1,opt,name=batch_dimension,json=batchDimension" json:"batch_dimension,omitempty"`
	// The number of the dimension that represents features in the input
	// (lhs) and output.
	FeatureDimension int64 `protobuf:"varint,2,opt,name=feature_dimension,json=featureDimension" json:"feature_dimension,omitempty"`
	// The dimension numbers for the spatial dimensions that the window
	// moves through in the input (lhs) and output.
	SpatialDimensions []int64 `protobuf:"varint,5,rep,packed,name=spatial_dimensions,json=spatialDimensions" json:"spatial_dimensions,omitempty"`
	// The number of the dimension that represents input features in the
	// convolutional kernel (rhs).
	KernelInputFeatureDimension int64 `protobuf:"varint,3,opt,name=kernel_input_feature_dimension,json=kernelInputFeatureDimension" json:"kernel_input_feature_dimension,omitempty"`
	// The number of the dimension that represents output features in
	// the convolutional kernel (rhs).
	KernelOutputFeatureDimension int64 `protobuf:"varint,4,opt,name=kernel_output_feature_dimension,json=kernelOutputFeatureDimension" json:"kernel_output_feature_dimension,omitempty"`
	// The dimension numbers for the spatial dimensions that the window
	// moves through in the kernel (rhs). window.strides(0) is the
	// stride in the kernel_spatial_dimensions(0) dimension.
	KernelSpatialDimensions []int64 `protobuf:"varint,6,rep,packed,name=kernel_spatial_dimensions,json=kernelSpatialDimensions" json:"kernel_spatial_dimensions,omitempty"`
}

func (m *ConvolutionDimensionNumbers) Reset()                    { *m = ConvolutionDimensionNumbers{} }
func (m *ConvolutionDimensionNumbers) String() string            { return proto.CompactTextString(m) }
func (*ConvolutionDimensionNumbers) ProtoMessage()               {}
func (*ConvolutionDimensionNumbers) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *ConvolutionDimensionNumbers) GetBatchDimension() int64 {
	if m != nil {
		return m.BatchDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetFeatureDimension() int64 {
	if m != nil {
		return m.FeatureDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetSpatialDimensions() []int64 {
	if m != nil {
		return m.SpatialDimensions
	}
	return nil
}

func (m *ConvolutionDimensionNumbers) GetKernelInputFeatureDimension() int64 {
	if m != nil {
		return m.KernelInputFeatureDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetKernelOutputFeatureDimension() int64 {
	if m != nil {
		return m.KernelOutputFeatureDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetKernelSpatialDimensions() []int64 {
	if m != nil {
		return m.KernelSpatialDimensions
	}
	return nil
}

type ConvolveRequest struct {
	Lhs              *ComputationDataHandle       `protobuf:"bytes,2,opt,name=lhs" json:"lhs,omitempty"`
	Rhs              *ComputationDataHandle       `protobuf:"bytes,3,opt,name=rhs" json:"rhs,omitempty"`
	Window           *Window                      `protobuf:"bytes,4,opt,name=window" json:"window,omitempty"`
	DimensionNumbers *ConvolutionDimensionNumbers `protobuf:"bytes,5,opt,name=dimension_numbers,json=dimensionNumbers" json:"dimension_numbers,omitempty"`
}

func (m *ConvolveRequest) Reset()                    { *m = ConvolveRequest{} }
func (m *ConvolveRequest) String() string            { return proto.CompactTextString(m) }
func (*ConvolveRequest) ProtoMessage()               {}
func (*ConvolveRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *ConvolveRequest) GetLhs() *ComputationDataHandle {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *ConvolveRequest) GetRhs() *ComputationDataHandle {
	if m != nil {
		return m.Rhs
	}
	return nil
}

func (m *ConvolveRequest) GetWindow() *Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *ConvolveRequest) GetDimensionNumbers() *ConvolutionDimensionNumbers {
	if m != nil {
		return m.DimensionNumbers
	}
	return nil
}

type InfeedRequest struct {
	// The shape of the data returned by reading the device's infeed buffer.
	Shape *Shape `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	// Additional infeed configuration for the backend.
	Config []byte `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *InfeedRequest) Reset()                    { *m = InfeedRequest{} }
func (m *InfeedRequest) String() string            { return proto.CompactTextString(m) }
func (*InfeedRequest) ProtoMessage()               {}
func (*InfeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *InfeedRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *InfeedRequest) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type OutfeedRequest struct {
	// The shape of the data returned by reading the device's outfeed buffer.
	Shape *Shape `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
	// Operand to the Outfeed. Supports tuple.
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// Backend-specific information for how to perform the outfeed.
	OutfeedConfig []byte `protobuf:"bytes,3,opt,name=outfeed_config,json=outfeedConfig,proto3" json:"outfeed_config,omitempty"`
}

func (m *OutfeedRequest) Reset()                    { *m = OutfeedRequest{} }
func (m *OutfeedRequest) String() string            { return proto.CompactTextString(m) }
func (*OutfeedRequest) ProtoMessage()               {}
func (*OutfeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *OutfeedRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *OutfeedRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *OutfeedRequest) GetOutfeedConfig() []byte {
	if m != nil {
		return m.OutfeedConfig
	}
	return nil
}

type CallRequest struct {
	ToApply  *ComputationHandle       `protobuf:"bytes,2,opt,name=to_apply,json=toApply" json:"to_apply,omitempty"`
	Operands []*ComputationDataHandle `protobuf:"bytes,3,rep,name=operands" json:"operands,omitempty"`
}

func (m *CallRequest) Reset()                    { *m = CallRequest{} }
func (m *CallRequest) String() string            { return proto.CompactTextString(m) }
func (*CallRequest) ProtoMessage()               {}
func (*CallRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *CallRequest) GetToApply() *ComputationHandle {
	if m != nil {
		return m.ToApply
	}
	return nil
}

func (m *CallRequest) GetOperands() []*ComputationDataHandle {
	if m != nil {
		return m.Operands
	}
	return nil
}

type CustomCallRequest struct {
	CallTargetName string                   `protobuf:"bytes,2,opt,name=call_target_name,json=callTargetName" json:"call_target_name,omitempty"`
	Operands       []*ComputationDataHandle `protobuf:"bytes,3,rep,name=operands" json:"operands,omitempty"`
	Shape          *Shape                   `protobuf:"bytes,4,opt,name=shape" json:"shape,omitempty"`
}

func (m *CustomCallRequest) Reset()                    { *m = CustomCallRequest{} }
func (m *CustomCallRequest) String() string            { return proto.CompactTextString(m) }
func (*CustomCallRequest) ProtoMessage()               {}
func (*CustomCallRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *CustomCallRequest) GetCallTargetName() string {
	if m != nil {
		return m.CallTargetName
	}
	return ""
}

func (m *CustomCallRequest) GetOperands() []*ComputationDataHandle {
	if m != nil {
		return m.Operands
	}
	return nil
}

func (m *CustomCallRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

type MapRequest struct {
	Operands       []*ComputationDataHandle `protobuf:"bytes,2,rep,name=operands" json:"operands,omitempty"`
	ToApply        *ComputationHandle       `protobuf:"bytes,3,opt,name=to_apply,json=toApply" json:"to_apply,omitempty"`
	StaticOperands []*ComputationDataHandle `protobuf:"bytes,4,rep,name=static_operands,json=staticOperands" json:"static_operands,omitempty"`
}

func (m *MapRequest) Reset()                    { *m = MapRequest{} }
func (m *MapRequest) String() string            { return proto.CompactTextString(m) }
func (*MapRequest) ProtoMessage()               {}
func (*MapRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *MapRequest) GetOperands() []*ComputationDataHandle {
	if m != nil {
		return m.Operands
	}
	return nil
}

func (m *MapRequest) GetToApply() *ComputationHandle {
	if m != nil {
		return m.ToApply
	}
	return nil
}

func (m *MapRequest) GetStaticOperands() []*ComputationDataHandle {
	if m != nil {
		return m.StaticOperands
	}
	return nil
}

type ReduceRequest struct {
	// Operand to the reduction.
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// Initial value for the reduction. This must be consistent with the result
	// shape of to_apply.
	InitValue *ComputationDataHandle `protobuf:"bytes,3,opt,name=init_value,json=initValue" json:"init_value,omitempty"`
	// The dimensions to reduce over.
	Dimensions []int64 `protobuf:"varint,4,rep,packed,name=dimensions" json:"dimensions,omitempty"`
	// The computation to apply in the reduction.
	ToApply *ComputationHandle `protobuf:"bytes,5,opt,name=to_apply,json=toApply" json:"to_apply,omitempty"`
}

func (m *ReduceRequest) Reset()                    { *m = ReduceRequest{} }
func (m *ReduceRequest) String() string            { return proto.CompactTextString(m) }
func (*ReduceRequest) ProtoMessage()               {}
func (*ReduceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *ReduceRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ReduceRequest) GetInitValue() *ComputationDataHandle {
	if m != nil {
		return m.InitValue
	}
	return nil
}

func (m *ReduceRequest) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *ReduceRequest) GetToApply() *ComputationHandle {
	if m != nil {
		return m.ToApply
	}
	return nil
}

type ReduceWindowRequest struct {
	Operand   *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	InitValue *ComputationDataHandle `protobuf:"bytes,3,opt,name=init_value,json=initValue" json:"init_value,omitempty"`
	Window    *Window                `protobuf:"bytes,4,opt,name=window" json:"window,omitempty"`
	ToApply   *ComputationHandle     `protobuf:"bytes,5,opt,name=to_apply,json=toApply" json:"to_apply,omitempty"`
}

func (m *ReduceWindowRequest) Reset()                    { *m = ReduceWindowRequest{} }
func (m *ReduceWindowRequest) String() string            { return proto.CompactTextString(m) }
func (*ReduceWindowRequest) ProtoMessage()               {}
func (*ReduceWindowRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *ReduceWindowRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ReduceWindowRequest) GetInitValue() *ComputationDataHandle {
	if m != nil {
		return m.InitValue
	}
	return nil
}

func (m *ReduceWindowRequest) GetWindow() *Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *ReduceWindowRequest) GetToApply() *ComputationHandle {
	if m != nil {
		return m.ToApply
	}
	return nil
}

type BatchNormTrainingRequest struct {
	Operand      *ComputationDataHandle `protobuf:"bytes,1,opt,name=operand" json:"operand,omitempty"`
	Scale        *ComputationDataHandle `protobuf:"bytes,2,opt,name=scale" json:"scale,omitempty"`
	Offset       *ComputationDataHandle `protobuf:"bytes,3,opt,name=offset" json:"offset,omitempty"`
	Epsilon      float32                `protobuf:"fixed32,4,opt,name=epsilon" json:"epsilon,omitempty"`
	FeatureIndex int64                  `protobuf:"varint,5,opt,name=feature_index,json=featureIndex" json:"feature_index,omitempty"`
}

func (m *BatchNormTrainingRequest) Reset()                    { *m = BatchNormTrainingRequest{} }
func (m *BatchNormTrainingRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchNormTrainingRequest) ProtoMessage()               {}
func (*BatchNormTrainingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *BatchNormTrainingRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *BatchNormTrainingRequest) GetScale() *ComputationDataHandle {
	if m != nil {
		return m.Scale
	}
	return nil
}

func (m *BatchNormTrainingRequest) GetOffset() *ComputationDataHandle {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *BatchNormTrainingRequest) GetEpsilon() float32 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *BatchNormTrainingRequest) GetFeatureIndex() int64 {
	if m != nil {
		return m.FeatureIndex
	}
	return 0
}

type CrossReplicaSumRequest struct {
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
}

func (m *CrossReplicaSumRequest) Reset()                    { *m = CrossReplicaSumRequest{} }
func (m *CrossReplicaSumRequest) String() string            { return proto.CompactTextString(m) }
func (*CrossReplicaSumRequest) ProtoMessage()               {}
func (*CrossReplicaSumRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *CrossReplicaSumRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type SelectAndScatterRequest struct {
	// Operand array on which the windows slide.
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// Source array for the data to scatter.
	Source *ComputationDataHandle `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// Initial scalar value for each element in the output.
	InitValue *ComputationDataHandle `protobuf:"bytes,4,opt,name=init_value,json=initValue" json:"init_value,omitempty"`
	// Window configuration.
	Window *Window `protobuf:"bytes,5,opt,name=window" json:"window,omitempty"`
	// Binary function used to select an element from each window.
	Select *ComputationHandle `protobuf:"bytes,6,opt,name=select" json:"select,omitempty"`
	// Binary function used to combine each scattered value from source with the
	// current output value at the selected location.
	Scatter *ComputationHandle `protobuf:"bytes,7,opt,name=scatter" json:"scatter,omitempty"`
}

func (m *SelectAndScatterRequest) Reset()                    { *m = SelectAndScatterRequest{} }
func (m *SelectAndScatterRequest) String() string            { return proto.CompactTextString(m) }
func (*SelectAndScatterRequest) ProtoMessage()               {}
func (*SelectAndScatterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *SelectAndScatterRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *SelectAndScatterRequest) GetSource() *ComputationDataHandle {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *SelectAndScatterRequest) GetInitValue() *ComputationDataHandle {
	if m != nil {
		return m.InitValue
	}
	return nil
}

func (m *SelectAndScatterRequest) GetWindow() *Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *SelectAndScatterRequest) GetSelect() *ComputationHandle {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *SelectAndScatterRequest) GetScatter() *ComputationHandle {
	if m != nil {
		return m.Scatter
	}
	return nil
}

type ReverseRequest struct {
	Operand    *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	Dimensions []int64                `protobuf:"varint,3,rep,packed,name=dimensions" json:"dimensions,omitempty"`
}

func (m *ReverseRequest) Reset()                    { *m = ReverseRequest{} }
func (m *ReverseRequest) String() string            { return proto.CompactTextString(m) }
func (*ReverseRequest) ProtoMessage()               {}
func (*ReverseRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *ReverseRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ReverseRequest) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type BroadcastRequest struct {
	Operand        *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	BroadcastSizes []int64                `protobuf:"varint,3,rep,packed,name=broadcast_sizes,json=broadcastSizes" json:"broadcast_sizes,omitempty"`
}

func (m *BroadcastRequest) Reset()                    { *m = BroadcastRequest{} }
func (m *BroadcastRequest) String() string            { return proto.CompactTextString(m) }
func (*BroadcastRequest) ProtoMessage()               {}
func (*BroadcastRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *BroadcastRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *BroadcastRequest) GetBroadcastSizes() []int64 {
	if m != nil {
		return m.BroadcastSizes
	}
	return nil
}

type PadRequest struct {
	Operand       *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	PaddingValue  *ComputationDataHandle `protobuf:"bytes,3,opt,name=padding_value,json=paddingValue" json:"padding_value,omitempty"`
	PaddingConfig *PaddingConfig         `protobuf:"bytes,4,opt,name=padding_config,json=paddingConfig" json:"padding_config,omitempty"`
}

func (m *PadRequest) Reset()                    { *m = PadRequest{} }
func (m *PadRequest) String() string            { return proto.CompactTextString(m) }
func (*PadRequest) ProtoMessage()               {}
func (*PadRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *PadRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *PadRequest) GetPaddingValue() *ComputationDataHandle {
	if m != nil {
		return m.PaddingValue
	}
	return nil
}

func (m *PadRequest) GetPaddingConfig() *PaddingConfig {
	if m != nil {
		return m.PaddingConfig
	}
	return nil
}

type ReshapeRequest struct {
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// The dimension order for collapse (from fastest-changing to slowest).
	Dimensions []int64 `protobuf:"varint,3,rep,packed,name=dimensions" json:"dimensions,omitempty"`
	// The new dimension sizes (from dimension 0 to n-1).
	NewSizes []int64 `protobuf:"varint,4,rep,packed,name=new_sizes,json=newSizes" json:"new_sizes,omitempty"`
}

func (m *ReshapeRequest) Reset()                    { *m = ReshapeRequest{} }
func (m *ReshapeRequest) String() string            { return proto.CompactTextString(m) }
func (*ReshapeRequest) ProtoMessage()               {}
func (*ReshapeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{37} }

func (m *ReshapeRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ReshapeRequest) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *ReshapeRequest) GetNewSizes() []int64 {
	if m != nil {
		return m.NewSizes
	}
	return nil
}

type TransposeRequest struct {
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// The permutation of the operand's dimensions (in the range 0 to n-1).
	Dimensions []int64 `protobuf:"varint,3,rep,packed,name=dimensions" json:"dimensions,omitempty"`
}

func (m *TransposeRequest) Reset()                    { *m = TransposeRequest{} }
func (m *TransposeRequest) String() string            { return proto.CompactTextString(m) }
func (*TransposeRequest) ProtoMessage()               {}
func (*TransposeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{38} }

func (m *TransposeRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *TransposeRequest) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type ParameterRequest struct {
	Shape     *Shape `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	Parameter int64  `protobuf:"varint,3,opt,name=parameter" json:"parameter,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *ParameterRequest) Reset()                    { *m = ParameterRequest{} }
func (m *ParameterRequest) String() string            { return proto.CompactTextString(m) }
func (*ParameterRequest) ProtoMessage()               {}
func (*ParameterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{39} }

func (m *ParameterRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *ParameterRequest) GetParameter() int64 {
	if m != nil {
		return m.Parameter
	}
	return 0
}

func (m *ParameterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetLocalShapeRequest struct {
	Computation *ComputationHandle     `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Operand     *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
}

func (m *GetLocalShapeRequest) Reset()                    { *m = GetLocalShapeRequest{} }
func (m *GetLocalShapeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLocalShapeRequest) ProtoMessage()               {}
func (*GetLocalShapeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{40} }

func (m *GetLocalShapeRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *GetLocalShapeRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type GetLocalShapeResponse struct {
	Shape *Shape `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
}

func (m *GetLocalShapeResponse) Reset()                    { *m = GetLocalShapeResponse{} }
func (m *GetLocalShapeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLocalShapeResponse) ProtoMessage()               {}
func (*GetLocalShapeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{41} }

func (m *GetLocalShapeResponse) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

type TraceRequest struct {
	Tag     string                 `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
	Operand *ComputationDataHandle `protobuf:"bytes,3,opt,name=operand" json:"operand,omitempty"`
}

func (m *TraceRequest) Reset()                    { *m = TraceRequest{} }
func (m *TraceRequest) String() string            { return proto.CompactTextString(m) }
func (*TraceRequest) ProtoMessage()               {}
func (*TraceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{42} }

func (m *TraceRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TraceRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type ConvertRequest struct {
	Operand        *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	NewElementType PrimitiveType          `protobuf:"varint,3,opt,name=new_element_type,json=newElementType,enum=xla.PrimitiveType" json:"new_element_type,omitempty"`
}

func (m *ConvertRequest) Reset()                    { *m = ConvertRequest{} }
func (m *ConvertRequest) String() string            { return proto.CompactTextString(m) }
func (*ConvertRequest) ProtoMessage()               {}
func (*ConvertRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{43} }

func (m *ConvertRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ConvertRequest) GetNewElementType() PrimitiveType {
	if m != nil {
		return m.NewElementType
	}
	return PrimitiveType_PRIMITIVE_TYPE_INVALID
}

type ConcatenateRequest struct {
	Operands []*ComputationDataHandle `protobuf:"bytes,2,rep,name=operands" json:"operands,omitempty"`
	// The dimension in which we concatenate; e.g. if you had dimension arrays of
	// [4, 1] and [5, 1], you'd concatenate in dimension 0 to produce a [9, 1].
	// Attempting to concatenate those in dimension 1 would produce an error, as
	// 4 != 5 (and there is no ragged array support).
	Dimension int64 `protobuf:"varint,3,opt,name=dimension" json:"dimension,omitempty"`
}

func (m *ConcatenateRequest) Reset()                    { *m = ConcatenateRequest{} }
func (m *ConcatenateRequest) String() string            { return proto.CompactTextString(m) }
func (*ConcatenateRequest) ProtoMessage()               {}
func (*ConcatenateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{44} }

func (m *ConcatenateRequest) GetOperands() []*ComputationDataHandle {
	if m != nil {
		return m.Operands
	}
	return nil
}

func (m *ConcatenateRequest) GetDimension() int64 {
	if m != nil {
		return m.Dimension
	}
	return 0
}

type WhileRequest struct {
	Condition *ComputationHandle     `protobuf:"bytes,2,opt,name=condition" json:"condition,omitempty"`
	Body      *ComputationHandle     `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Init      *ComputationDataHandle `protobuf:"bytes,4,opt,name=init" json:"init,omitempty"`
}

func (m *WhileRequest) Reset()                    { *m = WhileRequest{} }
func (m *WhileRequest) String() string            { return proto.CompactTextString(m) }
func (*WhileRequest) ProtoMessage()               {}
func (*WhileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{45} }

func (m *WhileRequest) GetCondition() *ComputationHandle {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *WhileRequest) GetBody() *ComputationHandle {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *WhileRequest) GetInit() *ComputationDataHandle {
	if m != nil {
		return m.Init
	}
	return nil
}

type UnaryOpRequest struct {
	Unop    UnaryOperation         `protobuf:"varint,2,opt,name=unop,enum=xla.UnaryOperation" json:"unop,omitempty"`
	Operand *ComputationDataHandle `protobuf:"bytes,3,opt,name=operand" json:"operand,omitempty"`
}

func (m *UnaryOpRequest) Reset()                    { *m = UnaryOpRequest{} }
func (m *UnaryOpRequest) String() string            { return proto.CompactTextString(m) }
func (*UnaryOpRequest) ProtoMessage()               {}
func (*UnaryOpRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{46} }

func (m *UnaryOpRequest) GetUnop() UnaryOperation {
	if m != nil {
		return m.Unop
	}
	return UnaryOperation_UNOP_INVALID
}

func (m *UnaryOpRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type BinaryOpRequest struct {
	Binop               BinaryOperation        `protobuf:"varint,2,opt,name=binop,enum=xla.BinaryOperation" json:"binop,omitempty"`
	Lhs                 *ComputationDataHandle `protobuf:"bytes,3,opt,name=lhs" json:"lhs,omitempty"`
	Rhs                 *ComputationDataHandle `protobuf:"bytes,4,opt,name=rhs" json:"rhs,omitempty"`
	BroadcastDimensions []int64                `protobuf:"varint,5,rep,packed,name=broadcast_dimensions,json=broadcastDimensions" json:"broadcast_dimensions,omitempty"`
}

func (m *BinaryOpRequest) Reset()                    { *m = BinaryOpRequest{} }
func (m *BinaryOpRequest) String() string            { return proto.CompactTextString(m) }
func (*BinaryOpRequest) ProtoMessage()               {}
func (*BinaryOpRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{47} }

func (m *BinaryOpRequest) GetBinop() BinaryOperation {
	if m != nil {
		return m.Binop
	}
	return BinaryOperation_BINOP_INVALID
}

func (m *BinaryOpRequest) GetLhs() *ComputationDataHandle {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *BinaryOpRequest) GetRhs() *ComputationDataHandle {
	if m != nil {
		return m.Rhs
	}
	return nil
}

func (m *BinaryOpRequest) GetBroadcastDimensions() []int64 {
	if m != nil {
		return m.BroadcastDimensions
	}
	return nil
}

type RngRequest struct {
	Distribution RandomDistribution       `protobuf:"varint,2,opt,name=distribution,enum=xla.RandomDistribution" json:"distribution,omitempty"`
	Parameter    []*ComputationDataHandle `protobuf:"bytes,3,rep,name=parameter" json:"parameter,omitempty"`
	Shape        *Shape                   `protobuf:"bytes,4,opt,name=shape" json:"shape,omitempty"`
}

func (m *RngRequest) Reset()                    { *m = RngRequest{} }
func (m *RngRequest) String() string            { return proto.CompactTextString(m) }
func (*RngRequest) ProtoMessage()               {}
func (*RngRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{48} }

func (m *RngRequest) GetDistribution() RandomDistribution {
	if m != nil {
		return m.Distribution
	}
	return RandomDistribution_RNG_INVALID
}

func (m *RngRequest) GetParameter() []*ComputationDataHandle {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (m *RngRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

type TernaryOpRequest struct {
	Triop TernaryOperation       `protobuf:"varint,2,opt,name=triop,enum=xla.TernaryOperation" json:"triop,omitempty"`
	Lhs   *ComputationDataHandle `protobuf:"bytes,3,opt,name=lhs" json:"lhs,omitempty"`
	Rhs   *ComputationDataHandle `protobuf:"bytes,4,opt,name=rhs" json:"rhs,omitempty"`
	Ehs   *ComputationDataHandle `protobuf:"bytes,5,opt,name=ehs" json:"ehs,omitempty"`
}

func (m *TernaryOpRequest) Reset()                    { *m = TernaryOpRequest{} }
func (m *TernaryOpRequest) String() string            { return proto.CompactTextString(m) }
func (*TernaryOpRequest) ProtoMessage()               {}
func (*TernaryOpRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{49} }

func (m *TernaryOpRequest) GetTriop() TernaryOperation {
	if m != nil {
		return m.Triop
	}
	return TernaryOperation_TRIOP_INVALID
}

func (m *TernaryOpRequest) GetLhs() *ComputationDataHandle {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *TernaryOpRequest) GetRhs() *ComputationDataHandle {
	if m != nil {
		return m.Rhs
	}
	return nil
}

func (m *TernaryOpRequest) GetEhs() *ComputationDataHandle {
	if m != nil {
		return m.Ehs
	}
	return nil
}

type VariadicOpRequest struct {
	Varop    VariadicOperation        `protobuf:"varint,2,opt,name=varop,enum=xla.VariadicOperation" json:"varop,omitempty"`
	Operands []*ComputationDataHandle `protobuf:"bytes,3,rep,name=operands" json:"operands,omitempty"`
}

func (m *VariadicOpRequest) Reset()                    { *m = VariadicOpRequest{} }
func (m *VariadicOpRequest) String() string            { return proto.CompactTextString(m) }
func (*VariadicOpRequest) ProtoMessage()               {}
func (*VariadicOpRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{50} }

func (m *VariadicOpRequest) GetVarop() VariadicOperation {
	if m != nil {
		return m.Varop
	}
	return VariadicOperation_VAROP_INVALID
}

func (m *VariadicOpRequest) GetOperands() []*ComputationDataHandle {
	if m != nil {
		return m.Operands
	}
	return nil
}

type ReducePrecisionRequest struct {
	Operand      *ComputationDataHandle `protobuf:"bytes,1,opt,name=operand" json:"operand,omitempty"`
	ExponentBits int32                  `protobuf:"varint,2,opt,name=exponent_bits,json=exponentBits" json:"exponent_bits,omitempty"`
	MantissaBits int32                  `protobuf:"varint,3,opt,name=mantissa_bits,json=mantissaBits" json:"mantissa_bits,omitempty"`
}

func (m *ReducePrecisionRequest) Reset()                    { *m = ReducePrecisionRequest{} }
func (m *ReducePrecisionRequest) String() string            { return proto.CompactTextString(m) }
func (*ReducePrecisionRequest) ProtoMessage()               {}
func (*ReducePrecisionRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{51} }

func (m *ReducePrecisionRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ReducePrecisionRequest) GetExponentBits() int32 {
	if m != nil {
		return m.ExponentBits
	}
	return 0
}

func (m *ReducePrecisionRequest) GetMantissaBits() int32 {
	if m != nil {
		return m.MantissaBits
	}
	return 0
}

type SendRequest struct {
	Operand       *ComputationDataHandle `protobuf:"bytes,1,opt,name=operand" json:"operand,omitempty"`
	ChannelHandle *ChannelHandle         `protobuf:"bytes,2,opt,name=channel_handle,json=channelHandle" json:"channel_handle,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{52} }

func (m *SendRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *SendRequest) GetChannelHandle() *ChannelHandle {
	if m != nil {
		return m.ChannelHandle
	}
	return nil
}

type RecvRequest struct {
	Shape         *Shape         `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
	ChannelHandle *ChannelHandle `protobuf:"bytes,2,opt,name=channel_handle,json=channelHandle" json:"channel_handle,omitempty"`
}

func (m *RecvRequest) Reset()                    { *m = RecvRequest{} }
func (m *RecvRequest) String() string            { return proto.CompactTextString(m) }
func (*RecvRequest) ProtoMessage()               {}
func (*RecvRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{53} }

func (m *RecvRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *RecvRequest) GetChannelHandle() *ChannelHandle {
	if m != nil {
		return m.ChannelHandle
	}
	return nil
}

type OpRequest struct {
	Computation *ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Metadata    *OpMetadata        `protobuf:"bytes,33,opt,name=metadata" json:"metadata,omitempty"`
	// Types that are valid to be assigned to Op:
	//	*OpRequest_BinaryOpRequest
	//	*OpRequest_BroadcastRequest
	//	*OpRequest_CallRequest
	//	*OpRequest_ConcatenateRequest
	//	*OpRequest_ConstantRequest
	//	*OpRequest_ConvertRequest
	//	*OpRequest_ConvolveRequest
	//	*OpRequest_CrossReplicaSumRequest
	//	*OpRequest_CustomCallRequest
	//	*OpRequest_DynamicSliceRequest
	//	*OpRequest_DynamicUpdateSliceRequest
	//	*OpRequest_GetTupleElementRequest
	//	*OpRequest_InfeedRequest
	//	*OpRequest_MapRequest
	//	*OpRequest_PadRequest
	//	*OpRequest_ParameterRequest
	//	*OpRequest_ReducePrecisionRequest
	//	*OpRequest_ReduceRequest
	//	*OpRequest_ReduceWindowRequest
	//	*OpRequest_ReshapeRequest
	//	*OpRequest_ReverseRequest
	//	*OpRequest_RngRequest
	//	*OpRequest_SelectAndScatterRequest
	//	*OpRequest_SliceRequest
	//	*OpRequest_TernaryOpRequest
	//	*OpRequest_TraceRequest
	//	*OpRequest_TransposeRequest
	//	*OpRequest_UnaryOpRequest
	//	*OpRequest_VariadicOpRequest
	//	*OpRequest_WhileRequest
	//	*OpRequest_SendRequest
	//	*OpRequest_RecvRequest
	//	*OpRequest_OutfeedRequest
	//	*OpRequest_BatchNormTrainingRequest
	Op isOpRequest_Op `protobuf_oneof:"op"`
}

func (m *OpRequest) Reset()                    { *m = OpRequest{} }
func (m *OpRequest) String() string            { return proto.CompactTextString(m) }
func (*OpRequest) ProtoMessage()               {}
func (*OpRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{54} }

type isOpRequest_Op interface {
	isOpRequest_Op()
}

type OpRequest_BinaryOpRequest struct {
	BinaryOpRequest *BinaryOpRequest `protobuf:"bytes,2,opt,name=binary_op_request,json=binaryOpRequest,oneof"`
}
type OpRequest_BroadcastRequest struct {
	BroadcastRequest *BroadcastRequest `protobuf:"bytes,3,opt,name=broadcast_request,json=broadcastRequest,oneof"`
}
type OpRequest_CallRequest struct {
	CallRequest *CallRequest `protobuf:"bytes,4,opt,name=call_request,json=callRequest,oneof"`
}
type OpRequest_ConcatenateRequest struct {
	ConcatenateRequest *ConcatenateRequest `protobuf:"bytes,5,opt,name=concatenate_request,json=concatenateRequest,oneof"`
}
type OpRequest_ConstantRequest struct {
	ConstantRequest *ConstantRequest `protobuf:"bytes,6,opt,name=constant_request,json=constantRequest,oneof"`
}
type OpRequest_ConvertRequest struct {
	ConvertRequest *ConvertRequest `protobuf:"bytes,7,opt,name=convert_request,json=convertRequest,oneof"`
}
type OpRequest_ConvolveRequest struct {
	ConvolveRequest *ConvolveRequest `protobuf:"bytes,8,opt,name=convolve_request,json=convolveRequest,oneof"`
}
type OpRequest_CrossReplicaSumRequest struct {
	CrossReplicaSumRequest *CrossReplicaSumRequest `protobuf:"bytes,9,opt,name=cross_replica_sum_request,json=crossReplicaSumRequest,oneof"`
}
type OpRequest_CustomCallRequest struct {
	CustomCallRequest *CustomCallRequest `protobuf:"bytes,10,opt,name=custom_call_request,json=customCallRequest,oneof"`
}
type OpRequest_DynamicSliceRequest struct {
	DynamicSliceRequest *DynamicSliceRequest `protobuf:"bytes,11,opt,name=dynamic_slice_request,json=dynamicSliceRequest,oneof"`
}
type OpRequest_DynamicUpdateSliceRequest struct {
	DynamicUpdateSliceRequest *DynamicUpdateSliceRequest `protobuf:"bytes,12,opt,name=dynamic_update_slice_request,json=dynamicUpdateSliceRequest,oneof"`
}
type OpRequest_GetTupleElementRequest struct {
	GetTupleElementRequest *GetTupleElementRequest `protobuf:"bytes,13,opt,name=get_tuple_element_request,json=getTupleElementRequest,oneof"`
}
type OpRequest_InfeedRequest struct {
	InfeedRequest *InfeedRequest `protobuf:"bytes,14,opt,name=infeed_request,json=infeedRequest,oneof"`
}
type OpRequest_MapRequest struct {
	MapRequest *MapRequest `protobuf:"bytes,15,opt,name=map_request,json=mapRequest,oneof"`
}
type OpRequest_PadRequest struct {
	PadRequest *PadRequest `protobuf:"bytes,16,opt,name=pad_request,json=padRequest,oneof"`
}
type OpRequest_ParameterRequest struct {
	ParameterRequest *ParameterRequest `protobuf:"bytes,17,opt,name=parameter_request,json=parameterRequest,oneof"`
}
type OpRequest_ReducePrecisionRequest struct {
	ReducePrecisionRequest *ReducePrecisionRequest `protobuf:"bytes,36,opt,name=reduce_precision_request,json=reducePrecisionRequest,oneof"`
}
type OpRequest_ReduceRequest struct {
	ReduceRequest *ReduceRequest `protobuf:"bytes,18,opt,name=reduce_request,json=reduceRequest,oneof"`
}
type OpRequest_ReduceWindowRequest struct {
	ReduceWindowRequest *ReduceWindowRequest `protobuf:"bytes,19,opt,name=reduce_window_request,json=reduceWindowRequest,oneof"`
}
type OpRequest_ReshapeRequest struct {
	ReshapeRequest *ReshapeRequest `protobuf:"bytes,20,opt,name=reshape_request,json=reshapeRequest,oneof"`
}
type OpRequest_ReverseRequest struct {
	ReverseRequest *ReverseRequest `protobuf:"bytes,21,opt,name=reverse_request,json=reverseRequest,oneof"`
}
type OpRequest_RngRequest struct {
	RngRequest *RngRequest `protobuf:"bytes,22,opt,name=rng_request,json=rngRequest,oneof"`
}
type OpRequest_SelectAndScatterRequest struct {
	SelectAndScatterRequest *SelectAndScatterRequest `protobuf:"bytes,23,opt,name=select_and_scatter_request,json=selectAndScatterRequest,oneof"`
}
type OpRequest_SliceRequest struct {
	SliceRequest *SliceRequest `protobuf:"bytes,24,opt,name=slice_request,json=sliceRequest,oneof"`
}
type OpRequest_TernaryOpRequest struct {
	TernaryOpRequest *TernaryOpRequest `protobuf:"bytes,25,opt,name=ternary_op_request,json=ternaryOpRequest,oneof"`
}
type OpRequest_TraceRequest struct {
	TraceRequest *TraceRequest `protobuf:"bytes,26,opt,name=trace_request,json=traceRequest,oneof"`
}
type OpRequest_TransposeRequest struct {
	TransposeRequest *TransposeRequest `protobuf:"bytes,34,opt,name=transpose_request,json=transposeRequest,oneof"`
}
type OpRequest_UnaryOpRequest struct {
	UnaryOpRequest *UnaryOpRequest `protobuf:"bytes,27,opt,name=unary_op_request,json=unaryOpRequest,oneof"`
}
type OpRequest_VariadicOpRequest struct {
	VariadicOpRequest *VariadicOpRequest `protobuf:"bytes,28,opt,name=variadic_op_request,json=variadicOpRequest,oneof"`
}
type OpRequest_WhileRequest struct {
	WhileRequest *WhileRequest `protobuf:"bytes,29,opt,name=while_request,json=whileRequest,oneof"`
}
type OpRequest_SendRequest struct {
	SendRequest *SendRequest `protobuf:"bytes,30,opt,name=send_request,json=sendRequest,oneof"`
}
type OpRequest_RecvRequest struct {
	RecvRequest *RecvRequest `protobuf:"bytes,31,opt,name=recv_request,json=recvRequest,oneof"`
}
type OpRequest_OutfeedRequest struct {
	OutfeedRequest *OutfeedRequest `protobuf:"bytes,32,opt,name=outfeed_request,json=outfeedRequest,oneof"`
}
type OpRequest_BatchNormTrainingRequest struct {
	BatchNormTrainingRequest *BatchNormTrainingRequest `protobuf:"bytes,35,opt,name=batch_norm_training_request,json=batchNormTrainingRequest,oneof"`
}

func (*OpRequest_BinaryOpRequest) isOpRequest_Op()           {}
func (*OpRequest_BroadcastRequest) isOpRequest_Op()          {}
func (*OpRequest_CallRequest) isOpRequest_Op()               {}
func (*OpRequest_ConcatenateRequest) isOpRequest_Op()        {}
func (*OpRequest_ConstantRequest) isOpRequest_Op()           {}
func (*OpRequest_ConvertRequest) isOpRequest_Op()            {}
func (*OpRequest_ConvolveRequest) isOpRequest_Op()           {}
func (*OpRequest_CrossReplicaSumRequest) isOpRequest_Op()    {}
func (*OpRequest_CustomCallRequest) isOpRequest_Op()         {}
func (*OpRequest_DynamicSliceRequest) isOpRequest_Op()       {}
func (*OpRequest_DynamicUpdateSliceRequest) isOpRequest_Op() {}
func (*OpRequest_GetTupleElementRequest) isOpRequest_Op()    {}
func (*OpRequest_InfeedRequest) isOpRequest_Op()             {}
func (*OpRequest_MapRequest) isOpRequest_Op()                {}
func (*OpRequest_PadRequest) isOpRequest_Op()                {}
func (*OpRequest_ParameterRequest) isOpRequest_Op()          {}
func (*OpRequest_ReducePrecisionRequest) isOpRequest_Op()    {}
func (*OpRequest_ReduceRequest) isOpRequest_Op()             {}
func (*OpRequest_ReduceWindowRequest) isOpRequest_Op()       {}
func (*OpRequest_ReshapeRequest) isOpRequest_Op()            {}
func (*OpRequest_ReverseRequest) isOpRequest_Op()            {}
func (*OpRequest_RngRequest) isOpRequest_Op()                {}
func (*OpRequest_SelectAndScatterRequest) isOpRequest_Op()   {}
func (*OpRequest_SliceRequest) isOpRequest_Op()              {}
func (*OpRequest_TernaryOpRequest) isOpRequest_Op()          {}
func (*OpRequest_TraceRequest) isOpRequest_Op()              {}
func (*OpRequest_TransposeRequest) isOpRequest_Op()          {}
func (*OpRequest_UnaryOpRequest) isOpRequest_Op()            {}
func (*OpRequest_VariadicOpRequest) isOpRequest_Op()         {}
func (*OpRequest_WhileRequest) isOpRequest_Op()              {}
func (*OpRequest_SendRequest) isOpRequest_Op()               {}
func (*OpRequest_RecvRequest) isOpRequest_Op()               {}
func (*OpRequest_OutfeedRequest) isOpRequest_Op()            {}
func (*OpRequest_BatchNormTrainingRequest) isOpRequest_Op()  {}

func (m *OpRequest) GetOp() isOpRequest_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *OpRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *OpRequest) GetMetadata() *OpMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *OpRequest) GetBinaryOpRequest() *BinaryOpRequest {
	if x, ok := m.GetOp().(*OpRequest_BinaryOpRequest); ok {
		return x.BinaryOpRequest
	}
	return nil
}

func (m *OpRequest) GetBroadcastRequest() *BroadcastRequest {
	if x, ok := m.GetOp().(*OpRequest_BroadcastRequest); ok {
		return x.BroadcastRequest
	}
	return nil
}

func (m *OpRequest) GetCallRequest() *CallRequest {
	if x, ok := m.GetOp().(*OpRequest_CallRequest); ok {
		return x.CallRequest
	}
	return nil
}

func (m *OpRequest) GetConcatenateRequest() *ConcatenateRequest {
	if x, ok := m.GetOp().(*OpRequest_ConcatenateRequest); ok {
		return x.ConcatenateRequest
	}
	return nil
}

func (m *OpRequest) GetConstantRequest() *ConstantRequest {
	if x, ok := m.GetOp().(*OpRequest_ConstantRequest); ok {
		return x.ConstantRequest
	}
	return nil
}

func (m *OpRequest) GetConvertRequest() *ConvertRequest {
	if x, ok := m.GetOp().(*OpRequest_ConvertRequest); ok {
		return x.ConvertRequest
	}
	return nil
}

func (m *OpRequest) GetConvolveRequest() *ConvolveRequest {
	if x, ok := m.GetOp().(*OpRequest_ConvolveRequest); ok {
		return x.ConvolveRequest
	}
	return nil
}

func (m *OpRequest) GetCrossReplicaSumRequest() *CrossReplicaSumRequest {
	if x, ok := m.GetOp().(*OpRequest_CrossReplicaSumRequest); ok {
		return x.CrossReplicaSumRequest
	}
	return nil
}

func (m *OpRequest) GetCustomCallRequest() *CustomCallRequest {
	if x, ok := m.GetOp().(*OpRequest_CustomCallRequest); ok {
		return x.CustomCallRequest
	}
	return nil
}

func (m *OpRequest) GetDynamicSliceRequest() *DynamicSliceRequest {
	if x, ok := m.GetOp().(*OpRequest_DynamicSliceRequest); ok {
		return x.DynamicSliceRequest
	}
	return nil
}

func (m *OpRequest) GetDynamicUpdateSliceRequest() *DynamicUpdateSliceRequest {
	if x, ok := m.GetOp().(*OpRequest_DynamicUpdateSliceRequest); ok {
		return x.DynamicUpdateSliceRequest
	}
	return nil
}

func (m *OpRequest) GetGetTupleElementRequest() *GetTupleElementRequest {
	if x, ok := m.GetOp().(*OpRequest_GetTupleElementRequest); ok {
		return x.GetTupleElementRequest
	}
	return nil
}

func (m *OpRequest) GetInfeedRequest() *InfeedRequest {
	if x, ok := m.GetOp().(*OpRequest_InfeedRequest); ok {
		return x.InfeedRequest
	}
	return nil
}

func (m *OpRequest) GetMapRequest() *MapRequest {
	if x, ok := m.GetOp().(*OpRequest_MapRequest); ok {
		return x.MapRequest
	}
	return nil
}

func (m *OpRequest) GetPadRequest() *PadRequest {
	if x, ok := m.GetOp().(*OpRequest_PadRequest); ok {
		return x.PadRequest
	}
	return nil
}

func (m *OpRequest) GetParameterRequest() *ParameterRequest {
	if x, ok := m.GetOp().(*OpRequest_ParameterRequest); ok {
		return x.ParameterRequest
	}
	return nil
}

func (m *OpRequest) GetReducePrecisionRequest() *ReducePrecisionRequest {
	if x, ok := m.GetOp().(*OpRequest_ReducePrecisionRequest); ok {
		return x.ReducePrecisionRequest
	}
	return nil
}

func (m *OpRequest) GetReduceRequest() *ReduceRequest {
	if x, ok := m.GetOp().(*OpRequest_ReduceRequest); ok {
		return x.ReduceRequest
	}
	return nil
}

func (m *OpRequest) GetReduceWindowRequest() *ReduceWindowRequest {
	if x, ok := m.GetOp().(*OpRequest_ReduceWindowRequest); ok {
		return x.ReduceWindowRequest
	}
	return nil
}

func (m *OpRequest) GetReshapeRequest() *ReshapeRequest {
	if x, ok := m.GetOp().(*OpRequest_ReshapeRequest); ok {
		return x.ReshapeRequest
	}
	return nil
}

func (m *OpRequest) GetReverseRequest() *ReverseRequest {
	if x, ok := m.GetOp().(*OpRequest_ReverseRequest); ok {
		return x.ReverseRequest
	}
	return nil
}

func (m *OpRequest) GetRngRequest() *RngRequest {
	if x, ok := m.GetOp().(*OpRequest_RngRequest); ok {
		return x.RngRequest
	}
	return nil
}

func (m *OpRequest) GetSelectAndScatterRequest() *SelectAndScatterRequest {
	if x, ok := m.GetOp().(*OpRequest_SelectAndScatterRequest); ok {
		return x.SelectAndScatterRequest
	}
	return nil
}

func (m *OpRequest) GetSliceRequest() *SliceRequest {
	if x, ok := m.GetOp().(*OpRequest_SliceRequest); ok {
		return x.SliceRequest
	}
	return nil
}

func (m *OpRequest) GetTernaryOpRequest() *TernaryOpRequest {
	if x, ok := m.GetOp().(*OpRequest_TernaryOpRequest); ok {
		return x.TernaryOpRequest
	}
	return nil
}

func (m *OpRequest) GetTraceRequest() *TraceRequest {
	if x, ok := m.GetOp().(*OpRequest_TraceRequest); ok {
		return x.TraceRequest
	}
	return nil
}

func (m *OpRequest) GetTransposeRequest() *TransposeRequest {
	if x, ok := m.GetOp().(*OpRequest_TransposeRequest); ok {
		return x.TransposeRequest
	}
	return nil
}

func (m *OpRequest) GetUnaryOpRequest() *UnaryOpRequest {
	if x, ok := m.GetOp().(*OpRequest_UnaryOpRequest); ok {
		return x.UnaryOpRequest
	}
	return nil
}

func (m *OpRequest) GetVariadicOpRequest() *VariadicOpRequest {
	if x, ok := m.GetOp().(*OpRequest_VariadicOpRequest); ok {
		return x.VariadicOpRequest
	}
	return nil
}

func (m *OpRequest) GetWhileRequest() *WhileRequest {
	if x, ok := m.GetOp().(*OpRequest_WhileRequest); ok {
		return x.WhileRequest
	}
	return nil
}

func (m *OpRequest) GetSendRequest() *SendRequest {
	if x, ok := m.GetOp().(*OpRequest_SendRequest); ok {
		return x.SendRequest
	}
	return nil
}

func (m *OpRequest) GetRecvRequest() *RecvRequest {
	if x, ok := m.GetOp().(*OpRequest_RecvRequest); ok {
		return x.RecvRequest
	}
	return nil
}

func (m *OpRequest) GetOutfeedRequest() *OutfeedRequest {
	if x, ok := m.GetOp().(*OpRequest_OutfeedRequest); ok {
		return x.OutfeedRequest
	}
	return nil
}

func (m *OpRequest) GetBatchNormTrainingRequest() *BatchNormTrainingRequest {
	if x, ok := m.GetOp().(*OpRequest_BatchNormTrainingRequest); ok {
		return x.BatchNormTrainingRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OpRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OpRequest_OneofMarshaler, _OpRequest_OneofUnmarshaler, _OpRequest_OneofSizer, []interface{}{
		(*OpRequest_BinaryOpRequest)(nil),
		(*OpRequest_BroadcastRequest)(nil),
		(*OpRequest_CallRequest)(nil),
		(*OpRequest_ConcatenateRequest)(nil),
		(*OpRequest_ConstantRequest)(nil),
		(*OpRequest_ConvertRequest)(nil),
		(*OpRequest_ConvolveRequest)(nil),
		(*OpRequest_CrossReplicaSumRequest)(nil),
		(*OpRequest_CustomCallRequest)(nil),
		(*OpRequest_DynamicSliceRequest)(nil),
		(*OpRequest_DynamicUpdateSliceRequest)(nil),
		(*OpRequest_GetTupleElementRequest)(nil),
		(*OpRequest_InfeedRequest)(nil),
		(*OpRequest_MapRequest)(nil),
		(*OpRequest_PadRequest)(nil),
		(*OpRequest_ParameterRequest)(nil),
		(*OpRequest_ReducePrecisionRequest)(nil),
		(*OpRequest_ReduceRequest)(nil),
		(*OpRequest_ReduceWindowRequest)(nil),
		(*OpRequest_ReshapeRequest)(nil),
		(*OpRequest_ReverseRequest)(nil),
		(*OpRequest_RngRequest)(nil),
		(*OpRequest_SelectAndScatterRequest)(nil),
		(*OpRequest_SliceRequest)(nil),
		(*OpRequest_TernaryOpRequest)(nil),
		(*OpRequest_TraceRequest)(nil),
		(*OpRequest_TransposeRequest)(nil),
		(*OpRequest_UnaryOpRequest)(nil),
		(*OpRequest_VariadicOpRequest)(nil),
		(*OpRequest_WhileRequest)(nil),
		(*OpRequest_SendRequest)(nil),
		(*OpRequest_RecvRequest)(nil),
		(*OpRequest_OutfeedRequest)(nil),
		(*OpRequest_BatchNormTrainingRequest)(nil),
	}
}

func _OpRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OpRequest)
	// op
	switch x := m.Op.(type) {
	case *OpRequest_BinaryOpRequest:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BinaryOpRequest); err != nil {
			return err
		}
	case *OpRequest_BroadcastRequest:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BroadcastRequest); err != nil {
			return err
		}
	case *OpRequest_CallRequest:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallRequest); err != nil {
			return err
		}
	case *OpRequest_ConcatenateRequest:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConcatenateRequest); err != nil {
			return err
		}
	case *OpRequest_ConstantRequest:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConstantRequest); err != nil {
			return err
		}
	case *OpRequest_ConvertRequest:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConvertRequest); err != nil {
			return err
		}
	case *OpRequest_ConvolveRequest:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConvolveRequest); err != nil {
			return err
		}
	case *OpRequest_CrossReplicaSumRequest:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CrossReplicaSumRequest); err != nil {
			return err
		}
	case *OpRequest_CustomCallRequest:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomCallRequest); err != nil {
			return err
		}
	case *OpRequest_DynamicSliceRequest:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DynamicSliceRequest); err != nil {
			return err
		}
	case *OpRequest_DynamicUpdateSliceRequest:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DynamicUpdateSliceRequest); err != nil {
			return err
		}
	case *OpRequest_GetTupleElementRequest:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetTupleElementRequest); err != nil {
			return err
		}
	case *OpRequest_InfeedRequest:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InfeedRequest); err != nil {
			return err
		}
	case *OpRequest_MapRequest:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MapRequest); err != nil {
			return err
		}
	case *OpRequest_PadRequest:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PadRequest); err != nil {
			return err
		}
	case *OpRequest_ParameterRequest:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ParameterRequest); err != nil {
			return err
		}
	case *OpRequest_ReducePrecisionRequest:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReducePrecisionRequest); err != nil {
			return err
		}
	case *OpRequest_ReduceRequest:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReduceRequest); err != nil {
			return err
		}
	case *OpRequest_ReduceWindowRequest:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReduceWindowRequest); err != nil {
			return err
		}
	case *OpRequest_ReshapeRequest:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReshapeRequest); err != nil {
			return err
		}
	case *OpRequest_ReverseRequest:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReverseRequest); err != nil {
			return err
		}
	case *OpRequest_RngRequest:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RngRequest); err != nil {
			return err
		}
	case *OpRequest_SelectAndScatterRequest:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectAndScatterRequest); err != nil {
			return err
		}
	case *OpRequest_SliceRequest:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliceRequest); err != nil {
			return err
		}
	case *OpRequest_TernaryOpRequest:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TernaryOpRequest); err != nil {
			return err
		}
	case *OpRequest_TraceRequest:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TraceRequest); err != nil {
			return err
		}
	case *OpRequest_TransposeRequest:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransposeRequest); err != nil {
			return err
		}
	case *OpRequest_UnaryOpRequest:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnaryOpRequest); err != nil {
			return err
		}
	case *OpRequest_VariadicOpRequest:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VariadicOpRequest); err != nil {
			return err
		}
	case *OpRequest_WhileRequest:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WhileRequest); err != nil {
			return err
		}
	case *OpRequest_SendRequest:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendRequest); err != nil {
			return err
		}
	case *OpRequest_RecvRequest:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RecvRequest); err != nil {
			return err
		}
	case *OpRequest_OutfeedRequest:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutfeedRequest); err != nil {
			return err
		}
	case *OpRequest_BatchNormTrainingRequest:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchNormTrainingRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OpRequest.Op has unexpected type %T", x)
	}
	return nil
}

func _OpRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OpRequest)
	switch tag {
	case 2: // op.binary_op_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BinaryOpRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_BinaryOpRequest{msg}
		return true, err
	case 3: // op.broadcast_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BroadcastRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_BroadcastRequest{msg}
		return true, err
	case 4: // op.call_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CallRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_CallRequest{msg}
		return true, err
	case 5: // op.concatenate_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConcatenateRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ConcatenateRequest{msg}
		return true, err
	case 6: // op.constant_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConstantRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ConstantRequest{msg}
		return true, err
	case 7: // op.convert_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConvertRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ConvertRequest{msg}
		return true, err
	case 8: // op.convolve_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConvolveRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ConvolveRequest{msg}
		return true, err
	case 9: // op.cross_replica_sum_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CrossReplicaSumRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_CrossReplicaSumRequest{msg}
		return true, err
	case 10: // op.custom_call_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomCallRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_CustomCallRequest{msg}
		return true, err
	case 11: // op.dynamic_slice_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DynamicSliceRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_DynamicSliceRequest{msg}
		return true, err
	case 12: // op.dynamic_update_slice_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DynamicUpdateSliceRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_DynamicUpdateSliceRequest{msg}
		return true, err
	case 13: // op.get_tuple_element_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetTupleElementRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_GetTupleElementRequest{msg}
		return true, err
	case 14: // op.infeed_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InfeedRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_InfeedRequest{msg}
		return true, err
	case 15: // op.map_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MapRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_MapRequest{msg}
		return true, err
	case 16: // op.pad_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PadRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_PadRequest{msg}
		return true, err
	case 17: // op.parameter_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParameterRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ParameterRequest{msg}
		return true, err
	case 36: // op.reduce_precision_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReducePrecisionRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ReducePrecisionRequest{msg}
		return true, err
	case 18: // op.reduce_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReduceRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ReduceRequest{msg}
		return true, err
	case 19: // op.reduce_window_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReduceWindowRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ReduceWindowRequest{msg}
		return true, err
	case 20: // op.reshape_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReshapeRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ReshapeRequest{msg}
		return true, err
	case 21: // op.reverse_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReverseRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ReverseRequest{msg}
		return true, err
	case 22: // op.rng_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RngRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_RngRequest{msg}
		return true, err
	case 23: // op.select_and_scatter_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectAndScatterRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_SelectAndScatterRequest{msg}
		return true, err
	case 24: // op.slice_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SliceRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_SliceRequest{msg}
		return true, err
	case 25: // op.ternary_op_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TernaryOpRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_TernaryOpRequest{msg}
		return true, err
	case 26: // op.trace_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TraceRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_TraceRequest{msg}
		return true, err
	case 34: // op.transpose_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransposeRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_TransposeRequest{msg}
		return true, err
	case 27: // op.unary_op_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnaryOpRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_UnaryOpRequest{msg}
		return true, err
	case 28: // op.variadic_op_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VariadicOpRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_VariadicOpRequest{msg}
		return true, err
	case 29: // op.while_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhileRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_WhileRequest{msg}
		return true, err
	case 30: // op.send_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SendRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_SendRequest{msg}
		return true, err
	case 31: // op.recv_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RecvRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_RecvRequest{msg}
		return true, err
	case 32: // op.outfeed_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OutfeedRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_OutfeedRequest{msg}
		return true, err
	case 35: // op.batch_norm_training_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchNormTrainingRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_BatchNormTrainingRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OpRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OpRequest)
	// op
	switch x := m.Op.(type) {
	case *OpRequest_BinaryOpRequest:
		s := proto.Size(x.BinaryOpRequest)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_BroadcastRequest:
		s := proto.Size(x.BroadcastRequest)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_CallRequest:
		s := proto.Size(x.CallRequest)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ConcatenateRequest:
		s := proto.Size(x.ConcatenateRequest)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ConstantRequest:
		s := proto.Size(x.ConstantRequest)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ConvertRequest:
		s := proto.Size(x.ConvertRequest)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ConvolveRequest:
		s := proto.Size(x.ConvolveRequest)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_CrossReplicaSumRequest:
		s := proto.Size(x.CrossReplicaSumRequest)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_CustomCallRequest:
		s := proto.Size(x.CustomCallRequest)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_DynamicSliceRequest:
		s := proto.Size(x.DynamicSliceRequest)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_DynamicUpdateSliceRequest:
		s := proto.Size(x.DynamicUpdateSliceRequest)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_GetTupleElementRequest:
		s := proto.Size(x.GetTupleElementRequest)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_InfeedRequest:
		s := proto.Size(x.InfeedRequest)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_MapRequest:
		s := proto.Size(x.MapRequest)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_PadRequest:
		s := proto.Size(x.PadRequest)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ParameterRequest:
		s := proto.Size(x.ParameterRequest)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ReducePrecisionRequest:
		s := proto.Size(x.ReducePrecisionRequest)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ReduceRequest:
		s := proto.Size(x.ReduceRequest)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ReduceWindowRequest:
		s := proto.Size(x.ReduceWindowRequest)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ReshapeRequest:
		s := proto.Size(x.ReshapeRequest)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ReverseRequest:
		s := proto.Size(x.ReverseRequest)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_RngRequest:
		s := proto.Size(x.RngRequest)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_SelectAndScatterRequest:
		s := proto.Size(x.SelectAndScatterRequest)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_SliceRequest:
		s := proto.Size(x.SliceRequest)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_TernaryOpRequest:
		s := proto.Size(x.TernaryOpRequest)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_TraceRequest:
		s := proto.Size(x.TraceRequest)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_TransposeRequest:
		s := proto.Size(x.TransposeRequest)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_UnaryOpRequest:
		s := proto.Size(x.UnaryOpRequest)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_VariadicOpRequest:
		s := proto.Size(x.VariadicOpRequest)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_WhileRequest:
		s := proto.Size(x.WhileRequest)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_SendRequest:
		s := proto.Size(x.SendRequest)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_RecvRequest:
		s := proto.Size(x.RecvRequest)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_OutfeedRequest:
		s := proto.Size(x.OutfeedRequest)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_BatchNormTrainingRequest:
		s := proto.Size(x.BatchNormTrainingRequest)
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OpResponse struct {
	Output *ComputationDataHandle `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *OpResponse) Reset()                    { *m = OpResponse{} }
func (m *OpResponse) String() string            { return proto.CompactTextString(m) }
func (*OpResponse) ProtoMessage()               {}
func (*OpResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{55} }

func (m *OpResponse) GetOutput() *ComputationDataHandle {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*PaddingConfig)(nil), "xla.PaddingConfig")
	proto.RegisterType((*PaddingConfig_PaddingConfigDimension)(nil), "xla.PaddingConfig.PaddingConfigDimension")
	proto.RegisterType((*Layout)(nil), "xla.Layout")
	proto.RegisterType((*Shape)(nil), "xla.Shape")
	proto.RegisterType((*ProgramShape)(nil), "xla.ProgramShape")
	proto.RegisterType((*ComputationStats)(nil), "xla.ComputationStats")
	proto.RegisterType((*OpMetadata)(nil), "xla.OpMetadata")
	proto.RegisterType((*ExecutionProfile)(nil), "xla.ExecutionProfile")
	proto.RegisterType((*ComputationHandle)(nil), "xla.ComputationHandle")
	proto.RegisterType((*ExecutionHandle)(nil), "xla.ExecutionHandle")
	proto.RegisterType((*GlobalDataHandle)(nil), "xla.GlobalDataHandle")
	proto.RegisterType((*ComputationDataHandle)(nil), "xla.ComputationDataHandle")
	proto.RegisterType((*DeviceHandle)(nil), "xla.DeviceHandle")
	proto.RegisterType((*ChannelHandle)(nil), "xla.ChannelHandle")
	proto.RegisterType((*DeviceAssignmentProto)(nil), "xla.DeviceAssignmentProto")
	proto.RegisterType((*DeviceAssignmentProto_ComputationDevice)(nil), "xla.DeviceAssignmentProto.ComputationDevice")
	proto.RegisterType((*LiteralProto)(nil), "xla.LiteralProto")
	proto.RegisterType((*WindowDimension)(nil), "xla.WindowDimension")
	proto.RegisterType((*Window)(nil), "xla.Window")
	proto.RegisterType((*ConstantRequest)(nil), "xla.ConstantRequest")
	proto.RegisterType((*GetTupleElementRequest)(nil), "xla.GetTupleElementRequest")
	proto.RegisterType((*SliceRequest)(nil), "xla.SliceRequest")
	proto.RegisterType((*DynamicSliceRequest)(nil), "xla.DynamicSliceRequest")
	proto.RegisterType((*DynamicUpdateSliceRequest)(nil), "xla.DynamicUpdateSliceRequest")
	proto.RegisterType((*ConvolutionDimensionNumbers)(nil), "xla.ConvolutionDimensionNumbers")
	proto.RegisterType((*ConvolveRequest)(nil), "xla.ConvolveRequest")
	proto.RegisterType((*InfeedRequest)(nil), "xla.InfeedRequest")
	proto.RegisterType((*OutfeedRequest)(nil), "xla.OutfeedRequest")
	proto.RegisterType((*CallRequest)(nil), "xla.CallRequest")
	proto.RegisterType((*CustomCallRequest)(nil), "xla.CustomCallRequest")
	proto.RegisterType((*MapRequest)(nil), "xla.MapRequest")
	proto.RegisterType((*ReduceRequest)(nil), "xla.ReduceRequest")
	proto.RegisterType((*ReduceWindowRequest)(nil), "xla.ReduceWindowRequest")
	proto.RegisterType((*BatchNormTrainingRequest)(nil), "xla.BatchNormTrainingRequest")
	proto.RegisterType((*CrossReplicaSumRequest)(nil), "xla.CrossReplicaSumRequest")
	proto.RegisterType((*SelectAndScatterRequest)(nil), "xla.SelectAndScatterRequest")
	proto.RegisterType((*ReverseRequest)(nil), "xla.ReverseRequest")
	proto.RegisterType((*BroadcastRequest)(nil), "xla.BroadcastRequest")
	proto.RegisterType((*PadRequest)(nil), "xla.PadRequest")
	proto.RegisterType((*ReshapeRequest)(nil), "xla.ReshapeRequest")
	proto.RegisterType((*TransposeRequest)(nil), "xla.TransposeRequest")
	proto.RegisterType((*ParameterRequest)(nil), "xla.ParameterRequest")
	proto.RegisterType((*GetLocalShapeRequest)(nil), "xla.GetLocalShapeRequest")
	proto.RegisterType((*GetLocalShapeResponse)(nil), "xla.GetLocalShapeResponse")
	proto.RegisterType((*TraceRequest)(nil), "xla.TraceRequest")
	proto.RegisterType((*ConvertRequest)(nil), "xla.ConvertRequest")
	proto.RegisterType((*ConcatenateRequest)(nil), "xla.ConcatenateRequest")
	proto.RegisterType((*WhileRequest)(nil), "xla.WhileRequest")
	proto.RegisterType((*UnaryOpRequest)(nil), "xla.UnaryOpRequest")
	proto.RegisterType((*BinaryOpRequest)(nil), "xla.BinaryOpRequest")
	proto.RegisterType((*RngRequest)(nil), "xla.RngRequest")
	proto.RegisterType((*TernaryOpRequest)(nil), "xla.TernaryOpRequest")
	proto.RegisterType((*VariadicOpRequest)(nil), "xla.VariadicOpRequest")
	proto.RegisterType((*ReducePrecisionRequest)(nil), "xla.ReducePrecisionRequest")
	proto.RegisterType((*SendRequest)(nil), "xla.SendRequest")
	proto.RegisterType((*RecvRequest)(nil), "xla.RecvRequest")
	proto.RegisterType((*OpRequest)(nil), "xla.OpRequest")
	proto.RegisterType((*OpResponse)(nil), "xla.OpResponse")
	proto.RegisterEnum("xla.PrimitiveType", PrimitiveType_name, PrimitiveType_value)
	proto.RegisterEnum("xla.PaddingValue", PaddingValue_name, PaddingValue_value)
	proto.RegisterEnum("xla.UnaryOperation", UnaryOperation_name, UnaryOperation_value)
	proto.RegisterEnum("xla.BinaryOperation", BinaryOperation_name, BinaryOperation_value)
	proto.RegisterEnum("xla.RandomDistribution", RandomDistribution_name, RandomDistribution_value)
	proto.RegisterEnum("xla.TernaryOperation", TernaryOperation_name, TernaryOperation_value)
	proto.RegisterEnum("xla.VariadicOperation", VariadicOperation_name, VariadicOperation_value)
}

func init() { proto.RegisterFile("tensorflow/compiler/xla/xla_data.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 3845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x4d, 0x6c, 0xe3, 0x48,
	0x76, 0x36, 0xf5, 0x67, 0xeb, 0xe9, 0xaf, 0x44, 0xb7, 0xdd, 0xea, 0x9f, 0x99, 0xf1, 0xb0, 0x37,
	0xdb, 0x1e, 0xf7, 0x4c, 0xf7, 0xb6, 0xbb, 0xc7, 0xf1, 0x64, 0x82, 0xde, 0xc8, 0xb2, 0xda, 0xd2,
	0x46, 0x96, 0xb4, 0x94, 0xdc, 0xdd, 0x3b, 0x41, 0x42, 0xd0, 0x64, 0xd9, 0xe6, 0x0c, 0x45, 0x72,
	0x49, 0xca, 0x6e, 0xe7, 0x10, 0x04, 0x48, 0xb0, 0x39, 0xe4, 0x90, 0x43, 0x0e, 0x49, 0x2e, 0x41,
	0x2e, 0xc9, 0x6d, 0x2f, 0x39, 0x27, 0x7b, 0x4b, 0x80, 0x00, 0x01, 0x72, 0xc8, 0x3d, 0xc0, 0x5e,
	0x73, 0x4f, 0x90, 0x63, 0x50, 0x3f, 0x24, 0x8b, 0xb2, 0xdc, 0xf6, 0xb4, 0x77, 0xb0, 0x07, 0x01,
	0xac, 0x57, 0x5f, 0xbd, 0x7a, 0xef, 0xd5, 0xab, 0xaa, 0xf7, 0x5e, 0x09, 0xbe, 0x1f, 0x62, 0x27,
	0x70, 0xfd, 0x23, 0xdb, 0x3d, 0x7b, 0x62, 0xb8, 0x13, 0xcf, 0xb2, 0xb1, 0xff, 0xe4, 0xad, 0xad,
	0x93, 0x9f, 0x66, 0xea, 0xa1, 0xfe, 0xd8, 0xf3, 0xdd, 0xd0, 0x95, 0xb3, 0x6f, 0x6d, 0x5d, 0xf9,
	0x5f, 0x09, 0x2a, 0x43, 0xdd, 0x34, 0x2d, 0xe7, 0xb8, 0xe5, 0x3a, 0x47, 0xd6, 0xb1, 0xdc, 0x05,
	0x30, 0xad, 0x09, 0x76, 0x02, 0xcb, 0x75, 0x82, 0x86, 0xb4, 0x96, 0x5d, 0x2f, 0x6d, 0x7e, 0xf2,
	0xf8, 0xad, 0xad, 0x3f, 0x4e, 0xe1, 0xd2, 0xad, 0xdd, 0x68, 0x84, 0x2a, 0x0c, 0xbe, 0xfb, 0x37,
	0x12, 0xac, 0xce, 0x87, 0xc9, 0xeb, 0x80, 0xb0, 0x79, 0x8c, 0x35, 0x8f, 0x75, 0x6b, 0xb6, 0x7b,
	0xd6, 0x90, 0xd6, 0xa4, 0xf5, 0xac, 0x5a, 0x25, 0x74, 0x3e, 0xaa, 0xe7, 0x9e, 0xc9, 0x1b, 0x50,
	0x4f, 0x21, 0x4f, 0xac, 0xe3, 0x93, 0x46, 0x86, 0x42, 0x6b, 0x02, 0xb4, 0x63, 0x1d, 0x9f, 0xc8,
	0x9f, 0x00, 0xb2, 0x9c, 0x10, 0xfb, 0x96, 0xeb, 0x47, 0xf8, 0x46, 0x96, 0x41, 0x23, 0x3a, 0x87,
	0x2b, 0x7f, 0x29, 0x41, 0xa1, 0xa7, 0x9f, 0xbb, 0xd3, 0x50, 0xfe, 0x1e, 0x54, 0x27, 0x96, 0xe3,
	0xfa, 0x5a, 0xe8, 0x6a, 0x13, 0xfd, 0x6b, 0xd7, 0xa7, 0x5a, 0x67, 0xd5, 0x32, 0xa5, 0x8e, 0xdd,
	0x7d, 0x42, 0x93, 0x1f, 0x41, 0x9d, 0xb0, 0xc4, 0xa6, 0x26, 0x98, 0x27, 0x43, 0x81, 0x88, 0x75,
	0xc4, 0xda, 0x05, 0xf2, 0x16, 0x54, 0x22, 0x79, 0x4f, 0x75, 0x7b, 0x8a, 0xa9, 0x14, 0xd5, 0xcd,
	0xba, 0x68, 0xc7, 0x57, 0xa4, 0x43, 0x2d, 0x7b, 0x42, 0x4b, 0xf9, 0x85, 0x04, 0xf9, 0xd1, 0x89,
	0xee, 0x61, 0xf9, 0x73, 0x28, 0x63, 0x1b, 0x4f, 0xb0, 0x13, 0x6a, 0xe1, 0xb9, 0x87, 0xa9, 0xc6,
	0xd5, 0x4d, 0x99, 0x31, 0xf0, 0xad, 0x89, 0x15, 0x5a, 0xa7, 0x78, 0x7c, 0xee, 0x61, 0xb5, 0xc4,
	0x71, 0xa4, 0x21, 0x7f, 0x98, 0x5a, 0xbd, 0x2c, 0x15, 0x4f, 0xa0, 0xc8, 0x9f, 0x41, 0x39, 0x9c,
	0x7a, 0x36, 0xd6, 0x02, 0x32, 0x4b, 0xd0, 0xc8, 0xd1, 0xf5, 0x05, 0xca, 0x96, 0x4e, 0xac, 0x96,
	0x68, 0x3f, 0xfd, 0x0e, 0xe4, 0x07, 0x50, 0xb0, 0xa9, 0x91, 0x1a, 0xf9, 0x35, 0x69, 0xbd, 0xb4,
	0x59, 0xa2, 0x40, 0x66, 0x37, 0x95, 0x77, 0xfd, 0x28, 0xb7, 0x24, 0xa1, 0x8c, 0x9a, 0xf3, 0x75,
	0xe7, 0x1b, 0xe5, 0xcf, 0x24, 0x28, 0x0f, 0x7d, 0xf7, 0xd8, 0xd7, 0x27, 0x4c, 0x8f, 0x0d, 0x00,
	0x4f, 0xf7, 0xf5, 0x09, 0x0e, 0xb1, 0x1f, 0xb9, 0x93, 0x38, 0x9d, 0xd0, 0x2b, 0x2b, 0x50, 0xf0,
	0x71, 0x30, 0xb5, 0x43, 0xaa, 0x6d, 0x1a, 0xc7, 0x7b, 0xe4, 0x87, 0x50, 0x8b, 0x47, 0x68, 0x8e,
	0x3e, 0xc1, 0x4c, 0xcb, 0xa2, 0x5a, 0x8d, 0xc9, 0x7d, 0x42, 0x55, 0x4c, 0x40, 0x2d, 0x77, 0xe2,
	0x4d, 0x43, 0x3d, 0xb4, 0x5c, 0x67, 0x14, 0xea, 0x61, 0x20, 0x7f, 0x00, 0x70, 0x64, 0xbb, 0x9e,
	0x66, 0xb8, 0x53, 0x27, 0xa4, 0xfe, 0x26, 0xa9, 0x45, 0x42, 0x69, 0x11, 0x82, 0xfc, 0x14, 0x6e,
	0x85, 0xbe, 0xee, 0x04, 0x06, 0x76, 0x4c, 0xec, 0x84, 0xba, 0xcd, 0x81, 0x19, 0x0a, 0x5c, 0x4e,
	0xf7, 0xd1, 0x21, 0xca, 0x1f, 0x4b, 0x00, 0x03, 0x6f, 0x1f, 0x87, 0x3a, 0xd9, 0x59, 0xf2, 0x6d,
	0x58, 0x74, 0x3d, 0xb6, 0x60, 0x84, 0x7b, 0x51, 0x2d, 0xb8, 0x1e, 0x5d, 0x17, 0xd6, 0x41, 0xe4,
	0xa5, 0xdc, 0x68, 0x07, 0x91, 0x53, 0xfe, 0x08, 0x4a, 0x81, 0x3b, 0xf5, 0x0d, 0xac, 0x1d, 0x59,
	0x36, 0xf3, 0x93, 0xa2, 0x0a, 0x8c, 0xf4, 0xd2, 0xb2, 0x45, 0x80, 0x6d, 0x39, 0xb8, 0x91, 0x5b,
	0x93, 0xd6, 0xf3, 0x11, 0xa0, 0x67, 0x39, 0x58, 0xf9, 0x59, 0x06, 0x50, 0xfb, 0x2d, 0x36, 0xa6,
	0x44, 0xcf, 0xa1, 0xef, 0x12, 0x3e, 0xf2, 0x26, 0xac, 0xb0, 0xbd, 0x4f, 0xb5, 0xd7, 0x0c, 0xdd,
	0x38, 0xc1, 0xda, 0x89, 0xc5, 0x94, 0x5e, 0x52, 0x97, 0x85, 0xce, 0x16, 0xe9, 0xeb, 0x58, 0xa1,
	0xfc, 0x7d, 0xa8, 0xf1, 0xf3, 0x42, 0x0b, 0xad, 0x09, 0xd6, 0x26, 0x01, 0xdf, 0x67, 0x15, 0x4e,
	0x1e, 0x5b, 0x13, 0xbc, 0x1f, 0xc8, 0x8f, 0x81, 0x0e, 0x9f, 0x86, 0x58, 0x33, 0xce, 0x0d, 0x1b,
	0x73, 0x2b, 0xb1, 0x8d, 0x56, 0xe7, 0x5d, 0x2d, 0xd2, 0xc3, 0xcc, 0xca, 0xf9, 0x12, 0x3c, 0xe5,
	0xeb, 0x04, 0x54, 0x0b, 0xce, 0x77, 0x1a, 0x52, 0xbe, 0xfd, 0x40, 0x7e, 0x01, 0xf7, 0x23, 0x9c,
	0xee, 0x98, 0x1a, 0x35, 0xf7, 0x11, 0xf6, 0xe3, 0x41, 0x79, 0x3a, 0xa8, 0xc1, 0x31, 0x4d, 0xc7,
	0x1c, 0x73, 0x04, 0x1b, 0xaf, 0x3c, 0x82, 0xba, 0xb0, 0xe2, 0x1d, 0xdd, 0x31, 0x6d, 0x2c, 0xaf,
	0x42, 0xe1, 0x84, 0x7e, 0xf1, 0xe3, 0x85, 0xb7, 0x94, 0x4f, 0xa0, 0x16, 0x1b, 0xed, 0x0a, 0xe8,
	0x06, 0xa0, 0x3d, 0xdb, 0x3d, 0xd4, 0xed, 0x5d, 0x3d, 0xd4, 0xaf, 0xc0, 0x3e, 0x81, 0x15, 0x41,
	0x86, 0x6b, 0x0c, 0xe8, 0x42, 0x79, 0x17, 0x9f, 0x5a, 0x06, 0x7e, 0x37, 0x4e, 0xfe, 0x18, 0xca,
	0x26, 0xc5, 0x09, 0x3e, 0x99, 0x55, 0x4b, 0x8c, 0xc6, 0x7c, 0xf1, 0x21, 0x54, 0x5a, 0x27, 0xba,
	0xe3, 0x60, 0xfb, 0x8a, 0x39, 0xff, 0x3c, 0x03, 0x2b, 0x6c, 0xd2, 0x66, 0x10, 0x58, 0xc7, 0x0e,
	0x39, 0x3d, 0x86, 0xf4, 0x4e, 0x78, 0x00, 0x15, 0x1f, 0x7b, 0xb6, 0x65, 0xe8, 0xc2, 0x1e, 0xc9,
	0xab, 0x65, 0x4e, 0x64, 0xeb, 0xf9, 0x08, 0xf8, 0x22, 0x73, 0xdf, 0x8a, 0xe5, 0xc9, 0xab, 0x48,
	0xe8, 0x60, 0xe0, 0xdf, 0x8f, 0x9c, 0x85, 0x81, 0x99, 0xbc, 0x6c, 0xcf, 0x96, 0x36, 0x3f, 0xa5,
	0x1b, 0x7c, 0xae, 0x28, 0x8f, 0x45, 0x33, 0x52, 0x80, 0x2a, 0x1b, 0xb3, 0xa4, 0xe0, 0x6e, 0x33,
	0xb5, 0xe6, 0x8c, 0x2a, 0x7f, 0x0a, 0x72, 0xa4, 0x05, 0xb7, 0x99, 0x65, 0xb2, 0xb3, 0x27, 0xaf,
	0x22, 0xde, 0xc3, 0xa0, 0x5d, 0x33, 0x50, 0xfe, 0x36, 0x03, 0xe5, 0x9e, 0x15, 0x62, 0x5f, 0xb7,
	0x99, 0x11, 0xd6, 0x20, 0x4f, 0x4f, 0x47, 0xaa, 0x7c, 0xfa, 0x14, 0x62, 0x1d, 0xf2, 0x2d, 0xc8,
	0x7b, 0x3e, 0x36, 0xd9, 0xf9, 0xbf, 0xa4, 0xb2, 0x86, 0x8c, 0x20, 0x3b, 0xdd, 0x0e, 0xe8, 0x3e,
	0x28, 0xab, 0xe4, 0x53, 0x96, 0x21, 0x17, 0x3c, 0xdb, 0x64, 0xa7, 0x6c, 0x5e, 0xa5, 0xdf, 0x94,
	0xb6, 0xf5, 0x9c, 0x78, 0x33, 0x39, 0x9b, 0xe9, 0x37, 0xa1, 0x4d, 0x09, 0xae, 0xb0, 0x96, 0x5d,
	0xaf, 0xa8, 0xf4, 0x9b, 0xd2, 0x08, 0x6e, 0x71, 0x2d, 0xbb, 0x9e, 0x53, 0xe9, 0x37, 0xa1, 0x1d,
	0x11, 0xdc, 0xd2, 0x5a, 0x76, 0x3d, 0xa3, 0xd2, 0x6f, 0x4a, 0x23, 0xb8, 0xe2, 0x5a, 0x76, 0x5d,
	0x52, 0xe9, 0xb7, 0xbc, 0x0d, 0x55, 0x76, 0xca, 0xdb, 0x4c, 0xaf, 0xa0, 0x01, 0xd4, 0xde, 0xec,
	0xfe, 0x11, 0x95, 0x55, 0x2b, 0x14, 0xc8, 0x49, 0x8c, 0xdb, 0xd3, 0xad, 0xa0, 0x51, 0xa2, 0x4a,
	0xd0, 0x6f, 0xe5, 0x3f, 0x24, 0xa8, 0xbd, 0xb6, 0x1c, 0xd3, 0x3d, 0x4b, 0xee, 0x6f, 0xa2, 0x85,
	0xf5, 0x87, 0x91, 0x63, 0xd1, 0x6f, 0xe2, 0x6e, 0x41, 0xe8, 0x5b, 0x26, 0xe6, 0xce, 0xc9, 0x5b,
	0xe4, 0x04, 0x13, 0xaf, 0x79, 0x76, 0x4e, 0x80, 0x97, 0x5c, 0xf1, 0x1f, 0x43, 0x39, 0x75, 0xbb,
	0xb3, 0xd3, 0x21, 0x1a, 0x44, 0x6f, 0xf6, 0x87, 0x50, 0x3b, 0xa3, 0x22, 0x68, 0x26, 0x3f, 0xb6,
	0xf8, 0x71, 0x50, 0x3d, 0xe3, 0x92, 0x31, 0x2a, 0xf1, 0xe0, 0x43, 0x3d, 0xc0, 0x09, 0xac, 0x40,
	0x61, 0x65, 0x42, 0x8c, 0x40, 0xca, 0x0b, 0x28, 0x30, 0x85, 0xe4, 0xe7, 0x73, 0xa2, 0x9d, 0x5b,
	0xd4, 0x4a, 0x33, 0x1a, 0x8b, 0xb7, 0xa8, 0xf2, 0x02, 0x6a, 0x2d, 0xd7, 0x09, 0x42, 0xdd, 0x09,
	0x55, 0xfc, 0xd3, 0x29, 0x0e, 0xc8, 0xa6, 0x58, 0xe4, 0xc6, 0xe6, 0x97, 0xd7, 0x1c, 0x5b, 0x47,
	0x08, 0xc5, 0x84, 0xd5, 0x3d, 0x1c, 0x8e, 0x89, 0xe5, 0xdb, 0xec, 0xf2, 0x8e, 0xd8, 0x3c, 0x27,
	0xf7, 0x04, 0xf6, 0x75, 0xc7, 0xe4, 0x6c, 0xee, 0x52, 0x36, 0x73, 0xcf, 0x14, 0x35, 0x82, 0x12,
	0x7f, 0xb4, 0x1c, 0x13, 0xbf, 0xe5, 0xb6, 0x65, 0x0d, 0xe5, 0x1f, 0x24, 0x28, 0x8f, 0x6c, 0xb2,
	0x73, 0x6e, 0xc4, 0xfc, 0x01, 0x54, 0x82, 0x50, 0xf7, 0x43, 0xcd, 0x72, 0xcc, 0x78, 0xef, 0x66,
	0xd5, 0x32, 0x25, 0x76, 0x19, 0x8d, 0x80, 0x6c, 0x12, 0x94, 0xc4, 0xa0, 0x1c, 0x03, 0x51, 0x62,
	0x04, 0x4a, 0x1c, 0x84, 0x39, 0x3f, 0x6f, 0x29, 0x3f, 0x97, 0x60, 0x79, 0xf7, 0xdc, 0xd1, 0x27,
	0x96, 0xf1, 0x2b, 0x90, 0xf7, 0x87, 0x17, 0xe5, 0xbd, 0x6a, 0x6c, 0x5a, 0x17, 0x72, 0xe3, 0x12,
	0x31, 0x34, 0xe2, 0xd5, 0x91, 0x26, 0x40, 0x49, 0x23, 0x42, 0x51, 0xfe, 0x55, 0x82, 0x3b, 0x5c,
	0xde, 0x03, 0xcf, 0xd4, 0x43, 0xfc, 0x2b, 0x90, 0x7a, 0x13, 0x0a, 0x53, 0xca, 0xeb, 0x1a, 0xe2,
	0x72, 0xe4, 0x45, 0x4d, 0x73, 0xdf, 0x4e, 0x53, 0xe5, 0xbf, 0x33, 0x70, 0xaf, 0xe5, 0x3a, 0xa7,
	0xae, 0x4d, 0xef, 0xc1, 0xd8, 0xd9, 0xfb, 0xd3, 0xc9, 0x21, 0x09, 0xc8, 0x1e, 0x42, 0xed, 0x50,
	0x0f, 0x8d, 0x93, 0x24, 0xe4, 0x8d, 0x82, 0x74, 0x4a, 0x4e, 0x8e, 0x83, 0x47, 0x50, 0x3f, 0xc2,
	0x7a, 0x38, 0xf5, 0xb1, 0x00, 0x65, 0xa7, 0x00, 0xe2, 0x1d, 0x09, 0xf8, 0x33, 0x90, 0x03, 0x4f,
	0x0f, 0x2d, 0xdd, 0x16, 0x43, 0x69, 0xe6, 0x12, 0x75, 0xde, 0x23, 0xc4, 0xd2, 0x2d, 0xf8, 0xf0,
	0x1b, 0xec, 0x3b, 0xd8, 0xd6, 0x2c, 0xc7, 0x9b, 0x86, 0xda, 0xc5, 0x89, 0x98, 0xd7, 0xdf, 0x63,
	0xa8, 0x2e, 0x01, 0xbd, 0x9c, 0x9d, 0xb3, 0x0d, 0x1f, 0x71, 0x26, 0xee, 0x34, 0x9c, 0xcf, 0x85,
	0x9d, 0x3a, 0xf7, 0x19, 0x6c, 0x40, 0x51, 0x17, 0xd8, 0xfc, 0x16, 0xdc, 0xe1, 0x6c, 0xe6, 0x68,
	0x50, 0xa0, 0x1a, 0xdc, 0x66, 0x80, 0xd1, 0xac, 0x1e, 0xca, 0x2f, 0x25, 0x7a, 0x6a, 0x9c, 0xba,
	0xf6, 0x69, 0xec, 0x2b, 0x9f, 0x42, 0xd6, 0x3e, 0x09, 0xae, 0xe1, 0x27, 0x04, 0x46, 0xd0, 0xfe,
	0xc9, 0x75, 0xfc, 0x99, 0xc0, 0x48, 0xec, 0xce, 0xce, 0x46, 0xee, 0x16, 0x25, 0xe1, 0x58, 0x53,
	0x79, 0x97, 0xbc, 0x0f, 0xf5, 0x58, 0x03, 0xcd, 0x61, 0xcb, 0xce, 0x63, 0xfd, 0x35, 0x3e, 0xc1,
	0xa5, 0xee, 0xa1, 0x22, 0x73, 0x86, 0xa2, 0x74, 0xa1, 0xd2, 0x75, 0x8e, 0x30, 0x36, 0x23, 0x05,
	0xe3, 0xbb, 0x34, 0x73, 0xd9, 0x5d, 0xba, 0x0a, 0x05, 0x83, 0x26, 0x87, 0xfc, 0xe2, 0xe4, 0x2d,
	0xe5, 0x2f, 0x24, 0xa8, 0x0e, 0xa6, 0xe1, 0x5c, 0x66, 0x97, 0x5e, 0xcc, 0xef, 0xb7, 0xf7, 0x7e,
	0x03, 0xaa, 0x2e, 0x9b, 0x49, 0x4b, 0x89, 0x52, 0xe1, 0x54, 0x96, 0xbc, 0x2a, 0x6f, 0xa1, 0xd4,
	0xd2, 0x6d, 0x3b, 0x92, 0xe6, 0x29, 0x2c, 0x85, 0xae, 0xa6, 0x7b, 0x9e, 0x7d, 0xce, 0x27, 0x5b,
	0x9d, 0x9d, 0x2c, 0x9a, 0x28, 0x74, 0x9b, 0x04, 0x26, 0x6f, 0xc1, 0x12, 0x9f, 0x33, 0x8a, 0x80,
	0xde, 0x25, 0x5f, 0x8c, 0x55, 0xfe, 0x4a, 0x82, 0x7a, 0x6b, 0x1a, 0x84, 0xee, 0x44, 0x14, 0x60,
	0x1d, 0x90, 0xa1, 0xdb, 0xb6, 0x16, 0xea, 0xfe, 0x31, 0x0e, 0xc5, 0xe4, 0xa2, 0x4a, 0xe8, 0x63,
	0x4a, 0xa6, 0x49, 0xc6, 0x7b, 0xce, 0x9b, 0x18, 0x3c, 0x77, 0x89, 0xc1, 0x95, 0x7f, 0x92, 0x00,
	0xf6, 0x75, 0x2f, 0x12, 0x49, 0x9c, 0x28, 0xf3, 0x2d, 0x26, 0x12, 0x6d, 0x99, 0xbd, 0x9e, 0x2d,
	0x5b, 0x50, 0x0b, 0x48, 0x8f, 0xa1, 0xc5, 0x33, 0xe6, 0xae, 0x9c, 0xb1, 0xca, 0x86, 0x0c, 0x22,
	0xc3, 0xfe, 0xa7, 0x04, 0x15, 0x15, 0x9b, 0xd3, 0x9b, 0x9e, 0xde, 0x5f, 0x00, 0x58, 0x8e, 0x15,
	0x0a, 0xc9, 0xfe, 0xbb, 0x07, 0x16, 0x09, 0x9a, 0xa6, 0xfc, 0x33, 0x19, 0x7b, 0xee, 0x42, 0xc6,
	0x2e, 0x9a, 0x26, 0x7f, 0x2d, 0xd3, 0x28, 0xff, 0x25, 0xc1, 0x32, 0xd3, 0x8a, 0xef, 0xf6, 0x5f,
	0x97, 0x6e, 0xd7, 0x3a, 0x82, 0xde, 0x43, 0xc1, 0xff, 0x91, 0xa0, 0xb1, 0x43, 0x6e, 0xa0, 0xbe,
	0xeb, 0x4f, 0xc6, 0xbe, 0x6e, 0x39, 0x96, 0x73, 0x3c, 0x47, 0x4b, 0xe9, 0xfa, 0x5a, 0xfe, 0x00,
	0xf2, 0x81, 0xa1, 0xdb, 0xf8, 0x1a, 0x96, 0x61, 0x40, 0x72, 0x63, 0xbb, 0x47, 0x47, 0x01, 0x0e,
	0xaf, 0x73, 0x63, 0x33, 0xa4, 0xdc, 0x80, 0x45, 0xec, 0x05, 0x96, 0xcd, 0xaf, 0x9b, 0x8c, 0x1a,
	0x35, 0x49, 0x00, 0x15, 0x5d, 0x49, 0x2c, 0x94, 0x63, 0xe1, 0x6d, 0x99, 0x13, 0xbb, 0x34, 0xa2,
	0xeb, 0xc3, 0x6a, 0xcb, 0x77, 0x83, 0x40, 0x65, 0x39, 0xcc, 0x68, 0x3a, 0xb9, 0xd1, 0xd2, 0x2a,
	0xff, 0x92, 0x81, 0xdb, 0x23, 0x6c, 0x63, 0x23, 0x6c, 0x3a, 0xe6, 0xc8, 0xd0, 0xc3, 0x10, 0xfb,
	0x37, 0x0e, 0x63, 0x58, 0x69, 0xe2, 0x3a, 0x46, 0x61, 0xc8, 0x19, 0x07, 0xcb, 0xbd, 0x9f, 0x83,
	0xe5, 0x2f, 0x77, 0xb0, 0xc7, 0x50, 0x08, 0xa8, 0x92, 0x34, 0x17, 0xb8, 0xdc, 0xbd, 0x38, 0x4a,
	0xfe, 0x01, 0x2c, 0x06, 0xcc, 0x16, 0x8d, 0xc5, 0x77, 0xfb, 0x23, 0x87, 0x29, 0x47, 0x50, 0x55,
	0xf1, 0x29, 0xf6, 0x83, 0x1b, 0x1e, 0x23, 0x57, 0x54, 0xef, 0x94, 0x9f, 0x02, 0xda, 0xf1, 0x5d,
	0xdd, 0x34, 0xf4, 0xe0, 0x86, 0x19, 0x03, 0x89, 0xec, 0x22, 0x4e, 0x3c, 0xce, 0x65, 0xd3, 0x55,
	0x63, 0x32, 0x8b, 0x75, 0x7f, 0x21, 0x01, 0x0c, 0x75, 0xf3, 0xc6, 0x21, 0xf9, 0xc5, 0x72, 0xe8,
	0x15, 0x81, 0xaa, 0x58, 0x17, 0x95, 0xbf, 0x80, 0x6a, 0xc4, 0x80, 0xdf, 0xd0, 0xcc, 0x4d, 0xe4,
	0x8b, 0x85, 0x69, 0x35, 0x9a, 0x8a, 0xdf, 0xda, 0x7f, 0x22, 0x91, 0xc5, 0xa1, 0xb7, 0xd5, 0x77,
	0xba, 0x38, 0xf2, 0x3d, 0x28, 0x3a, 0xf8, 0x2c, 0x95, 0x34, 0x2c, 0x39, 0xf8, 0x8c, 0x99, 0xf1,
	0x04, 0x10, 0xad, 0x56, 0x79, 0xee, 0x77, 0xed, 0x23, 0x47, 0x80, 0x86, 0x51, 0x25, 0xf4, 0xfa,
	0x51, 0xd8, 0x7d, 0x28, 0xc6, 0xf5, 0x53, 0x1e, 0x4f, 0x27, 0x04, 0x92, 0xed, 0xd3, 0xe8, 0x22,
	0x47, 0xa3, 0x0b, 0xfa, 0xad, 0xfc, 0x4c, 0x82, 0x5b, 0x7b, 0x38, 0xec, 0xb9, 0x86, 0x6e, 0x8f,
	0x44, 0xeb, 0x6e, 0x43, 0x49, 0x28, 0xd4, 0xf0, 0x33, 0xf8, 0xb2, 0x2d, 0x24, 0x42, 0xdf, 0xf3,
	0x10, 0xfb, 0x02, 0x56, 0x66, 0xe4, 0x08, 0x3c, 0xd7, 0x09, 0xf0, 0xd5, 0xe1, 0xa2, 0xf2, 0x0a,
	0xca, 0x63, 0x5f, 0x4f, 0x2e, 0x7f, 0x04, 0xd9, 0x50, 0x3f, 0xe6, 0x41, 0x14, 0xf9, 0x14, 0x45,
	0xca, 0x5e, 0x5f, 0xa4, 0x3f, 0x95, 0xa0, 0x4a, 0x02, 0x67, 0xec, 0xdf, 0x70, 0x9b, 0xfe, 0x36,
	0x20, 0xe2, 0x53, 0xa9, 0x97, 0x80, 0xec, 0xa5, 0x2f, 0x01, 0x55, 0x07, 0x9f, 0xb5, 0x93, 0xc7,
	0x00, 0xe5, 0x6b, 0x90, 0x5b, 0xae, 0x63, 0xe8, 0x21, 0x76, 0xf4, 0x10, 0xdf, 0x34, 0x46, 0xbb,
	0x0f, 0xc5, 0xd9, 0x94, 0x2b, 0x21, 0x28, 0x7f, 0x27, 0x41, 0xf9, 0xf5, 0x89, 0x65, 0x0b, 0xde,
	0x5d, 0x34, 0x5c, 0xc7, 0xb4, 0xc2, 0x28, 0x15, 0xbc, 0xdc, 0x09, 0x12, 0xa0, 0xbc, 0x01, 0xb9,
	0x43, 0xd7, 0xbc, 0x2a, 0x08, 0xa4, 0x18, 0xf9, 0x31, 0xe4, 0xc8, 0x4d, 0x70, 0x8d, 0x1b, 0x83,
	0xe2, 0x14, 0x17, 0xaa, 0x07, 0x8e, 0xee, 0x9f, 0x0f, 0xe2, 0x70, 0xf5, 0x21, 0xe4, 0xa6, 0x8e,
	0xeb, 0xf1, 0xc7, 0x95, 0x65, 0xca, 0x81, 0x43, 0xb0, 0x4f, 0x99, 0xa8, 0x14, 0xf0, 0x9e, 0x6e,
	0xf0, 0xef, 0x12, 0xd4, 0x76, 0xac, 0xf4, 0x94, 0x1b, 0x90, 0x3f, 0xb4, 0x92, 0x39, 0x59, 0xad,
	0x29, 0x02, 0x45, 0x93, 0x32, 0x48, 0x94, 0x1d, 0x66, 0xbf, 0x55, 0x76, 0x98, 0xbb, 0x5e, 0x76,
	0xf8, 0x14, 0x6e, 0x25, 0x17, 0xc0, 0x85, 0x34, 0x7c, 0x39, 0xee, 0x13, 0x12, 0xd8, 0xbf, 0x97,
	0x00, 0xd4, 0x24, 0xce, 0xfa, 0x12, 0xca, 0xa6, 0x15, 0x84, 0xbe, 0x75, 0x38, 0x8d, 0xd7, 0xb8,
	0xba, 0x79, 0x9b, 0x4e, 0xac, 0xea, 0x8e, 0xe9, 0x4e, 0x76, 0x85, 0x6e, 0x35, 0x05, 0x96, 0xb7,
	0xd3, 0xe7, 0xcd, 0x55, 0x5e, 0x28, 0x9c, 0x45, 0x57, 0xe7, 0x24, 0xff, 0x26, 0x01, 0x1a, 0x63,
	0x3f, 0x6d, 0xf7, 0x47, 0x90, 0x0f, 0x7d, 0x2b, 0xb6, 0xfb, 0x0a, 0x1d, 0x16, 0xa3, 0x62, 0xc3,
	0x53, 0xcc, 0x77, 0x6a, 0xf8, 0x4f, 0x21, 0x8b, 0x4f, 0xa2, 0x1c, 0xfb, 0x9d, 0x68, 0x7c, 0x12,
	0x28, 0xe7, 0x50, 0x7f, 0xa5, 0xfb, 0x96, 0x6e, 0x92, 0xa4, 0x25, 0xa9, 0x1a, 0xe4, 0x4f, 0x75,
	0x3f, 0xd6, 0x85, 0xed, 0x92, 0x04, 0x16, 0x2b, 0x43, 0x41, 0xef, 0x9d, 0x74, 0xfe, 0xb5, 0x04,
	0xab, 0x2c, 0x8b, 0x18, 0xfa, 0xd8, 0xb0, 0x68, 0x11, 0xf4, 0x46, 0x21, 0xf6, 0x03, 0xa8, 0xe0,
	0xb7, 0x9e, 0xeb, 0x90, 0x93, 0xec, 0xd0, 0x0a, 0x03, 0xfe, 0x66, 0x50, 0x8e, 0x88, 0x3b, 0x56,
	0x48, 0x0b, 0x89, 0x13, 0xdd, 0x09, 0xad, 0x20, 0xd0, 0x19, 0x28, 0xcb, 0x40, 0x11, 0x91, 0x80,
	0x94, 0x3f, 0x82, 0xd2, 0x08, 0x3b, 0xe6, 0xcd, 0xc4, 0xf9, 0x02, 0xaa, 0x06, 0x7b, 0x2e, 0xd1,
	0xf8, 0x2b, 0x49, 0x46, 0x88, 0x29, 0x52, 0x2f, 0x29, 0x6a, 0xc5, 0x10, 0x9b, 0xca, 0xd7, 0x50,
	0x52, 0xb1, 0x71, 0x7a, 0xfd, 0xba, 0xc4, 0x0d, 0xe6, 0xfa, 0xc7, 0x65, 0x28, 0x26, 0x4b, 0xff,
	0xfe, 0x97, 0xeb, 0x23, 0x58, 0x9a, 0xf0, 0x67, 0xca, 0xc6, 0xc7, 0x74, 0x58, 0x8d, 0x0e, 0x4b,
	0x5e, 0x2f, 0xd5, 0x18, 0x20, 0xef, 0x40, 0xfd, 0x90, 0x9e, 0x49, 0x9a, 0xeb, 0x69, 0x3e, 0x9b,
	0x9b, 0x8b, 0x9c, 0x3e, 0xb1, 0xb8, 0x5c, 0x9d, 0x05, 0xb5, 0x76, 0x38, 0x73, 0xd2, 0xed, 0x42,
	0x3d, 0x39, 0x61, 0x22, 0x1e, 0x6c, 0x4b, 0xb1, 0xdd, 0x37, 0x1b, 0xca, 0x76, 0x16, 0x54, 0x74,
	0x38, 0x1b, 0xde, 0x7e, 0x0e, 0x65, 0x5a, 0xe4, 0x88, 0x18, 0xb0, 0x5d, 0x86, 0x98, 0xc6, 0x49,
	0x31, 0xa4, 0xb3, 0xa0, 0x96, 0x0c, 0xa1, 0x36, 0xf2, 0x23, 0x58, 0x36, 0x92, 0xab, 0x2f, 0x1e,
	0xcd, 0x76, 0xdd, 0xed, 0xa8, 0xb2, 0x35, 0x73, 0x35, 0x76, 0x16, 0x54, 0xd9, 0xb8, 0x78, 0x61,
	0x36, 0x01, 0x19, 0xbc, 0xda, 0x1f, 0x33, 0x2a, 0x08, 0xb6, 0x98, 0x79, 0x0a, 0x20, 0xb6, 0x30,
	0x66, 0x5e, 0x07, 0x5e, 0x00, 0x21, 0x91, 0x78, 0x20, 0xe6, 0xc0, 0x52, 0x8b, 0xe5, 0xb8, 0xc8,
	0x96, 0xc4, 0x0a, 0x9d, 0x05, 0xb5, 0x6a, 0xa4, 0xa3, 0x07, 0x26, 0x02, 0x2d, 0x1d, 0xc6, 0x0c,
	0x96, 0xd2, 0x22, 0x88, 0x75, 0x45, 0x2e, 0x42, 0xaa, 0xd4, 0xf8, 0x06, 0xee, 0x18, 0x24, 0x77,
	0xd4, 0xa2, 0xa7, 0xb1, 0x60, 0x3a, 0x89, 0x79, 0x15, 0x29, 0xaf, 0x7b, 0x8c, 0xd7, 0xdc, 0x0c,
	0xb3, 0xb3, 0xa0, 0xae, 0x1a, 0xf3, 0x73, 0xcf, 0x0e, 0x2c, 0x1b, 0xb4, 0x38, 0xa5, 0xa5, 0x56,
	0x0a, 0x44, 0xdf, 0x9c, 0x2d, 0x5e, 0x75, 0x16, 0xd4, 0xba, 0x71, 0xa1, 0xa2, 0xd5, 0x87, 0x15,
	0x93, 0xd5, 0xd5, 0x35, 0x56, 0x81, 0x8f, 0x78, 0x95, 0x28, 0xaf, 0x06, 0x7b, 0x2e, 0xbc, 0xf8,
	0x52, 0xd0, 0x59, 0x50, 0x97, 0xcd, 0x39, 0x0f, 0x08, 0x3a, 0xdc, 0x8f, 0xf8, 0xb1, 0x92, 0xf9,
	0x0c, 0xdb, 0x32, 0x65, 0xfb, 0xa1, 0xc8, 0xf6, 0x62, 0x41, 0xbf, 0xb3, 0xa0, 0xde, 0x31, 0x2f,
	0xad, 0xf6, 0xbf, 0x81, 0x3b, 0xc7, 0x38, 0xd4, 0xd8, 0x73, 0x5b, 0x14, 0xa7, 0x45, 0xfc, 0x2b,
	0x82, 0x59, 0xe7, 0x3f, 0xf8, 0x10, 0xb3, 0x1e, 0xcf, 0x7f, 0x0a, 0xfa, 0x12, 0xaa, 0x16, 0xad,
	0xa5, 0xc6, 0xec, 0xaa, 0xc2, 0x99, 0x91, 0x2a, 0xb3, 0x76, 0x16, 0xd4, 0x8a, 0x95, 0xaa, 0xbb,
	0x6e, 0x42, 0x69, 0xa2, 0x27, 0x5b, 0xb7, 0x26, 0x6c, 0xf8, 0xa4, 0x5c, 0xd7, 0x59, 0x50, 0x61,
	0x92, 0x14, 0xef, 0x36, 0xe9, 0x3b, 0x5d, 0x3c, 0x06, 0x09, 0x63, 0x92, 0x0c, 0x90, 0x8c, 0xf1,
	0x92, 0x7c, 0x70, 0x17, 0xea, 0xc9, 0xdf, 0x31, 0xa2, 0x91, 0x75, 0x61, 0x93, 0xcf, 0xe6, 0x22,
	0x64, 0x93, 0x7b, 0xb3, 0xf9, 0xc9, 0x6b, 0x68, 0xf8, 0xf4, 0xa6, 0xd1, 0xbc, 0xe8, 0xaa, 0x89,
	0x99, 0x7d, 0x4f, 0xb0, 0xe1, 0xfc, 0xeb, 0x88, 0xd8, 0xd0, 0x9f, 0x7f, 0x51, 0x7d, 0x09, 0x55,
	0xce, 0x38, 0x62, 0x27, 0x0b, 0x36, 0x4c, 0x55, 0xfe, 0x88, 0x0d, 0xfd, 0x54, 0x29, 0xb0, 0x0f,
	0x2b, 0x7c, 0x30, 0x7f, 0x7a, 0x8c, 0x78, 0x2c, 0x0b, 0xde, 0x38, 0xa7, 0xce, 0x46, 0xbc, 0xd1,
	0x9f, 0x53, 0x7e, 0x7b, 0x01, 0x35, 0x9f, 0x25, 0xa2, 0x31, 0xa7, 0x5b, 0xc2, 0x21, 0x90, 0x4e,
	0x52, 0xc9, 0x21, 0xe0, 0xa7, 0xd3, 0x56, 0x3a, 0x9e, 0x56, 0x19, 0xe2, 0xf1, 0x2b, 0xa9, 0xf1,
	0x62, 0x05, 0x82, 0x8d, 0x4f, 0xd5, 0x24, 0x36, 0xa1, 0xe4, 0x3b, 0xc7, 0xf1, 0xd8, 0x55, 0x61,
	0x7d, 0x93, 0xb0, 0x8e, 0xac, 0xaf, 0x9f, 0x04, 0x79, 0xbf, 0x07, 0x77, 0x59, 0x55, 0x84, 0xfe,
	0x25, 0x83, 0xd7, 0x3b, 0x62, 0x16, 0xb7, 0x29, 0x8b, 0xfb, 0xec, 0xbe, 0x9b, 0x5f, 0x47, 0xea,
	0x2c, 0xa8, 0xb7, 0x83, 0x4b, 0x4a, 0x4c, 0xdb, 0x50, 0x49, 0xef, 0xc7, 0x86, 0xf0, 0x72, 0x3a,
	0xb3, 0x05, 0xcb, 0x81, 0xb8, 0xeb, 0xda, 0x20, 0x87, 0x2c, 0x76, 0x13, 0x2f, 0xa8, 0x3b, 0x82,
	0xdf, 0xcd, 0x06, 0x80, 0xc4, 0xef, 0xc2, 0xd9, 0xa0, 0x70, 0x1b, 0x2a, 0x21, 0xc9, 0xff, 0x62,
	0x0e, 0x77, 0x05, 0x01, 0xc4, 0xcc, 0x90, 0x08, 0x10, 0x8a, 0x99, 0xe2, 0x2e, 0xd4, 0xc3, 0x28,
	0x9f, 0x8f, 0x47, 0x2b, 0xe2, 0xfc, 0x33, 0xd9, 0x3e, 0x9d, 0x7f, 0xb6, 0x02, 0xf0, 0x43, 0x40,
	0xd3, 0x59, 0x25, 0xee, 0x09, 0x4b, 0x7a, 0x30, 0xab, 0x42, 0x75, 0x9a, 0x56, 0xa0, 0x03, 0xcb,
	0xa7, 0x3c, 0xee, 0x13, 0x79, 0xdc, 0x17, 0x8e, 0xde, 0x0b, 0xe1, 0x23, 0x39, 0x7a, 0x4f, 0x2f,
	0xc4, 0x94, 0xdb, 0x50, 0x39, 0x23, 0xe9, 0x5b, 0xcc, 0xe3, 0x03, 0xc1, 0x14, 0x62, 0x62, 0x47,
	0x4c, 0x71, 0x26, 0x26, 0x7a, 0x9f, 0x43, 0x39, 0xc0, 0x4e, 0x72, 0x6e, 0x7c, 0x28, 0xdc, 0xd0,
	0x42, 0x94, 0x46, 0x6e, 0xe8, 0x40, 0x08, 0xda, 0x3e, 0x87, 0xb2, 0x8f, 0x8d, 0xd3, 0x78, 0xd8,
	0x47, 0xc2, 0x30, 0x21, 0xb8, 0x22, 0xc3, 0x7c, 0x21, 0xd6, 0x7a, 0x01, 0xb5, 0xe8, 0xad, 0x26,
	0x1a, 0xb9, 0x26, 0x58, 0x2c, 0xfd, 0x62, 0x44, 0x2c, 0xe6, 0xa6, 0xdf, 0x90, 0xfe, 0x00, 0xee,
	0xb1, 0x27, 0x4d, 0xc7, 0xf5, 0x27, 0x5a, 0xc8, 0x6b, 0xc7, 0x31, 0xaf, 0x07, 0x94, 0xd7, 0x07,
	0x2c, 0x3e, 0xb9, 0xa4, 0xc2, 0xdc, 0x59, 0x50, 0x1b, 0x87, 0x97, 0xf4, 0xed, 0xe4, 0x20, 0xe3,
	0x7a, 0xca, 0xef, 0x00, 0x10, 0xd3, 0xf2, 0x42, 0xc4, 0x26, 0x14, 0xd8, 0xab, 0xe3, 0x35, 0xc2,
	0x53, 0x8e, 0xdc, 0xf8, 0xb9, 0x04, 0x95, 0x54, 0x76, 0x2f, 0xdf, 0x85, 0xd5, 0xa1, 0xda, 0xdd,
	0xef, 0x8e, 0xbb, 0xaf, 0xda, 0xda, 0xf8, 0x27, 0xc3, 0xb6, 0xd6, 0xed, 0xbf, 0x6a, 0xf6, 0xba,
	0xbb, 0x68, 0x41, 0x5e, 0x82, 0xdc, 0x50, 0x6d, 0xef, 0x22, 0x49, 0x2e, 0x40, 0x66, 0xb4, 0x8d,
	0x32, 0xf2, 0x22, 0x64, 0x47, 0x4f, 0xb7, 0x50, 0x96, 0x7e, 0x3c, 0xdb, 0x44, 0x39, 0xfa, 0xb1,
	0xf5, 0x1c, 0xe5, 0x09, 0xe4, 0x60, 0x1b, 0x15, 0x08, 0xe1, 0xe0, 0xe9, 0x16, 0x5a, 0xa4, 0x1f,
	0xcf, 0x36, 0xd1, 0x12, 0xfd, 0xd8, 0x7a, 0x8e, 0x8a, 0xe4, 0xe3, 0xe5, 0xd3, 0x2d, 0x04, 0xf4,
	0xe3, 0xd9, 0x26, 0x2a, 0xd1, 0x8f, 0xad, 0xe7, 0xa8, 0x2c, 0x17, 0x21, 0x3f, 0x3e, 0x18, 0xf6,
	0xda, 0xa8, 0x22, 0x03, 0x14, 0x06, 0xc3, 0xe6, 0x8f, 0x0f, 0xda, 0xa8, 0xba, 0x61, 0x43, 0x59,
	0xfc, 0x5f, 0xa3, 0x5c, 0x83, 0x12, 0x17, 0x4f, 0x1b, 0x36, 0x89, 0x88, 0x65, 0x58, 0xfa, 0xaa,
	0xad, 0x0e, 0x68, 0x4b, 0x92, 0x4b, 0xb0, 0x38, 0xe8, 0xb7, 0x69, 0x23, 0x23, 0x57, 0x01, 0x7a,
	0x83, 0xd7, 0xed, 0xd1, 0x98, 0xb6, 0xb3, 0x64, 0x6c, 0xa7, 0xbb, 0xd7, 0x89, 0x08, 0x39, 0x42,
	0x38, 0xe8, 0xff, 0x6e, 0x7f, 0xf0, 0xba, 0x4f, 0x09, 0xf9, 0x8d, 0x5f, 0x4a, 0x71, 0x2e, 0xcf,
	0xb3, 0x1d, 0x19, 0x41, 0xf9, 0xa0, 0x3f, 0x18, 0x0a, 0x46, 0xb9, 0x05, 0x88, 0x52, 0x7a, 0x83,
	0xbd, 0x6e, 0xab, 0xd9, 0xd3, 0xfa, 0x83, 0x31, 0x92, 0x88, 0x1c, 0x94, 0xda, 0x7e, 0x33, 0x44,
	0x19, 0xc6, 0x79, 0x30, 0xd4, 0xfa, 0xed, 0xbd, 0xe6, 0xb8, 0x8d, 0xb2, 0x72, 0x05, 0x8a, 0x94,
	0x30, 0x1a, 0xa8, 0x63, 0x94, 0x8b, 0x9b, 0xe3, 0x66, 0xbf, 0x83, 0xf2, 0xf1, 0xe0, 0xde, 0x60,
	0x0f, 0x15, 0x88, 0xdc, 0xb4, 0xf5, 0xb2, 0x37, 0x18, 0xa8, 0x68, 0x31, 0x06, 0xb7, 0xda, 0xdd,
	0x1e, 0x5a, 0x8a, 0xc1, 0xcd, 0x9d, 0x11, 0x2a, 0x26, 0x8c, 0xbb, 0x7b, 0x7d, 0x04, 0xb2, 0x0c,
	0x55, 0x26, 0xee, 0x48, 0x7b, 0xd9, 0xed, 0x77, 0xc7, 0x6d, 0x54, 0x8a, 0x07, 0xb4, 0x06, 0x23,
	0x54, 0xde, 0xf8, 0xe7, 0x4c, 0x52, 0x3d, 0x88, 0x94, 0xac, 0x43, 0x65, 0xa7, 0x9b, 0xd6, 0xb2,
	0x02, 0x45, 0x46, 0x6a, 0xee, 0x12, 0xc3, 0xc6, 0xcd, 0xdd, 0xee, 0x2b, 0x94, 0x49, 0x9a, 0xfb,
	0x07, 0x3d, 0xa6, 0x1d, 0x6b, 0x8e, 0x0e, 0x76, 0x50, 0x8e, 0x4c, 0xc8, 0x9a, 0xed, 0x1f, 0x33,
	0xe5, 0x58, 0x6b, 0xaf, 0x8d, 0x0a, 0x42, 0x6b, 0x8c, 0x16, 0x93, 0x56, 0xaf, 0xcd, 0x34, 0xe3,
	0xad, 0x31, 0x2a, 0x26, 0xad, 0x7e, 0x1b, 0x81, 0x20, 0xc0, 0x60, 0x8c, 0xca, 0xc4, 0xc0, 0x91,
	0xc4, 0xbb, 0xed, 0x37, 0xa8, 0x22, 0x48, 0xd4, 0x7c, 0x83, 0xaa, 0x42, 0xb3, 0xdb, 0x47, 0xb5,
	0xa4, 0x39, 0x1c, 0xbc, 0x46, 0x28, 0x69, 0xaa, 0xed, 0x7d, 0x54, 0x97, 0x57, 0xa0, 0xce, 0xe7,
	0xe5, 0x4b, 0xda, 0xec, 0xef, 0x22, 0x99, 0x2c, 0x74, 0x9a, 0x3c, 0x50, 0xd1, 0xf2, 0xc6, 0x4f,
	0x40, 0xbe, 0x58, 0x86, 0x20, 0xf2, 0xa8, 0xfd, 0x3d, 0xc1, 0x7e, 0x9c, 0x70, 0xd0, 0xef, 0xbe,
	0x1c, 0xa8, 0xfb, 0x48, 0x22, 0xab, 0x4a, 0x08, 0xfd, 0x81, 0xba, 0xdf, 0xec, 0xa1, 0x0c, 0xb1,
	0x39, 0x69, 0xef, 0xb4, 0xd5, 0xfe, 0xe0, 0xa0, 0xd7, 0xeb, 0xa2, 0xec, 0xc6, 0x57, 0x42, 0x81,
	0x41, 0x58, 0x9a, 0xb1, 0xda, 0x4d, 0x2d, 0x0d, 0x82, 0x32, 0x23, 0x8d, 0xda, 0xbd, 0x76, 0x8b,
	0x38, 0x5f, 0x4c, 0x39, 0x18, 0xee, 0x12, 0x7f, 0xa3, 0x0e, 0xc8, 0x28, 0xad, 0x5e, 0x73, 0x7f,
	0x88, 0xb2, 0x1b, 0xbf, 0x29, 0x66, 0xfc, 0x02, 0xf3, 0x57, 0x4d, 0x35, 0xc5, 0xbc, 0x06, 0x25,
	0x46, 0x62, 0xbb, 0x51, 0xda, 0xd9, 0xfb, 0x6a, 0xe7, 0xd8, 0x0a, 0x4f, 0xa6, 0x87, 0x8f, 0x0d,
	0x77, 0xf2, 0xc4, 0xf4, 0xf1, 0xf9, 0x37, 0x4f, 0x92, 0xbf, 0x82, 0x7f, 0x16, 0x60, 0xff, 0xd4,
	0x72, 0x8e, 0x3f, 0x3b, 0x76, 0x9f, 0x78, 0xdf, 0x1c, 0x3f, 0xb9, 0xe4, 0x4f, 0xe2, 0xff, 0x27,
	0x49, 0x87, 0x05, 0xfa, 0xff, 0xf0, 0x67, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x38, 0x3e, 0xb1,
	0x77, 0x49, 0x2e, 0x00, 0x00,
}
