// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/compiler/xla/xla.proto

/*
Package xla is a generated protocol buffer package.

It is generated from these files:
	tensorflow/compiler/xla/xla.proto
	tensorflow/compiler/xla/xla_data.proto

It has these top-level messages:
	DebugOptions
	ExecutionOptions
	SnapshotComputationRequest
	SnapshotComputationResponse
	LoadComputationSnapshotRequest
	LoadComputationSnapshotResponse
	GetDeviceHandlesRequest
	GetDeviceHandlesResponse
	TransferToClientRequest
	TransferToClientResponse
	TransferToServerRequest
	TransferToServerResponse
	TransferToInfeedRequest
	TransferToInfeedResponse
	TransferFromOutfeedRequest
	TransferFromOutfeedResponse
	ResetDeviceRequest
	ResetDeviceResponse
	ComputationStatsRequest
	ComputationStatsResponse
	ComputationRequest
	ComputationResponse
	CreateChannelHandleRequest
	CreateChannelHandleResponse
	UnregisterRequest
	UnregisterResponse
	SetReturnValueRequest
	SetReturnValueResponse
	ExecuteRequest
	ExecuteParallelRequest
	ExecuteResponse
	ExecuteParallelResponse
	ExecuteAsyncRequest
	ExecuteAsyncResponse
	WaitForExecutionRequest
	WaitForExecutionResponse
	IsConstantRequest
	IsConstantResponse
	ComputeConstantRequest
	ComputeConstantResponse
	DeconstructTupleRequest
	DeconstructTupleResponse
	LoadDataRequest
	LoadDataResponse
	SpecializeRequest
	SpecializeResponse
	GetShapeRequest
	GetShapeResponse
	GetComputationShapeRequest
	GetComputationShapeResponse
	UnpackRequest
	UnpackResponse
	PaddingConfig
	Layout
	Shape
	ProgramShape
	ComputationStats
	OpMetadata
	ExecutionProfile
	ComputationHandle
	ExecutionHandle
	GlobalDataHandle
	ComputationDataHandle
	DeviceHandle
	ChannelHandle
	DeviceAssignmentProto
	LiteralProto
	WindowDimension
	Window
	ConstantRequest
	GetTupleElementRequest
	SliceRequest
	DynamicSliceRequest
	DynamicUpdateSliceRequest
	ConvolutionDimensionNumbers
	ConvolveRequest
	InfeedRequest
	OutfeedRequest
	CallRequest
	CustomCallRequest
	MapRequest
	ReduceRequest
	ReduceWindowRequest
	BatchNormTrainingRequest
	CrossReplicaSumRequest
	SelectAndScatterRequest
	ReverseRequest
	BroadcastRequest
	PadRequest
	ReshapeRequest
	TransposeRequest
	ParameterRequest
	GetLocalShapeRequest
	GetLocalShapeResponse
	TraceRequest
	ConvertRequest
	ConcatenateRequest
	WhileRequest
	UnaryOpRequest
	BinaryOpRequest
	RngRequest
	TernaryOpRequest
	VariadicOpRequest
	ReducePrecisionRequest
	SendRequest
	RecvRequest
	OpRequest
	OpResponse
*/
package xla

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import xla1 "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/compiler/xla/service"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Debugging options for XLA. These options may change at any time - there are
// no guarantees about backward or forward compatibility for these fields.
type DebugOptions struct {
	// HLO modules matching this regex will be dumped to a .dot file throughout
	// various stages in compilation (file names are LOG(INFO)'d). Set to ".*" to
	// dump *all* HLO modules.
	XlaGenerateHloGraph string `protobuf:"bytes,1,opt,name=xla_generate_hlo_graph,json=xlaGenerateHloGraph" json:"xla_generate_hlo_graph,omitempty"`
	// List of HLO passes to disable. These names must exactly match the pass
	// names as specified by the HloPassInterface::name() method.
	XlaDisableHloPasses []string `protobuf:"bytes,2,rep,name=xla_disable_hlo_passes,json=xlaDisableHloPasses" json:"xla_disable_hlo_passes,omitempty"`
	// Numerical optimization level for the XLA compiler backend; the specific
	// interpretation of this value is left to the backends.
	XlaBackendOptimizationLevel int32 `protobuf:"varint,3,opt,name=xla_backend_optimization_level,json=xlaBackendOptimizationLevel" json:"xla_backend_optimization_level,omitempty"`
	// When true, "unsafe" mathematical optimizations are enabled. These
	// transformations include but are not limited to:
	//
	//  - Reducing the precision of operations (e.g. using an approximate sin
	//    function, or transforming x/y into x * (1/y)).
	//  - Assuming that operations never produce or consume NaN or +/- Inf.
	//  - Assuming that +0 and -0 are indistinguishable.
	XlaEnableFastMath bool `protobuf:"varint,4,opt,name=xla_enable_fast_math,json=xlaEnableFastMath" json:"xla_enable_fast_math,omitempty"`
	// Embed the compiler IR as a string in the executable.
	XlaEmbedIrInExecutable bool `protobuf:"varint,5,opt,name=xla_embed_ir_in_executable,json=xlaEmbedIrInExecutable" json:"xla_embed_ir_in_executable,omitempty"`
	// Dump compilation artifacts as JSON into this directory.
	XlaDumpDebugJsonTo string `protobuf:"bytes,6,opt,name=xla_dump_debug_json_to,json=xlaDumpDebugJsonTo" json:"xla_dump_debug_json_to,omitempty"`
	// Path to directory with cuda/ptx tools and libraries.
	XlaGpuCudaDataDir string `protobuf:"bytes,7,opt,name=xla_gpu_cuda_data_dir,json=xlaGpuCudaDataDir" json:"xla_gpu_cuda_data_dir,omitempty"`
	// Enable flush-to-zero semantics in the GPU backend.
	XlaGpuFtz bool `protobuf:"varint,8,opt,name=xla_gpu_ftz,json=xlaGpuFtz" json:"xla_gpu_ftz,omitempty"`
	// Extra options to pass to the compilation backend; specific interpretation
	// of these values is left to the backend.
	XlaBackendExtraOptions map[string]string `protobuf:"bytes,500,rep,name=xla_backend_extra_options,json=xlaBackendExtraOptions" json:"xla_backend_extra_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DebugOptions) Reset()                    { *m = DebugOptions{} }
func (m *DebugOptions) String() string            { return proto.CompactTextString(m) }
func (*DebugOptions) ProtoMessage()               {}
func (*DebugOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DebugOptions) GetXlaGenerateHloGraph() string {
	if m != nil {
		return m.XlaGenerateHloGraph
	}
	return ""
}

func (m *DebugOptions) GetXlaDisableHloPasses() []string {
	if m != nil {
		return m.XlaDisableHloPasses
	}
	return nil
}

func (m *DebugOptions) GetXlaBackendOptimizationLevel() int32 {
	if m != nil {
		return m.XlaBackendOptimizationLevel
	}
	return 0
}

func (m *DebugOptions) GetXlaEnableFastMath() bool {
	if m != nil {
		return m.XlaEnableFastMath
	}
	return false
}

func (m *DebugOptions) GetXlaEmbedIrInExecutable() bool {
	if m != nil {
		return m.XlaEmbedIrInExecutable
	}
	return false
}

func (m *DebugOptions) GetXlaDumpDebugJsonTo() string {
	if m != nil {
		return m.XlaDumpDebugJsonTo
	}
	return ""
}

func (m *DebugOptions) GetXlaGpuCudaDataDir() string {
	if m != nil {
		return m.XlaGpuCudaDataDir
	}
	return ""
}

func (m *DebugOptions) GetXlaGpuFtz() bool {
	if m != nil {
		return m.XlaGpuFtz
	}
	return false
}

func (m *DebugOptions) GetXlaBackendExtraOptions() map[string]string {
	if m != nil {
		return m.XlaBackendExtraOptions
	}
	return nil
}

// These settings control how XLA compiles and/or runs code.  Not all settings
// will have an effect on every platform.
//
// When adding new fields, keep in mind that boolean fields default to false.
type ExecutionOptions struct {
	// This optional field's layout is used as a hint when storing the output of
	// this computation.  Subsequent transfers of this output array to the client
	// may be faster when using this layout.
	//
	// We use a Shape here to accommodate computations that return a tuple.
	ShapeWithOutputLayout *Shape `protobuf:"bytes,2,opt,name=shape_with_output_layout,json=shapeWithOutputLayout" json:"shape_with_output_layout,omitempty"`
	// Used to seed random-number generators used in this computation.  If this is
	// 0, we generate a seed ourselves.
	//
	// TODO(b/32083678): Changing the seed unnecessarily forces a recompilation.
	Seed         uint64        `protobuf:"varint,3,opt,name=seed" json:"seed,omitempty"`
	DebugOptions *DebugOptions `protobuf:"bytes,4,opt,name=debug_options,json=debugOptions" json:"debug_options,omitempty"`
}

func (m *ExecutionOptions) Reset()                    { *m = ExecutionOptions{} }
func (m *ExecutionOptions) String() string            { return proto.CompactTextString(m) }
func (*ExecutionOptions) ProtoMessage()               {}
func (*ExecutionOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExecutionOptions) GetShapeWithOutputLayout() *Shape {
	if m != nil {
		return m.ShapeWithOutputLayout
	}
	return nil
}

func (m *ExecutionOptions) GetSeed() uint64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *ExecutionOptions) GetDebugOptions() *DebugOptions {
	if m != nil {
		return m.DebugOptions
	}
	return nil
}

type SnapshotComputationRequest struct {
	Computation *ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
}

func (m *SnapshotComputationRequest) Reset()                    { *m = SnapshotComputationRequest{} }
func (m *SnapshotComputationRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotComputationRequest) ProtoMessage()               {}
func (*SnapshotComputationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SnapshotComputationRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

type SnapshotComputationResponse struct {
	Module *xla1.SessionModule `protobuf:"bytes,1,opt,name=module" json:"module,omitempty"`
}

func (m *SnapshotComputationResponse) Reset()                    { *m = SnapshotComputationResponse{} }
func (m *SnapshotComputationResponse) String() string            { return proto.CompactTextString(m) }
func (*SnapshotComputationResponse) ProtoMessage()               {}
func (*SnapshotComputationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SnapshotComputationResponse) GetModule() *xla1.SessionModule {
	if m != nil {
		return m.Module
	}
	return nil
}

type LoadComputationSnapshotRequest struct {
	Module *xla1.SessionModule `protobuf:"bytes,1,opt,name=module" json:"module,omitempty"`
}

func (m *LoadComputationSnapshotRequest) Reset()                    { *m = LoadComputationSnapshotRequest{} }
func (m *LoadComputationSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadComputationSnapshotRequest) ProtoMessage()               {}
func (*LoadComputationSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoadComputationSnapshotRequest) GetModule() *xla1.SessionModule {
	if m != nil {
		return m.Module
	}
	return nil
}

type LoadComputationSnapshotResponse struct {
	Computation *ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
}

func (m *LoadComputationSnapshotResponse) Reset()                    { *m = LoadComputationSnapshotResponse{} }
func (m *LoadComputationSnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*LoadComputationSnapshotResponse) ProtoMessage()               {}
func (*LoadComputationSnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoadComputationSnapshotResponse) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

type GetDeviceHandlesRequest struct {
	DeviceCount int64 `protobuf:"varint,1,opt,name=device_count,json=deviceCount" json:"device_count,omitempty"`
}

func (m *GetDeviceHandlesRequest) Reset()                    { *m = GetDeviceHandlesRequest{} }
func (m *GetDeviceHandlesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceHandlesRequest) ProtoMessage()               {}
func (*GetDeviceHandlesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetDeviceHandlesRequest) GetDeviceCount() int64 {
	if m != nil {
		return m.DeviceCount
	}
	return 0
}

type GetDeviceHandlesResponse struct {
	DeviceHandles []*DeviceHandle `protobuf:"bytes,1,rep,name=device_handles,json=deviceHandles" json:"device_handles,omitempty"`
}

func (m *GetDeviceHandlesResponse) Reset()                    { *m = GetDeviceHandlesResponse{} }
func (m *GetDeviceHandlesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDeviceHandlesResponse) ProtoMessage()               {}
func (*GetDeviceHandlesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetDeviceHandlesResponse) GetDeviceHandles() []*DeviceHandle {
	if m != nil {
		return m.DeviceHandles
	}
	return nil
}

type TransferToClientRequest struct {
	Data *GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	// This optional field directs the service to return the literal in this
	// layout. A shape is used to hold the layout to accommodate tuples.
	ShapeWithLayout *Shape `protobuf:"bytes,2,opt,name=shape_with_layout,json=shapeWithLayout" json:"shape_with_layout,omitempty"`
}

func (m *TransferToClientRequest) Reset()                    { *m = TransferToClientRequest{} }
func (m *TransferToClientRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferToClientRequest) ProtoMessage()               {}
func (*TransferToClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TransferToClientRequest) GetData() *GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransferToClientRequest) GetShapeWithLayout() *Shape {
	if m != nil {
		return m.ShapeWithLayout
	}
	return nil
}

type TransferToClientResponse struct {
	Literal *LiteralProto `protobuf:"bytes,1,opt,name=literal" json:"literal,omitempty"`
}

func (m *TransferToClientResponse) Reset()                    { *m = TransferToClientResponse{} }
func (m *TransferToClientResponse) String() string            { return proto.CompactTextString(m) }
func (*TransferToClientResponse) ProtoMessage()               {}
func (*TransferToClientResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TransferToClientResponse) GetLiteral() *LiteralProto {
	if m != nil {
		return m.Literal
	}
	return nil
}

type TransferToServerRequest struct {
	Literal      *LiteralProto `protobuf:"bytes,1,opt,name=literal" json:"literal,omitempty"`
	DeviceHandle *DeviceHandle `protobuf:"bytes,2,opt,name=device_handle,json=deviceHandle" json:"device_handle,omitempty"`
}

func (m *TransferToServerRequest) Reset()                    { *m = TransferToServerRequest{} }
func (m *TransferToServerRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferToServerRequest) ProtoMessage()               {}
func (*TransferToServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TransferToServerRequest) GetLiteral() *LiteralProto {
	if m != nil {
		return m.Literal
	}
	return nil
}

func (m *TransferToServerRequest) GetDeviceHandle() *DeviceHandle {
	if m != nil {
		return m.DeviceHandle
	}
	return nil
}

type TransferToServerResponse struct {
	Data *GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *TransferToServerResponse) Reset()                    { *m = TransferToServerResponse{} }
func (m *TransferToServerResponse) String() string            { return proto.CompactTextString(m) }
func (*TransferToServerResponse) ProtoMessage()               {}
func (*TransferToServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TransferToServerResponse) GetData() *GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

type TransferToInfeedRequest struct {
	Literal      *LiteralProto `protobuf:"bytes,1,opt,name=literal" json:"literal,omitempty"`
	ReplicaId    int64         `protobuf:"varint,2,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	DeviceHandle *DeviceHandle `protobuf:"bytes,3,opt,name=device_handle,json=deviceHandle" json:"device_handle,omitempty"`
}

func (m *TransferToInfeedRequest) Reset()                    { *m = TransferToInfeedRequest{} }
func (m *TransferToInfeedRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferToInfeedRequest) ProtoMessage()               {}
func (*TransferToInfeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TransferToInfeedRequest) GetLiteral() *LiteralProto {
	if m != nil {
		return m.Literal
	}
	return nil
}

func (m *TransferToInfeedRequest) GetReplicaId() int64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *TransferToInfeedRequest) GetDeviceHandle() *DeviceHandle {
	if m != nil {
		return m.DeviceHandle
	}
	return nil
}

type TransferToInfeedResponse struct {
}

func (m *TransferToInfeedResponse) Reset()                    { *m = TransferToInfeedResponse{} }
func (m *TransferToInfeedResponse) String() string            { return proto.CompactTextString(m) }
func (*TransferToInfeedResponse) ProtoMessage()               {}
func (*TransferToInfeedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type TransferFromOutfeedRequest struct {
	// This optional field directs the service to return the literal in this
	// layout. A shape is used to hold the layout to accommodate tuples.
	ShapeWithLayout *Shape        `protobuf:"bytes,1,opt,name=shape_with_layout,json=shapeWithLayout" json:"shape_with_layout,omitempty"`
	ReplicaId       int64         `protobuf:"varint,2,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	DeviceHandle    *DeviceHandle `protobuf:"bytes,3,opt,name=device_handle,json=deviceHandle" json:"device_handle,omitempty"`
}

func (m *TransferFromOutfeedRequest) Reset()                    { *m = TransferFromOutfeedRequest{} }
func (m *TransferFromOutfeedRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferFromOutfeedRequest) ProtoMessage()               {}
func (*TransferFromOutfeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TransferFromOutfeedRequest) GetShapeWithLayout() *Shape {
	if m != nil {
		return m.ShapeWithLayout
	}
	return nil
}

func (m *TransferFromOutfeedRequest) GetReplicaId() int64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *TransferFromOutfeedRequest) GetDeviceHandle() *DeviceHandle {
	if m != nil {
		return m.DeviceHandle
	}
	return nil
}

type TransferFromOutfeedResponse struct {
	Literal *LiteralProto `protobuf:"bytes,1,opt,name=literal" json:"literal,omitempty"`
}

func (m *TransferFromOutfeedResponse) Reset()                    { *m = TransferFromOutfeedResponse{} }
func (m *TransferFromOutfeedResponse) String() string            { return proto.CompactTextString(m) }
func (*TransferFromOutfeedResponse) ProtoMessage()               {}
func (*TransferFromOutfeedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TransferFromOutfeedResponse) GetLiteral() *LiteralProto {
	if m != nil {
		return m.Literal
	}
	return nil
}

type ResetDeviceRequest struct {
	DeviceHandle *DeviceHandle `protobuf:"bytes,1,opt,name=device_handle,json=deviceHandle" json:"device_handle,omitempty"`
}

func (m *ResetDeviceRequest) Reset()                    { *m = ResetDeviceRequest{} }
func (m *ResetDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetDeviceRequest) ProtoMessage()               {}
func (*ResetDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ResetDeviceRequest) GetDeviceHandle() *DeviceHandle {
	if m != nil {
		return m.DeviceHandle
	}
	return nil
}

type ResetDeviceResponse struct {
}

func (m *ResetDeviceResponse) Reset()                    { *m = ResetDeviceResponse{} }
func (m *ResetDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*ResetDeviceResponse) ProtoMessage()               {}
func (*ResetDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type ComputationStatsRequest struct {
	Computation *ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
}

func (m *ComputationStatsRequest) Reset()                    { *m = ComputationStatsRequest{} }
func (m *ComputationStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputationStatsRequest) ProtoMessage()               {}
func (*ComputationStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ComputationStatsRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

type ComputationStatsResponse struct {
	Stats *ComputationStats `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
}

func (m *ComputationStatsResponse) Reset()                    { *m = ComputationStatsResponse{} }
func (m *ComputationStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*ComputationStatsResponse) ProtoMessage()               {}
func (*ComputationStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ComputationStatsResponse) GetStats() *ComputationStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type ComputationRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ComputationRequest) Reset()                    { *m = ComputationRequest{} }
func (m *ComputationRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputationRequest) ProtoMessage()               {}
func (*ComputationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ComputationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ComputationResponse struct {
	Computation *ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
}

func (m *ComputationResponse) Reset()                    { *m = ComputationResponse{} }
func (m *ComputationResponse) String() string            { return proto.CompactTextString(m) }
func (*ComputationResponse) ProtoMessage()               {}
func (*ComputationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ComputationResponse) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

type CreateChannelHandleRequest struct {
}

func (m *CreateChannelHandleRequest) Reset()                    { *m = CreateChannelHandleRequest{} }
func (m *CreateChannelHandleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateChannelHandleRequest) ProtoMessage()               {}
func (*CreateChannelHandleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type CreateChannelHandleResponse struct {
	Channel *ChannelHandle `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *CreateChannelHandleResponse) Reset()                    { *m = CreateChannelHandleResponse{} }
func (m *CreateChannelHandleResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateChannelHandleResponse) ProtoMessage()               {}
func (*CreateChannelHandleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CreateChannelHandleResponse) GetChannel() *ChannelHandle {
	if m != nil {
		return m.Channel
	}
	return nil
}

type UnregisterRequest struct {
	Data *GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *UnregisterRequest) Reset()                    { *m = UnregisterRequest{} }
func (m *UnregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*UnregisterRequest) ProtoMessage()               {}
func (*UnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *UnregisterRequest) GetData() *GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

type UnregisterResponse struct {
}

func (m *UnregisterResponse) Reset()                    { *m = UnregisterResponse{} }
func (m *UnregisterResponse) String() string            { return proto.CompactTextString(m) }
func (*UnregisterResponse) ProtoMessage()               {}
func (*UnregisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type SetReturnValueRequest struct {
	Computation *ComputationHandle     `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Operand     *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
}

func (m *SetReturnValueRequest) Reset()                    { *m = SetReturnValueRequest{} }
func (m *SetReturnValueRequest) String() string            { return proto.CompactTextString(m) }
func (*SetReturnValueRequest) ProtoMessage()               {}
func (*SetReturnValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *SetReturnValueRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *SetReturnValueRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type SetReturnValueResponse struct {
}

func (m *SetReturnValueResponse) Reset()                    { *m = SetReturnValueResponse{} }
func (m *SetReturnValueResponse) String() string            { return proto.CompactTextString(m) }
func (*SetReturnValueResponse) ProtoMessage()               {}
func (*SetReturnValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type ExecuteRequest struct {
	Computation *ComputationHandle  `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Arguments   []*GlobalDataHandle `protobuf:"bytes,2,rep,name=arguments" json:"arguments,omitempty"`
	// This optional field specifies a particular device to run the computation.
	// If not provided, the default device will be chosen.
	DeviceHandle *DeviceHandle `protobuf:"bytes,5,opt,name=device_handle,json=deviceHandle" json:"device_handle,omitempty"`
	// Options that affect how XLA compiles and runs code to service this request.
	ExecutionOptions *ExecutionOptions `protobuf:"bytes,6,opt,name=execution_options,json=executionOptions" json:"execution_options,omitempty"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ExecuteRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *ExecuteRequest) GetArguments() []*GlobalDataHandle {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *ExecuteRequest) GetDeviceHandle() *DeviceHandle {
	if m != nil {
		return m.DeviceHandle
	}
	return nil
}

func (m *ExecuteRequest) GetExecutionOptions() *ExecutionOptions {
	if m != nil {
		return m.ExecutionOptions
	}
	return nil
}

type ExecuteParallelRequest struct {
	Requests []*ExecuteRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *ExecuteParallelRequest) Reset()                    { *m = ExecuteParallelRequest{} }
func (m *ExecuteParallelRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteParallelRequest) ProtoMessage()               {}
func (*ExecuteParallelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ExecuteParallelRequest) GetRequests() []*ExecuteRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type ExecuteResponse struct {
	Output  *GlobalDataHandle `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
	Profile *ExecutionProfile `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *ExecuteResponse) Reset()                    { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()               {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ExecuteResponse) GetOutput() *GlobalDataHandle {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ExecuteResponse) GetProfile() *ExecutionProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type ExecuteParallelResponse struct {
	Responses []*ExecuteResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *ExecuteParallelResponse) Reset()                    { *m = ExecuteParallelResponse{} }
func (m *ExecuteParallelResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteParallelResponse) ProtoMessage()               {}
func (*ExecuteParallelResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ExecuteParallelResponse) GetResponses() []*ExecuteResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type ExecuteAsyncRequest struct {
	Computation *ComputationHandle  `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Arguments   []*GlobalDataHandle `protobuf:"bytes,2,rep,name=arguments" json:"arguments,omitempty"`
	// Options that affect how XLA compiles and runs code to service this request.
	ExecutionOptions *ExecutionOptions `protobuf:"bytes,6,opt,name=execution_options,json=executionOptions" json:"execution_options,omitempty"`
}

func (m *ExecuteAsyncRequest) Reset()                    { *m = ExecuteAsyncRequest{} }
func (m *ExecuteAsyncRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteAsyncRequest) ProtoMessage()               {}
func (*ExecuteAsyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ExecuteAsyncRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *ExecuteAsyncRequest) GetArguments() []*GlobalDataHandle {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *ExecuteAsyncRequest) GetExecutionOptions() *ExecutionOptions {
	if m != nil {
		return m.ExecutionOptions
	}
	return nil
}

type ExecuteAsyncResponse struct {
	// A handle to the execution launched asynchronously.
	Execution *ExecutionHandle `protobuf:"bytes,1,opt,name=execution" json:"execution,omitempty"`
}

func (m *ExecuteAsyncResponse) Reset()                    { *m = ExecuteAsyncResponse{} }
func (m *ExecuteAsyncResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteAsyncResponse) ProtoMessage()               {}
func (*ExecuteAsyncResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ExecuteAsyncResponse) GetExecution() *ExecutionHandle {
	if m != nil {
		return m.Execution
	}
	return nil
}

type WaitForExecutionRequest struct {
	Execution *ExecutionHandle `protobuf:"bytes,1,opt,name=execution" json:"execution,omitempty"`
}

func (m *WaitForExecutionRequest) Reset()                    { *m = WaitForExecutionRequest{} }
func (m *WaitForExecutionRequest) String() string            { return proto.CompactTextString(m) }
func (*WaitForExecutionRequest) ProtoMessage()               {}
func (*WaitForExecutionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *WaitForExecutionRequest) GetExecution() *ExecutionHandle {
	if m != nil {
		return m.Execution
	}
	return nil
}

type WaitForExecutionResponse struct {
	Output  *GlobalDataHandle `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
	Profile *ExecutionProfile `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *WaitForExecutionResponse) Reset()                    { *m = WaitForExecutionResponse{} }
func (m *WaitForExecutionResponse) String() string            { return proto.CompactTextString(m) }
func (*WaitForExecutionResponse) ProtoMessage()               {}
func (*WaitForExecutionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *WaitForExecutionResponse) GetOutput() *GlobalDataHandle {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *WaitForExecutionResponse) GetProfile() *ExecutionProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type IsConstantRequest struct {
	Computation *ComputationHandle     `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Operand     *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
}

func (m *IsConstantRequest) Reset()                    { *m = IsConstantRequest{} }
func (m *IsConstantRequest) String() string            { return proto.CompactTextString(m) }
func (*IsConstantRequest) ProtoMessage()               {}
func (*IsConstantRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *IsConstantRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *IsConstantRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type IsConstantResponse struct {
	IsConstant bool `protobuf:"varint,1,opt,name=is_constant,json=isConstant" json:"is_constant,omitempty"`
}

func (m *IsConstantResponse) Reset()                    { *m = IsConstantResponse{} }
func (m *IsConstantResponse) String() string            { return proto.CompactTextString(m) }
func (*IsConstantResponse) ProtoMessage()               {}
func (*IsConstantResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *IsConstantResponse) GetIsConstant() bool {
	if m != nil {
		return m.IsConstant
	}
	return false
}

type ComputeConstantRequest struct {
	Computation  *ComputationHandle     `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Operand      *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	OutputLayout *Layout                `protobuf:"bytes,3,opt,name=output_layout,json=outputLayout" json:"output_layout,omitempty"`
}

func (m *ComputeConstantRequest) Reset()                    { *m = ComputeConstantRequest{} }
func (m *ComputeConstantRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputeConstantRequest) ProtoMessage()               {}
func (*ComputeConstantRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ComputeConstantRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *ComputeConstantRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ComputeConstantRequest) GetOutputLayout() *Layout {
	if m != nil {
		return m.OutputLayout
	}
	return nil
}

type ComputeConstantResponse struct {
	Output *GlobalDataHandle `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *ComputeConstantResponse) Reset()                    { *m = ComputeConstantResponse{} }
func (m *ComputeConstantResponse) String() string            { return proto.CompactTextString(m) }
func (*ComputeConstantResponse) ProtoMessage()               {}
func (*ComputeConstantResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ComputeConstantResponse) GetOutput() *GlobalDataHandle {
	if m != nil {
		return m.Output
	}
	return nil
}

type DeconstructTupleRequest struct {
	TupleHandle *GlobalDataHandle `protobuf:"bytes,2,opt,name=tuple_handle,json=tupleHandle" json:"tuple_handle,omitempty"`
}

func (m *DeconstructTupleRequest) Reset()                    { *m = DeconstructTupleRequest{} }
func (m *DeconstructTupleRequest) String() string            { return proto.CompactTextString(m) }
func (*DeconstructTupleRequest) ProtoMessage()               {}
func (*DeconstructTupleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *DeconstructTupleRequest) GetTupleHandle() *GlobalDataHandle {
	if m != nil {
		return m.TupleHandle
	}
	return nil
}

type DeconstructTupleResponse struct {
	ElementHandles []*GlobalDataHandle `protobuf:"bytes,1,rep,name=element_handles,json=elementHandles" json:"element_handles,omitempty"`
}

func (m *DeconstructTupleResponse) Reset()                    { *m = DeconstructTupleResponse{} }
func (m *DeconstructTupleResponse) String() string            { return proto.CompactTextString(m) }
func (*DeconstructTupleResponse) ProtoMessage()               {}
func (*DeconstructTupleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *DeconstructTupleResponse) GetElementHandles() []*GlobalDataHandle {
	if m != nil {
		return m.ElementHandles
	}
	return nil
}

type LoadDataRequest struct {
	// Describes the path of the ColumnIO tablet to load.
	ColumnioTabletPath string `protobuf:"bytes,1,opt,name=columnio_tablet_path,json=columnioTabletPath" json:"columnio_tablet_path,omitempty"`
	// Describes the field to load within the ColumnIO tablet.
	ColumnioField string `protobuf:"bytes,2,opt,name=columnio_field,json=columnioField" json:"columnio_field,omitempty"`
	// Individual element shape, excluding rows.
	ElementShape *Shape `protobuf:"bytes,3,opt,name=element_shape,json=elementShape" json:"element_shape,omitempty"`
	// Warning: ColumnIO does not support random-access, so use offset with
	// caution in performance-critical scenarios.
	Offset int64 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	// Maximum number of elements (with shape element_shape) to load.
	Limit int64 `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	// If more than one item is requested (via limit > 1), then this request
	// attribute zips together the produced vectors.
	Zip bool `protobuf:"varint,6,opt,name=zip" json:"zip,omitempty"`
}

func (m *LoadDataRequest) Reset()                    { *m = LoadDataRequest{} }
func (m *LoadDataRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadDataRequest) ProtoMessage()               {}
func (*LoadDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *LoadDataRequest) GetColumnioTabletPath() string {
	if m != nil {
		return m.ColumnioTabletPath
	}
	return ""
}

func (m *LoadDataRequest) GetColumnioField() string {
	if m != nil {
		return m.ColumnioField
	}
	return ""
}

func (m *LoadDataRequest) GetElementShape() *Shape {
	if m != nil {
		return m.ElementShape
	}
	return nil
}

func (m *LoadDataRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *LoadDataRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *LoadDataRequest) GetZip() bool {
	if m != nil {
		return m.Zip
	}
	return false
}

type LoadDataResponse struct {
	Data          *GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	DataShape     *Shape            `protobuf:"bytes,2,opt,name=data_shape,json=dataShape" json:"data_shape,omitempty"`
	AvailableRows int64             `protobuf:"varint,3,opt,name=available_rows,json=availableRows" json:"available_rows,omitempty"`
	RowsLoaded    int64             `protobuf:"varint,4,opt,name=rows_loaded,json=rowsLoaded" json:"rows_loaded,omitempty"`
	Nanoseconds   int64             `protobuf:"varint,5,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *LoadDataResponse) Reset()                    { *m = LoadDataResponse{} }
func (m *LoadDataResponse) String() string            { return proto.CompactTextString(m) }
func (*LoadDataResponse) ProtoMessage()               {}
func (*LoadDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *LoadDataResponse) GetData() *GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LoadDataResponse) GetDataShape() *Shape {
	if m != nil {
		return m.DataShape
	}
	return nil
}

func (m *LoadDataResponse) GetAvailableRows() int64 {
	if m != nil {
		return m.AvailableRows
	}
	return 0
}

func (m *LoadDataResponse) GetRowsLoaded() int64 {
	if m != nil {
		return m.RowsLoaded
	}
	return 0
}

func (m *LoadDataResponse) GetNanoseconds() int64 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type SpecializeRequest struct {
	Computation *ComputationHandle  `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Arguments   []*GlobalDataHandle `protobuf:"bytes,2,rep,name=arguments" json:"arguments,omitempty"`
}

func (m *SpecializeRequest) Reset()                    { *m = SpecializeRequest{} }
func (m *SpecializeRequest) String() string            { return proto.CompactTextString(m) }
func (*SpecializeRequest) ProtoMessage()               {}
func (*SpecializeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *SpecializeRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *SpecializeRequest) GetArguments() []*GlobalDataHandle {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type SpecializeResponse struct {
}

func (m *SpecializeResponse) Reset()                    { *m = SpecializeResponse{} }
func (m *SpecializeResponse) String() string            { return proto.CompactTextString(m) }
func (*SpecializeResponse) ProtoMessage()               {}
func (*SpecializeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

type GetShapeRequest struct {
	Data *GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetShapeRequest) Reset()                    { *m = GetShapeRequest{} }
func (m *GetShapeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetShapeRequest) ProtoMessage()               {}
func (*GetShapeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *GetShapeRequest) GetData() *GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetShapeResponse struct {
	Shape *Shape `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
}

func (m *GetShapeResponse) Reset()                    { *m = GetShapeResponse{} }
func (m *GetShapeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetShapeResponse) ProtoMessage()               {}
func (*GetShapeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *GetShapeResponse) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

type GetComputationShapeRequest struct {
	Computation *ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
}

func (m *GetComputationShapeRequest) Reset()                    { *m = GetComputationShapeRequest{} }
func (m *GetComputationShapeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetComputationShapeRequest) ProtoMessage()               {}
func (*GetComputationShapeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *GetComputationShapeRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

type GetComputationShapeResponse struct {
	ProgramShape *ProgramShape `protobuf:"bytes,1,opt,name=program_shape,json=programShape" json:"program_shape,omitempty"`
}

func (m *GetComputationShapeResponse) Reset()                    { *m = GetComputationShapeResponse{} }
func (m *GetComputationShapeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetComputationShapeResponse) ProtoMessage()               {}
func (*GetComputationShapeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *GetComputationShapeResponse) GetProgramShape() *ProgramShape {
	if m != nil {
		return m.ProgramShape
	}
	return nil
}

type UnpackRequest struct {
	Data *GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *UnpackRequest) Reset()                    { *m = UnpackRequest{} }
func (m *UnpackRequest) String() string            { return proto.CompactTextString(m) }
func (*UnpackRequest) ProtoMessage()               {}
func (*UnpackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *UnpackRequest) GetData() *GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

type UnpackResponse struct {
	TiedData []*GlobalDataHandle `protobuf:"bytes,1,rep,name=tied_data,json=tiedData" json:"tied_data,omitempty"`
}

func (m *UnpackResponse) Reset()                    { *m = UnpackResponse{} }
func (m *UnpackResponse) String() string            { return proto.CompactTextString(m) }
func (*UnpackResponse) ProtoMessage()               {}
func (*UnpackResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *UnpackResponse) GetTiedData() []*GlobalDataHandle {
	if m != nil {
		return m.TiedData
	}
	return nil
}

func init() {
	proto.RegisterType((*DebugOptions)(nil), "xla.DebugOptions")
	proto.RegisterType((*ExecutionOptions)(nil), "xla.ExecutionOptions")
	proto.RegisterType((*SnapshotComputationRequest)(nil), "xla.SnapshotComputationRequest")
	proto.RegisterType((*SnapshotComputationResponse)(nil), "xla.SnapshotComputationResponse")
	proto.RegisterType((*LoadComputationSnapshotRequest)(nil), "xla.LoadComputationSnapshotRequest")
	proto.RegisterType((*LoadComputationSnapshotResponse)(nil), "xla.LoadComputationSnapshotResponse")
	proto.RegisterType((*GetDeviceHandlesRequest)(nil), "xla.GetDeviceHandlesRequest")
	proto.RegisterType((*GetDeviceHandlesResponse)(nil), "xla.GetDeviceHandlesResponse")
	proto.RegisterType((*TransferToClientRequest)(nil), "xla.TransferToClientRequest")
	proto.RegisterType((*TransferToClientResponse)(nil), "xla.TransferToClientResponse")
	proto.RegisterType((*TransferToServerRequest)(nil), "xla.TransferToServerRequest")
	proto.RegisterType((*TransferToServerResponse)(nil), "xla.TransferToServerResponse")
	proto.RegisterType((*TransferToInfeedRequest)(nil), "xla.TransferToInfeedRequest")
	proto.RegisterType((*TransferToInfeedResponse)(nil), "xla.TransferToInfeedResponse")
	proto.RegisterType((*TransferFromOutfeedRequest)(nil), "xla.TransferFromOutfeedRequest")
	proto.RegisterType((*TransferFromOutfeedResponse)(nil), "xla.TransferFromOutfeedResponse")
	proto.RegisterType((*ResetDeviceRequest)(nil), "xla.ResetDeviceRequest")
	proto.RegisterType((*ResetDeviceResponse)(nil), "xla.ResetDeviceResponse")
	proto.RegisterType((*ComputationStatsRequest)(nil), "xla.ComputationStatsRequest")
	proto.RegisterType((*ComputationStatsResponse)(nil), "xla.ComputationStatsResponse")
	proto.RegisterType((*ComputationRequest)(nil), "xla.ComputationRequest")
	proto.RegisterType((*ComputationResponse)(nil), "xla.ComputationResponse")
	proto.RegisterType((*CreateChannelHandleRequest)(nil), "xla.CreateChannelHandleRequest")
	proto.RegisterType((*CreateChannelHandleResponse)(nil), "xla.CreateChannelHandleResponse")
	proto.RegisterType((*UnregisterRequest)(nil), "xla.UnregisterRequest")
	proto.RegisterType((*UnregisterResponse)(nil), "xla.UnregisterResponse")
	proto.RegisterType((*SetReturnValueRequest)(nil), "xla.SetReturnValueRequest")
	proto.RegisterType((*SetReturnValueResponse)(nil), "xla.SetReturnValueResponse")
	proto.RegisterType((*ExecuteRequest)(nil), "xla.ExecuteRequest")
	proto.RegisterType((*ExecuteParallelRequest)(nil), "xla.ExecuteParallelRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "xla.ExecuteResponse")
	proto.RegisterType((*ExecuteParallelResponse)(nil), "xla.ExecuteParallelResponse")
	proto.RegisterType((*ExecuteAsyncRequest)(nil), "xla.ExecuteAsyncRequest")
	proto.RegisterType((*ExecuteAsyncResponse)(nil), "xla.ExecuteAsyncResponse")
	proto.RegisterType((*WaitForExecutionRequest)(nil), "xla.WaitForExecutionRequest")
	proto.RegisterType((*WaitForExecutionResponse)(nil), "xla.WaitForExecutionResponse")
	proto.RegisterType((*IsConstantRequest)(nil), "xla.IsConstantRequest")
	proto.RegisterType((*IsConstantResponse)(nil), "xla.IsConstantResponse")
	proto.RegisterType((*ComputeConstantRequest)(nil), "xla.ComputeConstantRequest")
	proto.RegisterType((*ComputeConstantResponse)(nil), "xla.ComputeConstantResponse")
	proto.RegisterType((*DeconstructTupleRequest)(nil), "xla.DeconstructTupleRequest")
	proto.RegisterType((*DeconstructTupleResponse)(nil), "xla.DeconstructTupleResponse")
	proto.RegisterType((*LoadDataRequest)(nil), "xla.LoadDataRequest")
	proto.RegisterType((*LoadDataResponse)(nil), "xla.LoadDataResponse")
	proto.RegisterType((*SpecializeRequest)(nil), "xla.SpecializeRequest")
	proto.RegisterType((*SpecializeResponse)(nil), "xla.SpecializeResponse")
	proto.RegisterType((*GetShapeRequest)(nil), "xla.GetShapeRequest")
	proto.RegisterType((*GetShapeResponse)(nil), "xla.GetShapeResponse")
	proto.RegisterType((*GetComputationShapeRequest)(nil), "xla.GetComputationShapeRequest")
	proto.RegisterType((*GetComputationShapeResponse)(nil), "xla.GetComputationShapeResponse")
	proto.RegisterType((*UnpackRequest)(nil), "xla.UnpackRequest")
	proto.RegisterType((*UnpackResponse)(nil), "xla.UnpackResponse")
}

func init() { proto.RegisterFile("tensorflow/compiler/xla/xla.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1740 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdd, 0x6e, 0x1b, 0xb9,
	0x15, 0xc6, 0x44, 0xf2, 0xdf, 0x91, 0x7f, 0xe9, 0x9f, 0x4c, 0xe5, 0x36, 0xeb, 0x1d, 0x60, 0x0b,
	0x6f, 0x5b, 0x47, 0x81, 0xb3, 0x0d, 0x16, 0xc1, 0x62, 0x81, 0xc6, 0x7f, 0xb1, 0xeb, 0xc0, 0xc6,
	0xd8, 0xc9, 0x16, 0xdb, 0x8b, 0x01, 0xad, 0xa1, 0x24, 0xd6, 0x14, 0x39, 0x4b, 0x72, 0x1c, 0xdb,
	0x28, 0x7a, 0xd1, 0x5e, 0xf4, 0x29, 0x7a, 0xd5, 0xcb, 0xbe, 0x41, 0x1f, 0xa3, 0xe8, 0x5d, 0xef,
	0xfb, 0x04, 0x7d, 0x80, 0x82, 0x3f, 0x23, 0x8d, 0x2c, 0x39, 0x8d, 0xbd, 0xdb, 0xe4, 0x42, 0x80,
	0x78, 0xce, 0x77, 0xce, 0x9c, 0xef, 0xf0, 0x90, 0x3c, 0x24, 0x7c, 0xaa, 0x09, 0x57, 0x42, 0xb6,
	0x98, 0x78, 0xdb, 0x68, 0x8a, 0x6e, 0x46, 0x19, 0x91, 0x8d, 0x4b, 0x86, 0xcd, 0xef, 0x71, 0x26,
	0x85, 0x16, 0xa8, 0x72, 0xc9, 0x70, 0xfd, 0xa7, 0xef, 0xc0, 0x25, 0x29, 0xd6, 0x1e, 0x5c, 0xdf,
	0xb8, 0x0d, 0xa7, 0x88, 0xbc, 0xa0, 0x4d, 0xd2, 0x50, 0x44, 0x29, 0x2a, 0xb8, 0x83, 0x47, 0xff,
	0xae, 0xc2, 0xf4, 0x36, 0x39, 0xcb, 0xdb, 0x47, 0x99, 0xa6, 0x82, 0x2b, 0xf4, 0x14, 0x56, 0x8c,
	0xc7, 0x36, 0xe1, 0x44, 0x62, 0x4d, 0x92, 0x0e, 0x13, 0x49, 0x5b, 0xe2, 0xac, 0x13, 0x06, 0x6b,
	0xc1, 0xfa, 0x54, 0xbc, 0x78, 0xc9, 0xf0, 0x9e, 0x57, 0xbe, 0x64, 0x62, 0xcf, 0xa8, 0x0a, 0xa3,
	0x94, 0x2a, 0x7c, 0xc6, 0x9c, 0x4d, 0x86, 0x95, 0x22, 0x2a, 0x7c, 0xb0, 0x56, 0xf1, 0x46, 0xdb,
	0x4e, 0xf9, 0x92, 0x89, 0x63, 0xab, 0x42, 0x5b, 0xf0, 0xc8, 0x18, 0x9d, 0xe1, 0xe6, 0x39, 0xe1,
	0x69, 0x22, 0x32, 0x4d, 0xbb, 0xf4, 0x1a, 0x9b, 0x30, 0x12, 0x46, 0x2e, 0x08, 0x0b, 0x2b, 0x6b,
	0xc1, 0xfa, 0x58, 0xbc, 0x7a, 0xc9, 0xf0, 0x0b, 0x07, 0x3a, 0x2a, 0x61, 0x0e, 0x0d, 0x04, 0x35,
	0x60, 0xc9, 0x38, 0x21, 0xdc, 0x7e, 0xb8, 0x85, 0x95, 0x4e, 0xba, 0x58, 0x77, 0xc2, 0xea, 0x5a,
	0xb0, 0x3e, 0x19, 0x2f, 0x5c, 0x32, 0xbc, 0x63, 0x55, 0xbb, 0x58, 0xe9, 0x57, 0x58, 0x77, 0xd0,
	0x73, 0xa8, 0x5b, 0x83, 0xee, 0x19, 0x49, 0x13, 0x2a, 0x13, 0xca, 0x13, 0x72, 0x49, 0x9a, 0xb9,
	0x36, 0xa8, 0x70, 0xcc, 0x9a, 0x19, 0x32, 0x3b, 0x06, 0xb0, 0x2f, 0xf7, 0xf9, 0x4e, 0x4f, 0x8b,
	0x36, 0x3d, 0xcd, 0xbc, 0x9b, 0x25, 0xa9, 0x49, 0x5a, 0xf2, 0x3b, 0x25, 0x78, 0xa2, 0x45, 0x38,
	0x6e, 0x73, 0x83, 0x0c, 0xcd, 0xbc, 0x9b, 0xd9, 0x84, 0x1e, 0x28, 0xc1, 0x4f, 0x05, 0x7a, 0x02,
	0xcb, 0x36, 0x9f, 0x59, 0x9e, 0x34, 0xf3, 0xd4, 0x4d, 0x55, 0x92, 0x52, 0x19, 0x4e, 0x58, 0x13,
	0x13, 0xe1, 0x5e, 0x96, 0x6f, 0xe5, 0x29, 0xde, 0xc6, 0x1a, 0x6f, 0x53, 0x89, 0x1e, 0x41, 0xad,
	0xb0, 0x68, 0xe9, 0xeb, 0x70, 0xd2, 0x86, 0x34, 0xe5, 0x70, 0xbb, 0xfa, 0x1a, 0x51, 0xf8, 0x51,
	0x39, 0x6f, 0xe4, 0x52, 0x4b, 0x6c, 0xb3, 0x27, 0xb8, 0x0a, 0xff, 0x53, 0x59, 0xab, 0xac, 0xd7,
	0x36, 0x37, 0x1e, 0x9b, 0xf2, 0x29, 0x4f, 0xec, 0xe3, 0xdf, 0xf4, 0xb2, 0xb8, 0x63, 0x2c, 0xbc,
	0x78, 0x87, 0x6b, 0x79, 0x65, 0x09, 0x8f, 0x50, 0xd6, 0xf7, 0x61, 0xf5, 0x1d, 0x66, 0x68, 0x1e,
	0x2a, 0xe7, 0xe4, 0xca, 0x17, 0x86, 0xf9, 0x8b, 0x96, 0x60, 0xec, 0x02, 0xb3, 0x9c, 0x84, 0x0f,
	0xac, 0xcc, 0x0d, 0x9e, 0x3f, 0xf8, 0x32, 0x88, 0xfe, 0x1a, 0xc0, 0xbc, 0x4b, 0x25, 0x15, 0xbc,
	0x28, 0xb6, 0x2d, 0x08, 0x55, 0x07, 0x67, 0x24, 0x79, 0x4b, 0x75, 0x27, 0x11, 0xb9, 0xce, 0x72,
	0x9d, 0x30, 0x7c, 0x25, 0x72, 0x6d, 0x3d, 0xd4, 0x36, 0xc1, 0x12, 0x39, 0x31, 0xa0, 0x78, 0xd9,
	0x62, 0xbf, 0xa1, 0xba, 0x73, 0x64, 0x91, 0x87, 0x16, 0x88, 0x10, 0x54, 0x15, 0x21, 0xa9, 0xad,
	0x96, 0x6a, 0x6c, 0xff, 0xa3, 0x67, 0x30, 0xe3, 0x26, 0xa8, 0xc8, 0x4b, 0xd5, 0x7a, 0x5b, 0x18,
	0x4a, 0x4b, 0x3c, 0x9d, 0x96, 0x46, 0xd1, 0x1b, 0xa8, 0x9f, 0x70, 0x9c, 0xa9, 0x8e, 0xd0, 0x5b,
	0xa2, 0x9b, 0xe5, 0xda, 0x96, 0x5a, 0x4c, 0xbe, 0xcb, 0x89, 0xd2, 0xe8, 0x4b, 0xa8, 0x35, 0xfb,
	0x52, 0xcb, 0xbb, 0xb6, 0xb9, 0x62, 0x7d, 0x96, 0xd0, 0x2f, 0x31, 0x4f, 0x19, 0x89, 0xcb, 0xd0,
	0x68, 0x1f, 0x56, 0x47, 0xfa, 0x55, 0x99, 0xe0, 0x8a, 0xa0, 0x9f, 0xc1, 0x78, 0x57, 0xa4, 0x39,
	0x23, 0xde, 0x27, 0x72, 0xac, 0xdd, 0x4a, 0x7d, 0x65, 0x35, 0xb1, 0x47, 0x44, 0x87, 0xf0, 0xe8,
	0x50, 0xe0, 0xb4, 0xe4, 0xa6, 0xf0, 0x5c, 0x84, 0x79, 0x17, 0x6f, 0xbf, 0x85, 0x4f, 0x6e, 0xf5,
	0xe6, 0x83, 0xbb, 0x3f, 0xeb, 0xaf, 0xe0, 0xe1, 0x1e, 0xd1, 0xdb, 0xc4, 0xec, 0x3b, 0x4e, 0xaf,
	0x8a, 0x18, 0x3f, 0x85, 0xe9, 0xd4, 0xca, 0x93, 0xa6, 0xc8, 0xb9, 0xb6, 0x5e, 0x2b, 0x71, 0xcd,
	0xc9, 0xb6, 0x8c, 0x28, 0x3a, 0x85, 0x70, 0xd8, 0xba, 0x17, 0xd3, 0xac, 0x37, 0xef, 0x38, 0x4d,
	0x18, 0xd8, 0xba, 0x2f, 0x26, 0xb8, 0x6f, 0x13, 0xcf, 0xa4, 0x65, 0x0f, 0xd1, 0xef, 0xe1, 0xe1,
	0xa9, 0xc4, 0x5c, 0xb5, 0x88, 0x3c, 0x15, 0x5b, 0x8c, 0x12, 0xde, 0xcb, 0xdb, 0xe7, 0x50, 0x35,
	0xab, 0xd3, 0x33, 0x5c, 0xb6, 0xae, 0xf6, 0x98, 0x38, 0xc3, 0xcc, 0x2c, 0x4d, 0xef, 0xce, 0x42,
	0xd0, 0x33, 0x58, 0x28, 0x15, 0xee, 0xad, 0x15, 0x3b, 0xd7, 0xab, 0x58, 0x57, 0xab, 0xd1, 0x1e,
	0x84, 0xc3, 0x5f, 0xf7, 0x9c, 0x7e, 0x0e, 0x13, 0x8c, 0x6a, 0x22, 0x31, 0xf3, 0x11, 0x38, 0x32,
	0x87, 0x4e, 0x76, 0x6c, 0xb6, 0xeb, 0xb8, 0x40, 0x44, 0x7f, 0x28, 0xd3, 0x38, 0x21, 0xf2, 0x82,
	0xc8, 0x82, 0xc6, 0x5d, 0xfc, 0xb8, 0x85, 0x52, 0x4a, 0xa4, 0x27, 0x31, 0x22, 0x8f, 0xd3, 0xe5,
	0x3c, 0x46, 0x3b, 0x65, 0x22, 0xc5, 0xf7, 0x3d, 0x91, 0xf7, 0xcf, 0x63, 0xf4, 0x97, 0xa0, 0xcc,
	0x63, 0x9f, 0xb7, 0x08, 0x49, 0xef, 0xc5, 0xe3, 0x27, 0x00, 0x92, 0x64, 0x8c, 0x36, 0x71, 0x42,
	0x53, 0x4b, 0xa2, 0x12, 0x4f, 0x79, 0xc9, 0x7e, 0x3a, 0x4c, 0xb3, 0xf2, 0x7e, 0x34, 0xeb, 0x65,
	0x9a, 0x45, 0x78, 0x8e, 0x66, 0xf4, 0xb7, 0x00, 0xea, 0x85, 0x72, 0x57, 0x8a, 0xee, 0x51, 0xae,
	0xcb, 0xe1, 0x8f, 0x2c, 0x91, 0xe0, 0x7f, 0x96, 0xc8, 0xff, 0x8b, 0xc9, 0x01, 0xac, 0x8e, 0x0c,
	0xf6, 0x3e, 0xc5, 0x77, 0x08, 0x28, 0x26, 0xaa, 0x58, 0x9b, 0x7d, 0xc2, 0x37, 0x22, 0x0b, 0xde,
	0x2f, 0xb2, 0x65, 0x58, 0x1c, 0xf0, 0xe6, 0xd3, 0x7b, 0x02, 0x0f, 0xcb, 0xbb, 0x92, 0xc6, 0x5a,
	0x7d, 0xff, 0x7d, 0x78, 0x0f, 0xc2, 0x61, 0xa7, 0xbd, 0x14, 0x8c, 0x29, 0x23, 0x18, 0xa8, 0xdb,
	0x21, 0xb4, 0xc3, 0x44, 0xeb, 0x80, 0x46, 0x1c, 0x10, 0x08, 0xaa, 0x1c, 0x77, 0x89, 0x3f, 0x11,
	0xed, 0xff, 0xe8, 0x08, 0x16, 0x47, 0x6d, 0xf9, 0xf7, 0xe7, 0xf0, 0x63, 0xa8, 0x6f, 0x49, 0x82,
	0x35, 0xd9, 0xea, 0x60, 0xce, 0x09, 0xf3, 0x18, 0x17, 0x42, 0xf4, 0x6b, 0x58, 0x1d, 0xa9, 0xf5,
	0x9f, 0xfd, 0x05, 0x4c, 0x34, 0x9d, 0x62, 0xe0, 0x70, 0x18, 0x04, 0x17, 0x90, 0xe8, 0x6b, 0x58,
	0x78, 0xcd, 0x25, 0x69, 0x53, 0xa5, 0xfb, 0xfb, 0xcb, 0x1d, 0x96, 0xf7, 0x12, 0xa0, 0xb2, 0xbd,
	0x9f, 0xd9, 0x3f, 0x07, 0xb0, 0x7c, 0x42, 0x74, 0x4c, 0x74, 0x2e, 0xf9, 0x1b, 0xd3, 0x21, 0x7c,
	0xef, 0x89, 0x45, 0x5f, 0xc0, 0x84, 0xc8, 0x88, 0xc4, 0x3c, 0xf5, 0x3b, 0x58, 0xfd, 0xa6, 0x55,
	0x29, 0xb8, 0x02, 0x1a, 0x85, 0xb0, 0x72, 0x33, 0x90, 0x22, 0xc6, 0x07, 0x30, 0xeb, 0xda, 0x95,
	0x1f, 0x20, 0xb8, 0xa7, 0x30, 0x85, 0x65, 0x3b, 0xef, 0x12, 0xae, 0x5d, 0x47, 0x7c, 0x6b, 0xda,
	0xfa, 0xb8, 0xe1, 0xe5, 0x34, 0xf6, 0x5e, 0xcb, 0x09, 0xbd, 0x80, 0x05, 0x52, 0xf4, 0x59, 0xbd,
	0xf6, 0x67, 0xbc, 0x34, 0x57, 0x37, 0xbb, 0xb0, 0x78, 0x9e, 0xdc, 0x90, 0x1c, 0x54, 0x27, 0x2b,
	0xf3, 0xd5, 0x83, 0xea, 0x64, 0x75, 0x7e, 0x2c, 0xda, 0x87, 0x15, 0x9f, 0x88, 0x63, 0x2c, 0x31,
	0x63, 0x84, 0x15, 0x09, 0x69, 0xc0, 0xa4, 0x74, 0x7f, 0x8b, 0xe3, 0x77, 0xb1, 0xf4, 0x81, 0x22,
	0x6f, 0x71, 0x0f, 0x14, 0x7d, 0x07, 0x73, 0x3d, 0x9d, 0xaf, 0xc7, 0x0d, 0x18, 0x77, 0x6d, 0xdf,
	0xbb, 0xcb, 0xc9, 0x83, 0x50, 0x03, 0x26, 0x32, 0x29, 0x5a, 0xb4, 0x77, 0x50, 0xdd, 0xa0, 0x74,
	0xec, 0x94, 0x71, 0x81, 0x8a, 0x5e, 0xc1, 0xc3, 0xa1, 0xe8, 0xfd, 0xa7, 0x37, 0x61, 0x4a, 0xfa,
	0xff, 0x45, 0xfc, 0x4b, 0x83, 0xf1, 0x3b, 0x65, 0xdc, 0x87, 0x45, 0xff, 0x0c, 0x60, 0xd1, 0xab,
	0x7f, 0xa5, 0xae, 0x78, 0xf3, 0x23, 0xd5, 0xc6, 0x0f, 0x3d, 0xc7, 0x07, 0xb0, 0x34, 0xc8, 0xaa,
	0x9f, 0xa2, 0x9e, 0x9d, 0x27, 0xb5, 0x34, 0xe8, 0xbf, 0x88, 0xad, 0x07, 0x33, 0x19, 0xff, 0x06,
	0x53, 0xbd, 0x2b, 0x64, 0x0f, 0x54, 0x64, 0xe9, 0x3e, 0xee, 0xae, 0x21, 0x1c, 0x76, 0xf7, 0x81,
	0x8a, 0xe7, 0x4f, 0x01, 0x2c, 0xec, 0xab, 0x2d, 0xc1, 0x95, 0xc6, 0xfd, 0x36, 0xf1, 0x43, 0x6f,
	0x52, 0xbf, 0x04, 0x54, 0x0e, 0xc2, 0x73, 0xff, 0x04, 0x6a, 0x54, 0x25, 0x4d, 0x2f, 0xb6, 0x51,
	0x4c, 0xc6, 0x40, 0x7b, 0xc0, 0xe8, 0xef, 0x01, 0xac, 0x38, 0xcf, 0xe4, 0x23, 0x33, 0x40, 0x4f,
	0x60, 0x66, 0xf0, 0x6e, 0xe7, 0x7a, 0x96, 0x9a, 0x6b, 0x31, 0xac, 0x28, 0x9e, 0x16, 0xa5, 0x3b,
	0x5d, 0xf4, 0xb2, 0x38, 0xfc, 0xc9, 0x10, 0xf1, 0xbb, 0x4d, 0xba, 0x69, 0x23, 0xb6, 0x89, 0x4d,
	0x93, 0xcc, 0x9b, 0xfa, 0x34, 0xcf, 0x58, 0x69, 0x43, 0x9f, 0xd6, 0x66, 0x3c, 0xd8, 0xfa, 0xde,
	0xe2, 0xaf, 0x66, 0xa1, 0xbe, 0x65, 0xf9, 0x16, 0xc2, 0x61, 0xa7, 0x3e, 0xbe, 0xaf, 0x61, 0x8e,
	0x30, 0x62, 0xd6, 0xe9, 0x8d, 0xbb, 0xc9, 0x2d, 0x8e, 0x67, 0x3d, 0xba, 0xb8, 0xa0, 0xfc, 0x2b,
	0x80, 0x39, 0x73, 0x25, 0x33, 0x90, 0x22, 0xd2, 0x27, 0xb0, 0xd4, 0x14, 0x2c, 0xef, 0x72, 0x2a,
	0x12, 0xfb, 0x14, 0xa1, 0x93, 0x0c, 0xeb, 0xe2, 0x49, 0x06, 0x15, 0xba, 0x53, 0xab, 0x3a, 0xc6,
	0xba, 0x83, 0x3e, 0x83, 0xd9, 0x9e, 0x45, 0x8b, 0x12, 0x96, 0xfa, 0x1b, 0xf9, 0x4c, 0x21, 0xdd,
	0x35, 0x42, 0xd4, 0x80, 0x99, 0x22, 0x58, 0xdb, 0x87, 0xfa, 0x99, 0x29, 0x37, 0xa8, 0xd3, 0x1e,
	0x60, 0x47, 0x68, 0x05, 0xc6, 0x45, 0xab, 0xa5, 0x88, 0xb6, 0x37, 0xea, 0x4a, 0xec, 0x47, 0xe6,
	0xe2, 0xcf, 0x68, 0x97, 0x6a, 0x7b, 0x4a, 0x55, 0x62, 0x37, 0x40, 0xf3, 0x50, 0xb9, 0xa6, 0x99,
	0xdd, 0x99, 0x26, 0x63, 0xf3, 0x37, 0xfa, 0x47, 0x00, 0xf3, 0x7d, 0x76, 0x77, 0xbe, 0x30, 0xa0,
	0xcf, 0x01, 0xec, 0x0b, 0x8a, 0x8b, 0x76, 0xf8, 0xc6, 0x35, 0x65, 0xb4, 0x2e, 0xd4, 0xcf, 0x60,
	0x16, 0x5f, 0x60, 0xca, 0xec, 0xcb, 0x90, 0x14, 0x6f, 0x95, 0x25, 0x57, 0x89, 0x67, 0x7a, 0xd2,
	0x58, 0xbc, 0x55, 0x66, 0x21, 0x19, 0x65, 0xc2, 0x04, 0x4e, 0x49, 0xea, 0x69, 0x81, 0x11, 0x1d,
	0x5a, 0x09, 0x5a, 0x83, 0x1a, 0xc7, 0x5c, 0x28, 0x33, 0xe1, 0xa9, 0xf2, 0x04, 0xcb, 0xa2, 0xe8,
	0x8f, 0x01, 0x2c, 0x9c, 0x64, 0xa4, 0x49, 0x31, 0xa3, 0xd7, 0x1f, 0xa9, 0x5f, 0x30, 0xbd, 0x56,
	0x39, 0x06, 0xdf, 0xc7, 0x7c, 0x05, 0x73, 0x7b, 0xc4, 0xcd, 0xdd, 0x3d, 0xfa, 0xb7, 0x2f, 0x60,
	0xbe, 0x6f, 0xed, 0x27, 0x6b, 0x0d, 0xc6, 0x5c, 0xf2, 0x87, 0xef, 0x32, 0x4e, 0x11, 0xbd, 0x81,
	0xfa, 0x1e, 0x29, 0xbf, 0x73, 0x0c, 0x7c, 0xfe, 0xfe, 0x8d, 0xef, 0x6b, 0x58, 0x1d, 0xe9, 0xd7,
	0x07, 0xf6, 0x0c, 0x66, 0x32, 0x29, 0xda, 0x12, 0x77, 0x93, 0x72, 0x80, 0xae, 0x61, 0x3a, 0x76,
	0x1a, 0x5f, 0xd2, 0x59, 0x69, 0x14, 0x3d, 0x87, 0x99, 0xd7, 0x3c, 0xc3, 0xcd, 0xf3, 0x7b, 0x24,
	0x68, 0x1b, 0x66, 0x0b, 0xdb, 0xfe, 0x91, 0xa9, 0x29, 0x49, 0x13, 0xef, 0xe1, 0x1d, 0x73, 0x37,
	0x69, 0x70, 0x66, 0xfc, 0x62, 0xfb, 0xdb, 0x17, 0x6d, 0xaa, 0x3b, 0xf9, 0xd9, 0xe3, 0xa6, 0xe8,
	0x36, 0x52, 0x49, 0xae, 0xce, 0x1b, 0xfd, 0x67, 0xdc, 0x0d, 0xfb, 0x72, 0xcb, 0xdb, 0x1b, 0x6d,
	0xd1, 0xc8, 0xce, 0xdb, 0x8d, 0x5b, 0x1e, 0x78, 0xcf, 0xc6, 0xed, 0x8b, 0xee, 0xd3, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xbf, 0x4e, 0xbb, 0x1b, 0x52, 0x16, 0x00, 0x00,
}
