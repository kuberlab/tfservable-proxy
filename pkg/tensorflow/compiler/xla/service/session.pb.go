// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/compiler/xla/service/session.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import xla "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/compiler/xla"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Describes a single operation request.
type OperationRequest struct {
	OutputHandle *xla.ComputationDataHandle `protobuf:"bytes,1,opt,name=output_handle,json=outputHandle" json:"output_handle,omitempty"`
	OutputShape  *xla.Shape                 `protobuf:"bytes,2,opt,name=output_shape,json=outputShape" json:"output_shape,omitempty"`
	// For operations which call embedded computations such as "Map", these are
	// the version(s) that the embedded computation should be called at. A version
	// value of a computation is the ComputationDataHandle of the root of the
	// computation at the point in time.
	//
	// "Call", "Map", "Reduce", and "ReduceWindow" operations take a single
	// embedded computation so this field will have a single value for those
	// operations.
	//
	// "While" operation takes two; index 0 is the "condition" version and index 1
	// is the "body" version.
	EmbeddedComputationVersions []int64 `protobuf:"varint,3,rep,packed,name=embedded_computation_versions,json=embeddedComputationVersions" json:"embedded_computation_versions,omitempty"`
	// The actual request, which in itself is a tagged union of all possible
	// operation request types.
	Request *xla.OpRequest `protobuf:"bytes,4,opt,name=request" json:"request,omitempty"`
}

func (m *OperationRequest) Reset()                    { *m = OperationRequest{} }
func (m *OperationRequest) String() string            { return proto.CompactTextString(m) }
func (*OperationRequest) ProtoMessage()               {}
func (*OperationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *OperationRequest) GetOutputHandle() *xla.ComputationDataHandle {
	if m != nil {
		return m.OutputHandle
	}
	return nil
}

func (m *OperationRequest) GetOutputShape() *xla.Shape {
	if m != nil {
		return m.OutputShape
	}
	return nil
}

func (m *OperationRequest) GetEmbeddedComputationVersions() []int64 {
	if m != nil {
		return m.EmbeddedComputationVersions
	}
	return nil
}

func (m *OperationRequest) GetRequest() *xla.OpRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// Describes a sequence of operation requests which define an XLA
// computation.
type SessionComputation struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The ComputationHandle used to refer to this computation in the XLA
	// service.
	ComputationHandle *xla.ComputationHandle `protobuf:"bytes,2,opt,name=computation_handle,json=computationHandle" json:"computation_handle,omitempty"`
	// Map from ComputationDataHandle value to operation request. The highest
	// ComputationDataHandle value corresponds to the root of the computation.
	Requests map[int64]*OperationRequest `protobuf:"bytes,3,rep,name=requests" json:"requests,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SessionComputation) Reset()                    { *m = SessionComputation{} }
func (m *SessionComputation) String() string            { return proto.CompactTextString(m) }
func (*SessionComputation) ProtoMessage()               {}
func (*SessionComputation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SessionComputation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SessionComputation) GetComputationHandle() *xla.ComputationHandle {
	if m != nil {
		return m.ComputationHandle
	}
	return nil
}

func (m *SessionComputation) GetRequests() map[int64]*OperationRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// Describes a group of SessionComputations with an "entry point" computation
// that may refer to the other non-entry (AKA embedded) computations.
//
// This message is used to serialize a computation that has been built via the
// XLA service API, along with its dependencies, for purposes such as
// analysis/replay/file-storage.
type SessionModule struct {
	// The entry computation, which was requested for serialization. This may have
	// referred to embedded computations, which are reflected below.
	Entry *SessionComputation `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	// Embedded computations that are transitively referred to by the entry
	// computation.
	EmbeddedComputations []*SessionComputation `protobuf:"bytes,2,rep,name=embedded_computations,json=embeddedComputations" json:"embedded_computations,omitempty"`
	// The arguments passed to the computation.
	Arguments []*xla.LiteralProto `protobuf:"bytes,3,rep,name=arguments" json:"arguments,omitempty"`
	// The result of the computation.
	Result *xla.LiteralProto `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	// The name of the platform used to run the computation.
	ExecutionPlatform string `protobuf:"bytes,5,opt,name=execution_platform,json=executionPlatform" json:"execution_platform,omitempty"`
}

func (m *SessionModule) Reset()                    { *m = SessionModule{} }
func (m *SessionModule) String() string            { return proto.CompactTextString(m) }
func (*SessionModule) ProtoMessage()               {}
func (*SessionModule) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SessionModule) GetEntry() *SessionComputation {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *SessionModule) GetEmbeddedComputations() []*SessionComputation {
	if m != nil {
		return m.EmbeddedComputations
	}
	return nil
}

func (m *SessionModule) GetArguments() []*xla.LiteralProto {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *SessionModule) GetResult() *xla.LiteralProto {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SessionModule) GetExecutionPlatform() string {
	if m != nil {
		return m.ExecutionPlatform
	}
	return ""
}

func init() {
	proto.RegisterType((*OperationRequest)(nil), "xla.OperationRequest")
	proto.RegisterType((*SessionComputation)(nil), "xla.SessionComputation")
	proto.RegisterType((*SessionModule)(nil), "xla.SessionModule")
}

func init() { proto.RegisterFile("tensorflow/compiler/xla/service/session.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0xa6, 0xc9, 0x76, 0x75, 0xa7, 0x56, 0xb6, 0x83, 0xab, 0xa1, 0x22, 0x2c, 0x05, 0xa5, 0x22,
	0x49, 0x60, 0xbd, 0x11, 0x6f, 0xc4, 0xd5, 0x05, 0x91, 0xca, 0x2e, 0xb3, 0xe0, 0x85, 0x37, 0x61,
	0x9a, 0x9c, 0x4d, 0x43, 0x27, 0x99, 0x38, 0x3f, 0x35, 0x7d, 0x01, 0x5f, 0xc1, 0xd7, 0xf4, 0x11,
	0x24, 0x33, 0xd3, 0x9f, 0x5d, 0x5b, 0xf6, 0x2e, 0x33, 0xe7, 0x3b, 0x67, 0xbe, 0x9f, 0x1c, 0x14,
	0x2a, 0xa8, 0x24, 0x17, 0x37, 0x8c, 0xff, 0x8a, 0x53, 0x5e, 0xd6, 0x05, 0x03, 0x11, 0x37, 0x8c,
	0xc6, 0x12, 0xc4, 0xa2, 0x48, 0x21, 0x96, 0x20, 0x65, 0xc1, 0xab, 0xa8, 0x16, 0x5c, 0x71, 0xec,
	0x37, 0x8c, 0x0e, 0x5f, 0xed, 0xeb, 0x69, 0x18, 0x4d, 0x32, 0xaa, 0xa8, 0x05, 0x8f, 0xfe, 0x76,
	0xd0, 0xf1, 0x65, 0x0d, 0x82, 0xaa, 0x82, 0x57, 0x04, 0x7e, 0x6a, 0x90, 0x0a, 0x7f, 0x40, 0x7d,
	0xae, 0x55, 0xad, 0x55, 0x32, 0xa3, 0x55, 0xc6, 0x20, 0xe8, 0x9c, 0x76, 0xc6, 0xbd, 0xb3, 0x61,
	0xd4, 0x30, 0x1a, 0x7d, 0xe2, 0x65, 0xad, 0x95, 0xc1, 0x7f, 0xa6, 0x8a, 0x7e, 0x31, 0x08, 0xf2,
	0xc8, 0x36, 0xd8, 0x13, 0x0e, 0x91, 0x3b, 0x27, 0x72, 0x46, 0x6b, 0x08, 0x3c, 0xd3, 0x8f, 0x4c,
	0xff, 0x75, 0x7b, 0x43, 0x7a, 0xb6, 0x6e, 0x0e, 0xf8, 0x1c, 0xbd, 0x80, 0x72, 0x0a, 0x59, 0x06,
	0x59, 0x92, 0x6e, 0xc6, 0x27, 0x0b, 0x10, 0xad, 0x2e, 0x19, 0xf8, 0xa7, 0xfe, 0xd8, 0x27, 0xcf,
	0x57, 0xa0, 0x2d, 0x0a, 0xdf, 0x1d, 0x04, 0x8f, 0xd1, 0x03, 0x61, 0xe9, 0x07, 0x07, 0xe6, 0xb5,
	0xc7, 0xe6, 0xb5, 0xcb, 0xda, 0x89, 0x22, 0xab, 0xf2, 0xe8, 0xb7, 0x87, 0xf0, 0xb5, 0x75, 0x6c,
	0x6b, 0x10, 0xc6, 0xe8, 0xa0, 0xa2, 0xa5, 0xd5, 0x7a, 0x44, 0xcc, 0x37, 0xbe, 0x40, 0x78, 0x9b,
	0x8f, 0x73, 0xc3, 0xaa, 0x79, 0x7a, 0xd7, 0x0d, 0xe7, 0xc4, 0x20, 0xbd, 0x7b, 0x85, 0x3f, 0xa2,
	0x87, 0xee, 0x71, 0x2b, 0xa5, 0x77, 0xf6, 0xd2, 0x5a, 0xf1, 0x1f, 0x8b, 0xc8, 0xb1, 0x95, 0x17,
	0x95, 0x12, 0x4b, 0xb2, 0x6e, 0x1b, 0x12, 0xd4, 0xbf, 0x55, 0xc2, 0xc7, 0xc8, 0x9f, 0xc3, 0xd2,
	0xb0, 0xf5, 0x49, 0xfb, 0x89, 0xdf, 0xa0, 0xee, 0x82, 0x32, 0xbd, 0xe2, 0x77, 0xe2, 0xf4, 0xdf,
	0xce, 0x96, 0x58, 0xcc, 0x7b, 0xef, 0x5d, 0x67, 0xf4, 0xc7, 0x43, 0x7d, 0x47, 0xe1, 0x1b, 0xcf,
	0xb4, 0xc9, 0xad, 0x0b, 0xed, 0x74, 0x17, 0xf8, 0xb3, 0x3d, 0x2c, 0x89, 0x45, 0xe1, 0x09, 0x3a,
	0xd9, 0x95, 0x9b, 0x0c, 0x3c, 0x23, 0x72, 0x6f, 0xfb, 0x93, 0x1d, 0x41, 0x4a, 0x1c, 0xa3, 0x23,
	0x2a, 0x72, 0x5d, 0x42, 0xb5, 0xb6, 0x69, 0x60, 0x26, 0x4c, 0x0a, 0x05, 0x82, 0xb2, 0xab, 0xf6,
	0x87, 0x25, 0x1b, 0x0c, 0x7e, 0x8d, 0x0e, 0x05, 0x48, 0xcd, 0x56, 0x89, 0xef, 0x40, 0x3b, 0x00,
	0x0e, 0x11, 0x86, 0x06, 0x52, 0x6d, 0x62, 0xac, 0x19, 0x55, 0x37, 0x5c, 0x94, 0x41, 0xd7, 0x44,
	0x3d, 0x58, 0x57, 0xae, 0x5c, 0xe1, 0x7c, 0xf2, 0xe3, 0x6b, 0x5e, 0xa8, 0x99, 0x9e, 0x46, 0x29,
	0x2f, 0xe3, 0x4c, 0xc0, 0x72, 0x1e, 0x6f, 0x16, 0x2a, 0x34, 0x7b, 0x57, 0xe5, 0x61, 0xce, 0xe3,
	0x7a, 0x9e, 0xc7, 0xf7, 0xac, 0xe7, 0xf4, 0xd0, 0xac, 0xda, 0xdb, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x3a, 0xb4, 0xce, 0x21, 0xc8, 0x03, 0x00, 0x00,
}
