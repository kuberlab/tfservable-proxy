// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/python/framework/cpp_shape_inference.proto

/*
Package framework is a generated protocol buffer package.

It is generated from these files:
	tensorflow/python/framework/cpp_shape_inference.proto

It has these top-level messages:
	CppShapeInferenceResult
	CppShapeInferenceInputsNeeded
*/
package framework

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/framework"
import tensorflow1 "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/framework"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CppShapeInferenceResult struct {
	Shape      *tensorflow1.TensorShapeProto       `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
	HandleData *CppShapeInferenceResult_HandleData `protobuf:"bytes,4,opt,name=handle_data,json=handleData" json:"handle_data,omitempty"`
}

func (m *CppShapeInferenceResult) Reset()                    { *m = CppShapeInferenceResult{} }
func (m *CppShapeInferenceResult) String() string            { return proto.CompactTextString(m) }
func (*CppShapeInferenceResult) ProtoMessage()               {}
func (*CppShapeInferenceResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CppShapeInferenceResult) GetShape() *tensorflow1.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *CppShapeInferenceResult) GetHandleData() *CppShapeInferenceResult_HandleData {
	if m != nil {
		return m.HandleData
	}
	return nil
}

type CppShapeInferenceResult_HandleShapeAndType struct {
	Shape *tensorflow1.TensorShapeProto `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
	Dtype tensorflow.DataType           `protobuf:"varint,2,opt,name=dtype,enum=tensorflow.DataType" json:"dtype,omitempty"`
}

func (m *CppShapeInferenceResult_HandleShapeAndType) Reset() {
	*m = CppShapeInferenceResult_HandleShapeAndType{}
}
func (m *CppShapeInferenceResult_HandleShapeAndType) String() string {
	return proto.CompactTextString(m)
}
func (*CppShapeInferenceResult_HandleShapeAndType) ProtoMessage() {}
func (*CppShapeInferenceResult_HandleShapeAndType) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

func (m *CppShapeInferenceResult_HandleShapeAndType) GetShape() *tensorflow1.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *CppShapeInferenceResult_HandleShapeAndType) GetDtype() tensorflow.DataType {
	if m != nil {
		return m.Dtype
	}
	return tensorflow.DataType_DT_INVALID
}

type CppShapeInferenceResult_HandleData struct {
	IsSet bool `protobuf:"varint,1,opt,name=is_set,json=isSet" json:"is_set,omitempty"`
	// Only valid if <is_set>.
	ShapeAndType []*CppShapeInferenceResult_HandleShapeAndType `protobuf:"bytes,2,rep,name=shape_and_type,json=shapeAndType" json:"shape_and_type,omitempty"`
}

func (m *CppShapeInferenceResult_HandleData) Reset()         { *m = CppShapeInferenceResult_HandleData{} }
func (m *CppShapeInferenceResult_HandleData) String() string { return proto.CompactTextString(m) }
func (*CppShapeInferenceResult_HandleData) ProtoMessage()    {}
func (*CppShapeInferenceResult_HandleData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1}
}

func (m *CppShapeInferenceResult_HandleData) GetIsSet() bool {
	if m != nil {
		return m.IsSet
	}
	return false
}

func (m *CppShapeInferenceResult_HandleData) GetShapeAndType() []*CppShapeInferenceResult_HandleShapeAndType {
	if m != nil {
		return m.ShapeAndType
	}
	return nil
}

type CppShapeInferenceInputsNeeded struct {
	InputTensorsNeeded         []int32 `protobuf:"varint,1,rep,packed,name=input_tensors_needed,json=inputTensorsNeeded" json:"input_tensors_needed,omitempty"`
	InputTensorsAsShapesNeeded []int32 `protobuf:"varint,2,rep,packed,name=input_tensors_as_shapes_needed,json=inputTensorsAsShapesNeeded" json:"input_tensors_as_shapes_needed,omitempty"`
}

func (m *CppShapeInferenceInputsNeeded) Reset()                    { *m = CppShapeInferenceInputsNeeded{} }
func (m *CppShapeInferenceInputsNeeded) String() string            { return proto.CompactTextString(m) }
func (*CppShapeInferenceInputsNeeded) ProtoMessage()               {}
func (*CppShapeInferenceInputsNeeded) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CppShapeInferenceInputsNeeded) GetInputTensorsNeeded() []int32 {
	if m != nil {
		return m.InputTensorsNeeded
	}
	return nil
}

func (m *CppShapeInferenceInputsNeeded) GetInputTensorsAsShapesNeeded() []int32 {
	if m != nil {
		return m.InputTensorsAsShapesNeeded
	}
	return nil
}

func init() {
	proto.RegisterType((*CppShapeInferenceResult)(nil), "tensorflow.CppShapeInferenceResult")
	proto.RegisterType((*CppShapeInferenceResult_HandleShapeAndType)(nil), "tensorflow.CppShapeInferenceResult.HandleShapeAndType")
	proto.RegisterType((*CppShapeInferenceResult_HandleData)(nil), "tensorflow.CppShapeInferenceResult.HandleData")
	proto.RegisterType((*CppShapeInferenceInputsNeeded)(nil), "tensorflow.CppShapeInferenceInputsNeeded")
}

func init() {
	proto.RegisterFile("tensorflow/python/framework/cpp_shape_inference.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x99, 0x26, 0x59, 0xca, 0x54, 0x96, 0x65, 0x58, 0x31, 0x04, 0x95, 0xb2, 0x20, 0x04,
	0x71, 0x13, 0x89, 0xe8, 0xfd, 0xae, 0x22, 0x6e, 0x05, 0x95, 0xb4, 0x57, 0x22, 0x84, 0x69, 0xe6,
	0x34, 0x09, 0x6d, 0x67, 0x86, 0x99, 0xa9, 0x25, 0x97, 0x3e, 0x84, 0x6f, 0xe0, 0x43, 0x7a, 0x29,
	0x99, 0xe9, 0x9f, 0x88, 0x58, 0xc4, 0xbb, 0xf9, 0xf3, 0xfd, 0xbe, 0xef, 0x9c, 0xc9, 0x09, 0x7e,
	0x69, 0x80, 0x6b, 0xa1, 0x16, 0x2b, 0xb1, 0x4d, 0x65, 0x6b, 0x6a, 0xc1, 0xd3, 0x85, 0xa2, 0x6b,
	0xd8, 0x0a, 0xb5, 0x4c, 0x4b, 0x29, 0x0b, 0x5d, 0x53, 0x09, 0x45, 0xc3, 0x17, 0xa0, 0x80, 0x97,
	0x90, 0x48, 0x25, 0x8c, 0x20, 0xf8, 0x88, 0x45, 0x4f, 0x7a, 0x16, 0xa5, 0x50, 0xd0, 0x33, 0x30,
	0xad, 0x04, 0xed, 0x90, 0xe8, 0xd9, 0x09, 0x99, 0xbd, 0x71, 0x51, 0x4e, 0x7d, 0xf5, 0xc3, 0xc3,
	0x0f, 0x5e, 0x4b, 0x39, 0xed, 0x8e, 0xee, 0xf6, 0xe1, 0x39, 0xe8, 0xcd, 0xca, 0x90, 0x0c, 0x07,
	0x56, 0x1a, 0xa2, 0x31, 0x8a, 0x47, 0xd9, 0xc3, 0xe4, 0xe8, 0x9c, 0xcc, 0xec, 0xd2, 0x62, 0x9f,
	0x3a, 0xa3, 0xdc, 0x49, 0xc9, 0x47, 0x3c, 0xaa, 0x29, 0x67, 0x2b, 0x28, 0x18, 0x35, 0x34, 0xf4,
	0x2d, 0x99, 0xf4, 0xc9, 0xbf, 0xa4, 0x25, 0xef, 0x2c, 0xf6, 0x86, 0x1a, 0x9a, 0xe3, 0xfa, 0xb0,
	0x8e, 0x0c, 0x26, 0xee, 0xc6, 0x42, 0x37, 0x9c, 0xcd, 0x5a, 0x09, 0xff, 0x55, 0xda, 0x53, 0x1c,
	0xb0, 0xee, 0xa1, 0xc2, 0xc1, 0x18, 0xc5, 0xe7, 0xd9, 0x65, 0x9f, 0xe9, 0xa2, 0x3a, 0xe3, 0xdc,
	0x49, 0xa2, 0x6f, 0x08, 0xe3, 0x63, 0x41, 0xe4, 0x3e, 0x3e, 0x6b, 0x74, 0xa1, 0xc1, 0xd8, 0xbc,
	0x61, 0x1e, 0x34, 0x7a, 0x0a, 0x86, 0x7c, 0xc1, 0xe7, 0xee, 0xb3, 0x51, 0xce, 0x8a, 0x9d, 0xb5,
	0x17, 0x8f, 0xb2, 0x57, 0xff, 0xde, 0x6f, 0xbf, 0xab, 0xfc, 0x9e, 0xee, 0xed, 0x26, 0xfe, 0x70,
	0x70, 0xe1, 0x4d, 0xfc, 0xa1, 0x77, 0xe1, 0x5f, 0x7d, 0x47, 0xf8, 0xd1, 0x1f, 0x46, 0x77, 0x5c,
	0x6e, 0x8c, 0xfe, 0x00, 0xc0, 0x80, 0x91, 0xe7, 0xf8, 0xb2, 0xe9, 0xf6, 0x85, 0x8b, 0xd6, 0x05,
	0xb7, 0xe7, 0x21, 0x1a, 0x7b, 0x71, 0x90, 0x13, 0x7b, 0xe7, 0x5e, 0x66, 0x4f, 0xdc, 0xe2, 0xc7,
	0xbf, 0x13, 0x54, 0xbb, 0xd1, 0x38, 0xb0, 0x03, 0xcb, 0x46, 0x7d, 0xf6, 0x46, 0xdb, 0x1a, 0x76,
	0x1e, 0xb7, 0xef, 0x3f, 0xbf, 0xad, 0x1a, 0x53, 0x6f, 0xe6, 0x49, 0x29, 0xd6, 0x29, 0x53, 0xd0,
	0xee, 0xa7, 0xac, 0xeb, 0xfd, 0x5a, 0x83, 0xfa, 0xda, 0xf0, 0xea, 0xba, 0x12, 0xa9, 0x5c, 0x56,
	0xe9, 0x89, 0x7f, 0xe0, 0x27, 0x42, 0xf3, 0x33, 0x3b, 0x92, 0x2f, 0x7e, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x28, 0x97, 0xb7, 0xf9, 0x2c, 0x03, 0x00, 0x00,
}
