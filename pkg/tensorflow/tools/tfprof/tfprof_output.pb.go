// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/tools/tfprof/tfprof_output.proto

package tfprof

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/framework"
import tensorflow1 "github.com/kuberlab/tfservable-proxy/pkg/tensorflow/core/framework"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TFProfTensorProto struct {
	Dtype *tensorflow1.DataType `protobuf:"varint,1,opt,name=dtype,enum=tensorflow.DataType" json:"dtype,omitempty"`
	// Flatten tensor in row-major.
	// Only one of the following array is set.
	ValueDouble      []float64 `protobuf:"fixed64,2,rep,name=value_double,json=valueDouble" json:"value_double,omitempty"`
	ValueInt64       []int64   `protobuf:"varint,3,rep,name=value_int64,json=valueInt64" json:"value_int64,omitempty"`
	ValueStr         []string  `protobuf:"bytes,4,rep,name=value_str,json=valueStr" json:"value_str,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *TFProfTensorProto) Reset()                    { *m = TFProfTensorProto{} }
func (m *TFProfTensorProto) String() string            { return proto.CompactTextString(m) }
func (*TFProfTensorProto) ProtoMessage()               {}
func (*TFProfTensorProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *TFProfTensorProto) GetDtype() tensorflow1.DataType {
	if m != nil && m.Dtype != nil {
		return *m.Dtype
	}
	return tensorflow1.DataType_DT_INVALID
}

func (m *TFProfTensorProto) GetValueDouble() []float64 {
	if m != nil {
		return m.ValueDouble
	}
	return nil
}

func (m *TFProfTensorProto) GetValueInt64() []int64 {
	if m != nil {
		return m.ValueInt64
	}
	return nil
}

func (m *TFProfTensorProto) GetValueStr() []string {
	if m != nil {
		return m.ValueStr
	}
	return nil
}

// A node in TensorFlow graph. Used by scope/graph view.
type TFGraphNodeProto struct {
	// op name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// tensor value restored from checkpoint.
	TensorValue *TFProfTensorProto `protobuf:"bytes,15,opt,name=tensor_value,json=tensorValue" json:"tensor_value,omitempty"`
	// op execution time.
	ExecMicros            *int64 `protobuf:"varint,2,opt,name=exec_micros,json=execMicros" json:"exec_micros,omitempty"`
	AcceleratorExecMicros *int64 `protobuf:"varint,17,opt,name=accelerator_exec_micros,json=acceleratorExecMicros" json:"accelerator_exec_micros,omitempty"`
	CpuExecMicros         *int64 `protobuf:"varint,18,opt,name=cpu_exec_micros,json=cpuExecMicros" json:"cpu_exec_micros,omitempty"`
	// Total requested bytes by the op.
	RequestedBytes *int64 `protobuf:"varint,3,opt,name=requested_bytes,json=requestedBytes" json:"requested_bytes,omitempty"`
	// Number of parameters if available.
	Parameters *int64 `protobuf:"varint,4,opt,name=parameters" json:"parameters,omitempty"`
	// Number of float operations.
	FloatOps *int64 `protobuf:"varint,13,opt,name=float_ops,json=floatOps" json:"float_ops,omitempty"`
	// Device the op is assigned to.
	// Since an op can fire multiple kernel calls, there can be multiple devices.
	Devices []string `protobuf:"bytes,10,rep,name=devices" json:"devices,omitempty"`
	// The following are the aggregated stats from all accounted children and
	// the node itself. The actual children depend on the data structure used
	// (scope, graph).
	TotalExecMicros            *int64 `protobuf:"varint,6,opt,name=total_exec_micros,json=totalExecMicros" json:"total_exec_micros,omitempty"`
	TotalAcceleratorExecMicros *int64 `protobuf:"varint,19,opt,name=total_accelerator_exec_micros,json=totalAcceleratorExecMicros" json:"total_accelerator_exec_micros,omitempty"`
	TotalCpuExecMicros         *int64 `protobuf:"varint,20,opt,name=total_cpu_exec_micros,json=totalCpuExecMicros" json:"total_cpu_exec_micros,omitempty"`
	TotalRequestedBytes        *int64 `protobuf:"varint,7,opt,name=total_requested_bytes,json=totalRequestedBytes" json:"total_requested_bytes,omitempty"`
	TotalParameters            *int64 `protobuf:"varint,8,opt,name=total_parameters,json=totalParameters" json:"total_parameters,omitempty"`
	TotalFloatOps              *int64 `protobuf:"varint,14,opt,name=total_float_ops,json=totalFloatOps" json:"total_float_ops,omitempty"`
	// shape information, if available.
	// TODO(xpan): Why is this repeated?
	Shapes      []*tensorflow.TensorShapeProto         `protobuf:"bytes,11,rep,name=shapes" json:"shapes,omitempty"`
	InputShapes map[int32]*tensorflow.TensorShapeProto `protobuf:"bytes,16,rep,name=input_shapes,json=inputShapes" json:"input_shapes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Descendants of the graph. The actual descendants depend on the data
	// structure used (scope, graph).
	Children         []*TFGraphNodeProto `protobuf:"bytes,12,rep,name=children" json:"children,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *TFGraphNodeProto) Reset()                    { *m = TFGraphNodeProto{} }
func (m *TFGraphNodeProto) String() string            { return proto.CompactTextString(m) }
func (*TFGraphNodeProto) ProtoMessage()               {}
func (*TFGraphNodeProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TFGraphNodeProto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TFGraphNodeProto) GetTensorValue() *TFProfTensorProto {
	if m != nil {
		return m.TensorValue
	}
	return nil
}

func (m *TFGraphNodeProto) GetExecMicros() int64 {
	if m != nil && m.ExecMicros != nil {
		return *m.ExecMicros
	}
	return 0
}

func (m *TFGraphNodeProto) GetAcceleratorExecMicros() int64 {
	if m != nil && m.AcceleratorExecMicros != nil {
		return *m.AcceleratorExecMicros
	}
	return 0
}

func (m *TFGraphNodeProto) GetCpuExecMicros() int64 {
	if m != nil && m.CpuExecMicros != nil {
		return *m.CpuExecMicros
	}
	return 0
}

func (m *TFGraphNodeProto) GetRequestedBytes() int64 {
	if m != nil && m.RequestedBytes != nil {
		return *m.RequestedBytes
	}
	return 0
}

func (m *TFGraphNodeProto) GetParameters() int64 {
	if m != nil && m.Parameters != nil {
		return *m.Parameters
	}
	return 0
}

func (m *TFGraphNodeProto) GetFloatOps() int64 {
	if m != nil && m.FloatOps != nil {
		return *m.FloatOps
	}
	return 0
}

func (m *TFGraphNodeProto) GetDevices() []string {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *TFGraphNodeProto) GetTotalExecMicros() int64 {
	if m != nil && m.TotalExecMicros != nil {
		return *m.TotalExecMicros
	}
	return 0
}

func (m *TFGraphNodeProto) GetTotalAcceleratorExecMicros() int64 {
	if m != nil && m.TotalAcceleratorExecMicros != nil {
		return *m.TotalAcceleratorExecMicros
	}
	return 0
}

func (m *TFGraphNodeProto) GetTotalCpuExecMicros() int64 {
	if m != nil && m.TotalCpuExecMicros != nil {
		return *m.TotalCpuExecMicros
	}
	return 0
}

func (m *TFGraphNodeProto) GetTotalRequestedBytes() int64 {
	if m != nil && m.TotalRequestedBytes != nil {
		return *m.TotalRequestedBytes
	}
	return 0
}

func (m *TFGraphNodeProto) GetTotalParameters() int64 {
	if m != nil && m.TotalParameters != nil {
		return *m.TotalParameters
	}
	return 0
}

func (m *TFGraphNodeProto) GetTotalFloatOps() int64 {
	if m != nil && m.TotalFloatOps != nil {
		return *m.TotalFloatOps
	}
	return 0
}

func (m *TFGraphNodeProto) GetShapes() []*tensorflow.TensorShapeProto {
	if m != nil {
		return m.Shapes
	}
	return nil
}

func (m *TFGraphNodeProto) GetInputShapes() map[int32]*tensorflow.TensorShapeProto {
	if m != nil {
		return m.InputShapes
	}
	return nil
}

func (m *TFGraphNodeProto) GetChildren() []*TFGraphNodeProto {
	if m != nil {
		return m.Children
	}
	return nil
}

// A node that groups multiple TFGraphNodeProto.
// Depending on the 'view', the semantics of the TFmultiGraphNodeProto
// is different:
// code view: A node groups all TensorFlow graph nodes created by the
//            Python code.
// op view:   A node groups all TensorFlow graph nodes that are of type
//            of the op (e.g. MatMul, Conv2D).
type TFMultiGraphNodeProto struct {
	// Name of the node.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// code execution time.
	ExecMicros            *int64 `protobuf:"varint,2,opt,name=exec_micros,json=execMicros" json:"exec_micros,omitempty"`
	AcceleratorExecMicros *int64 `protobuf:"varint,12,opt,name=accelerator_exec_micros,json=acceleratorExecMicros" json:"accelerator_exec_micros,omitempty"`
	CpuExecMicros         *int64 `protobuf:"varint,13,opt,name=cpu_exec_micros,json=cpuExecMicros" json:"cpu_exec_micros,omitempty"`
	// Total requested bytes by the code.
	RequestedBytes *int64 `protobuf:"varint,3,opt,name=requested_bytes,json=requestedBytes" json:"requested_bytes,omitempty"`
	// Number of parameters if available.
	Parameters *int64 `protobuf:"varint,4,opt,name=parameters" json:"parameters,omitempty"`
	// Number of float operations.
	FloatOps *int64 `protobuf:"varint,5,opt,name=float_ops,json=floatOps" json:"float_ops,omitempty"`
	// The following are the aggregated stats from descendants.
	// The actual descendants depend on the data structure used.
	TotalExecMicros            *int64 `protobuf:"varint,6,opt,name=total_exec_micros,json=totalExecMicros" json:"total_exec_micros,omitempty"`
	TotalAcceleratorExecMicros *int64 `protobuf:"varint,14,opt,name=total_accelerator_exec_micros,json=totalAcceleratorExecMicros" json:"total_accelerator_exec_micros,omitempty"`
	TotalCpuExecMicros         *int64 `protobuf:"varint,15,opt,name=total_cpu_exec_micros,json=totalCpuExecMicros" json:"total_cpu_exec_micros,omitempty"`
	TotalRequestedBytes        *int64 `protobuf:"varint,7,opt,name=total_requested_bytes,json=totalRequestedBytes" json:"total_requested_bytes,omitempty"`
	TotalParameters            *int64 `protobuf:"varint,8,opt,name=total_parameters,json=totalParameters" json:"total_parameters,omitempty"`
	TotalFloatOps              *int64 `protobuf:"varint,9,opt,name=total_float_ops,json=totalFloatOps" json:"total_float_ops,omitempty"`
	// TensorFlow graph nodes contained by the TFMultiGraphNodeProto.
	GraphNodes []*TFGraphNodeProto `protobuf:"bytes,10,rep,name=graph_nodes,json=graphNodes" json:"graph_nodes,omitempty"`
	// Descendants of the node. The actual descendants depend on the data
	// structure used.
	Children         []*TFMultiGraphNodeProto `protobuf:"bytes,11,rep,name=children" json:"children,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *TFMultiGraphNodeProto) Reset()                    { *m = TFMultiGraphNodeProto{} }
func (m *TFMultiGraphNodeProto) String() string            { return proto.CompactTextString(m) }
func (*TFMultiGraphNodeProto) ProtoMessage()               {}
func (*TFMultiGraphNodeProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *TFMultiGraphNodeProto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TFMultiGraphNodeProto) GetExecMicros() int64 {
	if m != nil && m.ExecMicros != nil {
		return *m.ExecMicros
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetAcceleratorExecMicros() int64 {
	if m != nil && m.AcceleratorExecMicros != nil {
		return *m.AcceleratorExecMicros
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetCpuExecMicros() int64 {
	if m != nil && m.CpuExecMicros != nil {
		return *m.CpuExecMicros
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetRequestedBytes() int64 {
	if m != nil && m.RequestedBytes != nil {
		return *m.RequestedBytes
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetParameters() int64 {
	if m != nil && m.Parameters != nil {
		return *m.Parameters
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetFloatOps() int64 {
	if m != nil && m.FloatOps != nil {
		return *m.FloatOps
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetTotalExecMicros() int64 {
	if m != nil && m.TotalExecMicros != nil {
		return *m.TotalExecMicros
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetTotalAcceleratorExecMicros() int64 {
	if m != nil && m.TotalAcceleratorExecMicros != nil {
		return *m.TotalAcceleratorExecMicros
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetTotalCpuExecMicros() int64 {
	if m != nil && m.TotalCpuExecMicros != nil {
		return *m.TotalCpuExecMicros
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetTotalRequestedBytes() int64 {
	if m != nil && m.TotalRequestedBytes != nil {
		return *m.TotalRequestedBytes
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetTotalParameters() int64 {
	if m != nil && m.TotalParameters != nil {
		return *m.TotalParameters
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetTotalFloatOps() int64 {
	if m != nil && m.TotalFloatOps != nil {
		return *m.TotalFloatOps
	}
	return 0
}

func (m *TFMultiGraphNodeProto) GetGraphNodes() []*TFGraphNodeProto {
	if m != nil {
		return m.GraphNodes
	}
	return nil
}

func (m *TFMultiGraphNodeProto) GetChildren() []*TFMultiGraphNodeProto {
	if m != nil {
		return m.Children
	}
	return nil
}

func init() {
	proto.RegisterType((*TFProfTensorProto)(nil), "tensorflow.tfprof.TFProfTensorProto")
	proto.RegisterType((*TFGraphNodeProto)(nil), "tensorflow.tfprof.TFGraphNodeProto")
	proto.RegisterType((*TFMultiGraphNodeProto)(nil), "tensorflow.tfprof.TFMultiGraphNodeProto")
}

func init() { proto.RegisterFile("tensorflow/tools/tfprof/tfprof_output.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xdd, 0x4e, 0xdb, 0x4c,
	0x10, 0x55, 0x62, 0x02, 0xc9, 0x24, 0xe4, 0x67, 0x01, 0x7d, 0x56, 0xbe, 0xfe, 0xa4, 0xb4, 0xa5,
	0x29, 0x2d, 0x89, 0x1a, 0x21, 0x54, 0xf5, 0xa6, 0x82, 0x86, 0x20, 0x2e, 0x68, 0x91, 0x89, 0x5a,
	0xa9, 0xaa, 0x64, 0x19, 0x7b, 0x93, 0x58, 0x38, 0x5e, 0x77, 0xbd, 0x86, 0xe6, 0x6d, 0xfa, 0x36,
	0xbc, 0x56, 0xb5, 0xb3, 0x09, 0x76, 0x42, 0x40, 0xf4, 0x47, 0x55, 0xaf, 0x62, 0x9f, 0x39, 0x67,
	0x3c, 0x7b, 0x3c, 0x27, 0x86, 0x17, 0x82, 0xfa, 0x21, 0xe3, 0x3d, 0x8f, 0x5d, 0x34, 0x05, 0x63,
	0x5e, 0xd8, 0x14, 0xbd, 0x80, 0xb3, 0xde, 0xf8, 0xc7, 0x64, 0x91, 0x08, 0x22, 0xd1, 0x08, 0x38,
	0x13, 0x8c, 0x54, 0x62, 0x72, 0x43, 0xd5, 0xab, 0x2f, 0x13, 0x7a, 0x9b, 0x71, 0xda, 0xec, 0x71,
	0x6b, 0x48, 0x2f, 0x18, 0x3f, 0x6b, 0xaa, 0x8a, 0x19, 0x0e, 0xac, 0x80, 0xaa, 0x06, 0xd5, 0xa7,
	0xb7, 0xb0, 0x47, 0x01, 0x0d, 0x15, 0x6d, 0xfd, 0x7b, 0x0a, 0x2a, 0xdd, 0xce, 0x31, 0x67, 0xbd,
	0x2e, 0xf2, 0x8f, 0xf1, 0xe9, 0x9b, 0x90, 0x71, 0x24, 0x4b, 0x4f, 0xd5, 0x52, 0xf5, 0x62, 0x6b,
	0xb5, 0x91, 0x98, 0xa6, 0x6d, 0x09, 0xab, 0x3b, 0x0a, 0xa8, 0xa1, 0x28, 0xe4, 0x11, 0x14, 0xce,
	0x2d, 0x2f, 0xa2, 0xa6, 0xc3, 0xa2, 0x53, 0x8f, 0xea, 0xe9, 0x9a, 0x56, 0x4f, 0x19, 0x79, 0xc4,
	0xda, 0x08, 0x91, 0x87, 0xa0, 0x6e, 0x4d, 0xd7, 0x17, 0x3b, 0xdb, 0xba, 0x56, 0xd3, 0xea, 0x9a,
	0x01, 0x08, 0x1d, 0x4a, 0x84, 0xfc, 0x0f, 0x39, 0x45, 0x08, 0x05, 0xd7, 0x17, 0x6a, 0x5a, 0x3d,
	0x67, 0x64, 0x11, 0x38, 0x11, 0x7c, 0xfd, 0x72, 0x09, 0xca, 0xdd, 0xce, 0x01, 0xb7, 0x82, 0xc1,
	0x7b, 0xe6, 0x50, 0x35, 0x21, 0x81, 0x05, 0xdf, 0x1a, 0xaa, 0x01, 0x73, 0x06, 0x5e, 0x93, 0x03,
	0x28, 0x8c, 0x8d, 0x40, 0xad, 0x5e, 0xaa, 0xa5, 0xea, 0xf9, 0xd6, 0x93, 0xc6, 0x35, 0x2b, 0x1b,
	0xd7, 0x4e, 0x6c, 0xe4, 0x15, 0xe9, 0xa3, 0x14, 0xca, 0x79, 0xe9, 0x37, 0x6a, 0x9b, 0x43, 0xd7,
	0xe6, 0x2c, 0xd4, 0xd3, 0xb5, 0x94, 0x9c, 0x57, 0x42, 0x47, 0x88, 0x90, 0x1d, 0xf8, 0xcf, 0xb2,
	0x6d, 0xea, 0x51, 0x6e, 0x09, 0xc6, 0xcd, 0x24, 0xb9, 0x82, 0xe4, 0xb5, 0x44, 0x79, 0x3f, 0xd6,
	0x6d, 0x40, 0xc9, 0x0e, 0xa2, 0x29, 0x3e, 0x41, 0xfe, 0xb2, 0x1d, 0x44, 0x09, 0xde, 0x33, 0x28,
	0x71, 0xfa, 0x35, 0xa2, 0xa1, 0xa0, 0x8e, 0x79, 0x3a, 0x12, 0x34, 0xd4, 0x35, 0xe4, 0x15, 0xaf,
	0xe0, 0x3d, 0x89, 0x92, 0x07, 0x00, 0x81, 0x25, 0x5f, 0xac, 0xa0, 0x3c, 0xd4, 0x17, 0xd4, 0xa0,
	0x31, 0x22, 0x8d, 0xed, 0x79, 0xcc, 0x12, 0x26, 0x0b, 0x42, 0x7d, 0x19, 0xcb, 0x59, 0x04, 0x3e,
	0x04, 0x21, 0xd1, 0x61, 0xc9, 0xa1, 0xe7, 0xae, 0x4d, 0x43, 0x1d, 0xd0, 0xf3, 0xc9, 0x2d, 0xd9,
	0x84, 0x8a, 0x60, 0xc2, 0xf2, 0xa6, 0x26, 0x5d, 0x44, 0x79, 0x09, 0x0b, 0x89, 0x59, 0x77, 0xe1,
	0xbe, 0xe2, 0xde, 0xe4, 0xc8, 0x0a, 0xea, 0xaa, 0x48, 0xda, 0x9d, 0x6b, 0xcb, 0x2b, 0x58, 0x53,
	0x2d, 0x66, 0xcd, 0x59, 0x45, 0x29, 0xc1, 0xe2, 0xbb, 0x29, 0x87, 0x5a, 0x13, 0xc9, 0xac, 0x4f,
	0x4b, 0x28, 0x59, 0xc1, 0xa2, 0x31, 0x6d, 0xd6, 0x73, 0x28, 0x2b, 0x4d, 0xc2, 0xb2, 0x6c, 0xe2,
	0x50, 0xc7, 0xb1, 0x6f, 0x1b, 0xa0, 0x20, 0x33, 0x76, 0xaf, 0xa8, 0x5e, 0x14, 0xc2, 0x9d, 0x89,
	0x85, 0xdb, 0xb0, 0x88, 0xa1, 0x0b, 0xf5, 0x7c, 0x4d, 0xab, 0xe7, 0x5b, 0xf7, 0x92, 0xcb, 0xa6,
	0xf6, 0xeb, 0x44, 0xd6, 0xd5, 0x92, 0x8d, 0xb9, 0xe4, 0x13, 0x14, 0x5c, 0x3f, 0x88, 0x84, 0x39,
	0xd6, 0x96, 0x51, 0xbb, 0x3d, 0x77, 0x51, 0xa7, 0xf7, 0xbe, 0x71, 0x28, 0x75, 0xd8, 0x32, 0xdc,
	0xf7, 0x05, 0x1f, 0x19, 0x79, 0x37, 0x46, 0xc8, 0x5b, 0xc8, 0xda, 0x03, 0xd7, 0x73, 0x38, 0xf5,
	0xf5, 0x02, 0x36, 0x7d, 0x7c, 0x87, 0xa6, 0xc6, 0x95, 0xa8, 0xfa, 0x05, 0xca, 0xb3, 0x4f, 0x20,
	0x65, 0xd0, 0xce, 0xe8, 0x08, 0x93, 0x96, 0x31, 0xe4, 0x25, 0x69, 0x41, 0x46, 0x25, 0x2c, 0x8d,
	0x09, 0xbb, 0xfd, 0xd0, 0x8a, 0xfa, 0x26, 0xfd, 0x3a, 0xb5, 0x7e, 0x99, 0x81, 0xb5, 0x6e, 0xe7,
	0x28, 0xf2, 0x84, 0x7b, 0x87, 0x38, 0xff, 0x4e, 0x0a, 0x0b, 0x3f, 0x99, 0xc2, 0xe5, 0xbf, 0x97,
	0xc2, 0xcc, 0x4c, 0x0a, 0xff, 0x68, 0xd6, 0x8a, 0xbf, 0x9e, 0xb5, 0xd2, 0x3f, 0x94, 0xb5, 0xdc,
	0xbc, 0xac, 0xb5, 0x21, 0xdf, 0x97, 0x5b, 0x63, 0xfa, 0xcc, 0x19, 0xff, 0x65, 0xdd, 0x71, 0xbf,
	0xa1, 0x3f, 0xb9, 0x97, 0x5d, 0xe2, 0x88, 0xa8, 0xcc, 0xd6, 0xe7, 0xb6, 0x98, 0xb3, 0xa5, 0x71,
	0x4e, 0xf6, 0xda, 0x9f, 0xf7, 0xfa, 0xae, 0x18, 0x44, 0xa7, 0x0d, 0x9b, 0x0d, 0x9b, 0x0e, 0xa7,
	0xa3, 0xc9, 0x47, 0x58, 0x76, 0xd9, 0x0a, 0x29, 0x3f, 0x77, 0xfd, 0xfe, 0x56, 0x9f, 0x35, 0x83,
	0xb3, 0x7e, 0xf3, 0x86, 0x0f, 0xff, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xcb, 0xb3, 0xdc,
	0x12, 0x08, 0x00, 0x00,
}
