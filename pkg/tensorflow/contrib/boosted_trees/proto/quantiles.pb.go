// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/boosted_trees/proto/quantiles.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QuantileConfig struct {
	// Maximum eps error when computing quantile summaries.
	Eps float64 `protobuf:"fixed64,1,opt,name=eps" json:"eps,omitempty"`
	// Number of quantiles to generate.
	NumQuantiles int64 `protobuf:"varint,2,opt,name=num_quantiles,json=numQuantiles" json:"num_quantiles,omitempty"`
}

func (m *QuantileConfig) Reset()                    { *m = QuantileConfig{} }
func (m *QuantileConfig) String() string            { return proto1.CompactTextString(m) }
func (*QuantileConfig) ProtoMessage()               {}
func (*QuantileConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *QuantileConfig) GetEps() float64 {
	if m != nil {
		return m.Eps
	}
	return 0
}

func (m *QuantileConfig) GetNumQuantiles() int64 {
	if m != nil {
		return m.NumQuantiles
	}
	return 0
}

type QuantileEntry struct {
	// Value for the entry.
	Value float32 `protobuf:"fixed32,1,opt,name=value" json:"value,omitempty"`
	// Weight for the entry.
	Weight float32 `protobuf:"fixed32,2,opt,name=weight" json:"weight,omitempty"`
	// We need the minimum and maximum rank possible for this entry.
	// Rank is 0.0 for the absolute minimum and sum of the weights for the maximum
	// value in the input.
	MinRank float32 `protobuf:"fixed32,3,opt,name=min_rank,json=minRank" json:"min_rank,omitempty"`
	MaxRank float32 `protobuf:"fixed32,4,opt,name=max_rank,json=maxRank" json:"max_rank,omitempty"`
}

func (m *QuantileEntry) Reset()                    { *m = QuantileEntry{} }
func (m *QuantileEntry) String() string            { return proto1.CompactTextString(m) }
func (*QuantileEntry) ProtoMessage()               {}
func (*QuantileEntry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *QuantileEntry) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *QuantileEntry) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *QuantileEntry) GetMinRank() float32 {
	if m != nil {
		return m.MinRank
	}
	return 0
}

func (m *QuantileEntry) GetMaxRank() float32 {
	if m != nil {
		return m.MaxRank
	}
	return 0
}

type QuantileSummaryState struct {
	Entries []*QuantileEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *QuantileSummaryState) Reset()                    { *m = QuantileSummaryState{} }
func (m *QuantileSummaryState) String() string            { return proto1.CompactTextString(m) }
func (*QuantileSummaryState) ProtoMessage()               {}
func (*QuantileSummaryState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *QuantileSummaryState) GetEntries() []*QuantileEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type QuantileStreamState struct {
	Summaries []*QuantileSummaryState `protobuf:"bytes,1,rep,name=summaries" json:"summaries,omitempty"`
}

func (m *QuantileStreamState) Reset()                    { *m = QuantileStreamState{} }
func (m *QuantileStreamState) String() string            { return proto1.CompactTextString(m) }
func (*QuantileStreamState) ProtoMessage()               {}
func (*QuantileStreamState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *QuantileStreamState) GetSummaries() []*QuantileSummaryState {
	if m != nil {
		return m.Summaries
	}
	return nil
}

func init() {
	proto1.RegisterType((*QuantileConfig)(nil), "boosted_trees.QuantileConfig")
	proto1.RegisterType((*QuantileEntry)(nil), "boosted_trees.QuantileEntry")
	proto1.RegisterType((*QuantileSummaryState)(nil), "boosted_trees.QuantileSummaryState")
	proto1.RegisterType((*QuantileStreamState)(nil), "boosted_trees.QuantileStreamState")
}

func init() {
	proto1.RegisterFile("tensorflow/contrib/boosted_trees/proto/quantiles.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4b, 0x3b, 0x31,
	0x10, 0xc5, 0xd9, 0xee, 0xf7, 0xdb, 0x6a, 0xb4, 0x22, 0xb1, 0x48, 0x05, 0x0f, 0x65, 0x7b, 0xe9,
	0xa5, 0x1b, 0x50, 0xe8, 0x5d, 0x45, 0xbc, 0x09, 0x4d, 0x41, 0xc4, 0x4b, 0xc9, 0xb6, 0xd3, 0x6d,
	0xd8, 0x26, 0xa9, 0xc9, 0x6c, 0x7f, 0xfc, 0xe7, 0x1e, 0x65, 0xd3, 0x6e, 0xeb, 0x1e, 0x04, 0x6f,
	0xf3, 0x78, 0x6f, 0x3e, 0x99, 0xc9, 0x90, 0x01, 0x82, 0x76, 0xc6, 0xce, 0x16, 0x66, 0xcd, 0x26,
	0x46, 0xa3, 0x95, 0x09, 0x4b, 0x8c, 0x71, 0x08, 0xd3, 0x31, 0x5a, 0x00, 0xc7, 0x96, 0xd6, 0xa0,
	0x61, 0x9f, 0xb9, 0xd0, 0x28, 0x17, 0xe0, 0x62, 0xaf, 0x69, 0xb3, 0x12, 0x8a, 0x5e, 0xc8, 0xc5,
	0x70, 0x9f, 0x78, 0x32, 0x7a, 0x26, 0x53, 0x7a, 0x49, 0x42, 0x58, 0xba, 0x76, 0xd0, 0x09, 0x7a,
	0x01, 0x2f, 0x4a, 0xda, 0x25, 0x4d, 0x9d, 0xab, 0xf1, 0x81, 0xd4, 0xae, 0x75, 0x82, 0x5e, 0xc8,
	0xcf, 0x75, 0xae, 0xca, 0x5e, 0x17, 0x39, 0xd2, 0x2c, 0xc5, 0xb3, 0x46, 0xbb, 0xa5, 0x2d, 0xf2,
	0x7f, 0x25, 0x16, 0x39, 0x78, 0x52, 0x8d, 0xef, 0x04, 0xbd, 0x26, 0xf5, 0x35, 0xc8, 0x74, 0x8e,
	0x1e, 0x52, 0xe3, 0x7b, 0x45, 0x6f, 0xc8, 0x89, 0x92, 0x7a, 0x6c, 0x85, 0xce, 0xda, 0xa1, 0x77,
	0x1a, 0x4a, 0x6a, 0x2e, 0x74, 0xe6, 0x2d, 0xb1, 0xd9, 0x59, 0xff, 0xf6, 0x96, 0xd8, 0x14, 0x56,
	0xf4, 0x4a, 0x5a, 0xe5, 0xa3, 0xa3, 0x5c, 0x29, 0x61, 0xb7, 0x23, 0x14, 0x08, 0x74, 0x40, 0x1a,
	0x50, 0x7c, 0x09, 0x14, 0x7b, 0x84, 0xbd, 0xb3, 0xbb, 0xdb, 0xb8, 0xb2, 0x76, 0x5c, 0x19, 0x95,
	0x97, 0xe1, 0xe8, 0x9d, 0x5c, 0x1d, 0x78, 0x68, 0x41, 0xa8, 0x1d, 0xee, 0x81, 0x9c, 0x3a, 0x8f,
	0x3f, 0x02, 0xbb, 0xbf, 0x00, 0x7f, 0x8e, 0xc1, 0x8f, 0x5d, 0x8f, 0x6f, 0x1f, 0xc3, 0x54, 0xe2,
	0x3c, 0x4f, 0xe2, 0x89, 0x51, 0x6c, 0x6a, 0x61, 0x9b, 0xb1, 0xe3, 0x05, 0xfb, 0x0e, 0xec, 0x4a,
	0xea, 0xb4, 0x9f, 0x1a, 0xb6, 0xcc, 0x52, 0xf6, 0xb7, 0xdb, 0x7e, 0x05, 0x41, 0x52, 0xf7, 0xd5,
	0xfd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x8f, 0x20, 0x70, 0x0f, 0x02, 0x00, 0x00,
}
