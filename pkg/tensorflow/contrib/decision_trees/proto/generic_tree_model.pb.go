// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/decision_trees/proto/generic_tree_model.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	tensorflow/contrib/decision_trees/proto/generic_tree_model.proto
	tensorflow/contrib/decision_trees/proto/generic_tree_model_extensions.proto

It has these top-level messages:
	Model
	ModelAndFeatures
	Ensemble
	Summation
	Averaging
	DecisionTree
	TreeNode
	BinaryNode
	SparseVector
	Vector
	Leaf
	FeatureId
	ObliqueFeatures
	InequalityTest
	Value
	MatchingValuesTest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type BinaryNode_Direction int32

const (
	BinaryNode_LEFT  BinaryNode_Direction = 0
	BinaryNode_RIGHT BinaryNode_Direction = 1
)

var BinaryNode_Direction_name = map[int32]string{
	0: "LEFT",
	1: "RIGHT",
}
var BinaryNode_Direction_value = map[string]int32{
	"LEFT":  0,
	"RIGHT": 1,
}

func (x BinaryNode_Direction) String() string {
	return proto1.EnumName(BinaryNode_Direction_name, int32(x))
}
func (BinaryNode_Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type InequalityTest_Type int32

const (
	InequalityTest_LESS_OR_EQUAL    InequalityTest_Type = 0
	InequalityTest_LESS_THAN        InequalityTest_Type = 1
	InequalityTest_GREATER_OR_EQUAL InequalityTest_Type = 2
	InequalityTest_GREATER_THAN     InequalityTest_Type = 3
)

var InequalityTest_Type_name = map[int32]string{
	0: "LESS_OR_EQUAL",
	1: "LESS_THAN",
	2: "GREATER_OR_EQUAL",
	3: "GREATER_THAN",
}
var InequalityTest_Type_value = map[string]int32{
	"LESS_OR_EQUAL":    0,
	"LESS_THAN":        1,
	"GREATER_OR_EQUAL": 2,
	"GREATER_THAN":     3,
}

func (x InequalityTest_Type) String() string {
	return proto1.EnumName(InequalityTest_Type_name, int32(x))
}
func (InequalityTest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 0} }

// A generic handle for any type of model.
type Model struct {
	// Types that are valid to be assigned to Model:
	//	*Model_DecisionTree
	//	*Model_Ensemble
	//	*Model_CustomModel
	Model          isModel_Model          `protobuf_oneof:"model"`
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,4,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Model) Reset()                    { *m = Model{} }
func (m *Model) String() string            { return proto1.CompactTextString(m) }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isModel_Model interface {
	isModel_Model()
}

type Model_DecisionTree struct {
	DecisionTree *DecisionTree `protobuf:"bytes,1,opt,name=decision_tree,json=decisionTree,oneof"`
}
type Model_Ensemble struct {
	Ensemble *Ensemble `protobuf:"bytes,2,opt,name=ensemble,oneof"`
}
type Model_CustomModel struct {
	CustomModel *google_protobuf.Any `protobuf:"bytes,3,opt,name=custom_model,json=customModel,oneof"`
}

func (*Model_DecisionTree) isModel_Model() {}
func (*Model_Ensemble) isModel_Model()     {}
func (*Model_CustomModel) isModel_Model()  {}

func (m *Model) GetModel() isModel_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Model) GetDecisionTree() *DecisionTree {
	if x, ok := m.GetModel().(*Model_DecisionTree); ok {
		return x.DecisionTree
	}
	return nil
}

func (m *Model) GetEnsemble() *Ensemble {
	if x, ok := m.GetModel().(*Model_Ensemble); ok {
		return x.Ensemble
	}
	return nil
}

func (m *Model) GetCustomModel() *google_protobuf.Any {
	if x, ok := m.GetModel().(*Model_CustomModel); ok {
		return x.CustomModel
	}
	return nil
}

func (m *Model) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Model) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Model_OneofMarshaler, _Model_OneofUnmarshaler, _Model_OneofSizer, []interface{}{
		(*Model_DecisionTree)(nil),
		(*Model_Ensemble)(nil),
		(*Model_CustomModel)(nil),
	}
}

func _Model_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Model)
	// model
	switch x := m.Model.(type) {
	case *Model_DecisionTree:
		b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.DecisionTree); err != nil {
			return err
		}
	case *Model_Ensemble:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Ensemble); err != nil {
			return err
		}
	case *Model_CustomModel:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CustomModel); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Model.Model has unexpected type %T", x)
	}
	return nil
}

func _Model_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Model)
	switch tag {
	case 1: // model.decision_tree
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(DecisionTree)
		err := b.DecodeMessage(msg)
		m.Model = &Model_DecisionTree{msg}
		return true, err
	case 2: // model.ensemble
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Ensemble)
		err := b.DecodeMessage(msg)
		m.Model = &Model_Ensemble{msg}
		return true, err
	case 3: // model.custom_model
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.Model = &Model_CustomModel{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Model_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Model)
	// model
	switch x := m.Model.(type) {
	case *Model_DecisionTree:
		s := proto1.Size(x.DecisionTree)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Model_Ensemble:
		s := proto1.Size(x.Ensemble)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Model_CustomModel:
		s := proto1.Size(x.CustomModel)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ModelAndFeatures struct {
	// Given a FeatureId feature_id, the feature's description is in
	// features[feature_id.id.value].
	Features       map[string]*ModelAndFeatures_Feature `protobuf:"bytes,1,rep,name=features" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Model          *Model                               `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	AdditionalData []*google_protobuf.Any               `protobuf:"bytes,3,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *ModelAndFeatures) Reset()                    { *m = ModelAndFeatures{} }
func (m *ModelAndFeatures) String() string            { return proto1.CompactTextString(m) }
func (*ModelAndFeatures) ProtoMessage()               {}
func (*ModelAndFeatures) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ModelAndFeatures) GetFeatures() map[string]*ModelAndFeatures_Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ModelAndFeatures) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *ModelAndFeatures) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type ModelAndFeatures_Feature struct {
	// TODO(jonasz): Remove this field, as it's confusing. Ctx: cr/153569450.
	FeatureId      *FeatureId             `protobuf:"bytes,1,opt,name=feature_id,json=featureId" json:"feature_id,omitempty"`
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,2,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *ModelAndFeatures_Feature) Reset()                    { *m = ModelAndFeatures_Feature{} }
func (m *ModelAndFeatures_Feature) String() string            { return proto1.CompactTextString(m) }
func (*ModelAndFeatures_Feature) ProtoMessage()               {}
func (*ModelAndFeatures_Feature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *ModelAndFeatures_Feature) GetFeatureId() *FeatureId {
	if m != nil {
		return m.FeatureId
	}
	return nil
}

func (m *ModelAndFeatures_Feature) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// An ordered sequence of models. This message can be used to express bagged or
// boosted models, as well as custom ensembles.
type Ensemble struct {
	Members []*Ensemble_Member `protobuf:"bytes,100,rep,name=members" json:"members,omitempty"`
	// The presence of a certain combination_technique indicates how to combine
	// the outputs of member models in order to compute the ensemble's output.
	//
	// Types that are valid to be assigned to CombinationTechnique:
	//	*Ensemble_SummationCombinationTechnique
	//	*Ensemble_AveragingCombinationTechnique
	//	*Ensemble_CustomCombinationTechnique
	CombinationTechnique isEnsemble_CombinationTechnique `protobuf_oneof:"combination_technique"`
	AdditionalData       []*google_protobuf.Any          `protobuf:"bytes,4,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Ensemble) Reset()                    { *m = Ensemble{} }
func (m *Ensemble) String() string            { return proto1.CompactTextString(m) }
func (*Ensemble) ProtoMessage()               {}
func (*Ensemble) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isEnsemble_CombinationTechnique interface {
	isEnsemble_CombinationTechnique()
}

type Ensemble_SummationCombinationTechnique struct {
	SummationCombinationTechnique *Summation `protobuf:"bytes,1,opt,name=summation_combination_technique,json=summationCombinationTechnique,oneof"`
}
type Ensemble_AveragingCombinationTechnique struct {
	AveragingCombinationTechnique *Averaging `protobuf:"bytes,2,opt,name=averaging_combination_technique,json=averagingCombinationTechnique,oneof"`
}
type Ensemble_CustomCombinationTechnique struct {
	CustomCombinationTechnique *google_protobuf.Any `protobuf:"bytes,3,opt,name=custom_combination_technique,json=customCombinationTechnique,oneof"`
}

func (*Ensemble_SummationCombinationTechnique) isEnsemble_CombinationTechnique() {}
func (*Ensemble_AveragingCombinationTechnique) isEnsemble_CombinationTechnique() {}
func (*Ensemble_CustomCombinationTechnique) isEnsemble_CombinationTechnique()    {}

func (m *Ensemble) GetCombinationTechnique() isEnsemble_CombinationTechnique {
	if m != nil {
		return m.CombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetMembers() []*Ensemble_Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Ensemble) GetSummationCombinationTechnique() *Summation {
	if x, ok := m.GetCombinationTechnique().(*Ensemble_SummationCombinationTechnique); ok {
		return x.SummationCombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetAveragingCombinationTechnique() *Averaging {
	if x, ok := m.GetCombinationTechnique().(*Ensemble_AveragingCombinationTechnique); ok {
		return x.AveragingCombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetCustomCombinationTechnique() *google_protobuf.Any {
	if x, ok := m.GetCombinationTechnique().(*Ensemble_CustomCombinationTechnique); ok {
		return x.CustomCombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Ensemble) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Ensemble_OneofMarshaler, _Ensemble_OneofUnmarshaler, _Ensemble_OneofSizer, []interface{}{
		(*Ensemble_SummationCombinationTechnique)(nil),
		(*Ensemble_AveragingCombinationTechnique)(nil),
		(*Ensemble_CustomCombinationTechnique)(nil),
	}
}

func _Ensemble_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Ensemble)
	// combination_technique
	switch x := m.CombinationTechnique.(type) {
	case *Ensemble_SummationCombinationTechnique:
		b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.SummationCombinationTechnique); err != nil {
			return err
		}
	case *Ensemble_AveragingCombinationTechnique:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.AveragingCombinationTechnique); err != nil {
			return err
		}
	case *Ensemble_CustomCombinationTechnique:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CustomCombinationTechnique); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Ensemble.CombinationTechnique has unexpected type %T", x)
	}
	return nil
}

func _Ensemble_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Ensemble)
	switch tag {
	case 1: // combination_technique.summation_combination_technique
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Summation)
		err := b.DecodeMessage(msg)
		m.CombinationTechnique = &Ensemble_SummationCombinationTechnique{msg}
		return true, err
	case 2: // combination_technique.averaging_combination_technique
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Averaging)
		err := b.DecodeMessage(msg)
		m.CombinationTechnique = &Ensemble_AveragingCombinationTechnique{msg}
		return true, err
	case 3: // combination_technique.custom_combination_technique
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.CombinationTechnique = &Ensemble_CustomCombinationTechnique{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Ensemble_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Ensemble)
	// combination_technique
	switch x := m.CombinationTechnique.(type) {
	case *Ensemble_SummationCombinationTechnique:
		s := proto1.Size(x.SummationCombinationTechnique)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Ensemble_AveragingCombinationTechnique:
		s := proto1.Size(x.AveragingCombinationTechnique)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Ensemble_CustomCombinationTechnique:
		s := proto1.Size(x.CustomCombinationTechnique)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Ensemble_Member struct {
	Submodel       *Model                       `protobuf:"bytes,1,opt,name=submodel" json:"submodel,omitempty"`
	SubmodelId     *google_protobuf1.Int32Value `protobuf:"bytes,2,opt,name=submodel_id,json=submodelId" json:"submodel_id,omitempty"`
	AdditionalData []*google_protobuf.Any       `protobuf:"bytes,3,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Ensemble_Member) Reset()                    { *m = Ensemble_Member{} }
func (m *Ensemble_Member) String() string            { return proto1.CompactTextString(m) }
func (*Ensemble_Member) ProtoMessage()               {}
func (*Ensemble_Member) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Ensemble_Member) GetSubmodel() *Model {
	if m != nil {
		return m.Submodel
	}
	return nil
}

func (m *Ensemble_Member) GetSubmodelId() *google_protobuf1.Int32Value {
	if m != nil {
		return m.SubmodelId
	}
	return nil
}

func (m *Ensemble_Member) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// When present, the Ensemble's output is the sum of member models' outputs.
type Summation struct {
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,1,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Summation) Reset()                    { *m = Summation{} }
func (m *Summation) String() string            { return proto1.CompactTextString(m) }
func (*Summation) ProtoMessage()               {}
func (*Summation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Summation) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// When present, the Ensemble's output is the average of member models' outputs.
type Averaging struct {
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,1,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Averaging) Reset()                    { *m = Averaging{} }
func (m *Averaging) String() string            { return proto1.CompactTextString(m) }
func (*Averaging) ProtoMessage()               {}
func (*Averaging) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Averaging) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type DecisionTree struct {
	Nodes          []*TreeNode            `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,2,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *DecisionTree) Reset()                    { *m = DecisionTree{} }
func (m *DecisionTree) String() string            { return proto1.CompactTextString(m) }
func (*DecisionTree) ProtoMessage()               {}
func (*DecisionTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DecisionTree) GetNodes() []*TreeNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DecisionTree) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type TreeNode struct {
	// Following fields are provided for convenience and better readability.
	// Filling them in is not required.
	NodeId      *google_protobuf1.Int32Value `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Depth       *google_protobuf1.Int32Value `protobuf:"bytes,2,opt,name=depth" json:"depth,omitempty"`
	SubtreeSize *google_protobuf1.Int32Value `protobuf:"bytes,3,opt,name=subtree_size,json=subtreeSize" json:"subtree_size,omitempty"`
	// Types that are valid to be assigned to NodeType:
	//	*TreeNode_BinaryNode
	//	*TreeNode_Leaf
	//	*TreeNode_CustomNodeType
	NodeType       isTreeNode_NodeType    `protobuf_oneof:"node_type"`
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,7,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *TreeNode) Reset()                    { *m = TreeNode{} }
func (m *TreeNode) String() string            { return proto1.CompactTextString(m) }
func (*TreeNode) ProtoMessage()               {}
func (*TreeNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isTreeNode_NodeType interface {
	isTreeNode_NodeType()
}

type TreeNode_BinaryNode struct {
	BinaryNode *BinaryNode `protobuf:"bytes,4,opt,name=binary_node,json=binaryNode,oneof"`
}
type TreeNode_Leaf struct {
	Leaf *Leaf `protobuf:"bytes,5,opt,name=leaf,oneof"`
}
type TreeNode_CustomNodeType struct {
	CustomNodeType *google_protobuf.Any `protobuf:"bytes,6,opt,name=custom_node_type,json=customNodeType,oneof"`
}

func (*TreeNode_BinaryNode) isTreeNode_NodeType()     {}
func (*TreeNode_Leaf) isTreeNode_NodeType()           {}
func (*TreeNode_CustomNodeType) isTreeNode_NodeType() {}

func (m *TreeNode) GetNodeType() isTreeNode_NodeType {
	if m != nil {
		return m.NodeType
	}
	return nil
}

func (m *TreeNode) GetNodeId() *google_protobuf1.Int32Value {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *TreeNode) GetDepth() *google_protobuf1.Int32Value {
	if m != nil {
		return m.Depth
	}
	return nil
}

func (m *TreeNode) GetSubtreeSize() *google_protobuf1.Int32Value {
	if m != nil {
		return m.SubtreeSize
	}
	return nil
}

func (m *TreeNode) GetBinaryNode() *BinaryNode {
	if x, ok := m.GetNodeType().(*TreeNode_BinaryNode); ok {
		return x.BinaryNode
	}
	return nil
}

func (m *TreeNode) GetLeaf() *Leaf {
	if x, ok := m.GetNodeType().(*TreeNode_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (m *TreeNode) GetCustomNodeType() *google_protobuf.Any {
	if x, ok := m.GetNodeType().(*TreeNode_CustomNodeType); ok {
		return x.CustomNodeType
	}
	return nil
}

func (m *TreeNode) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TreeNode) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _TreeNode_OneofMarshaler, _TreeNode_OneofUnmarshaler, _TreeNode_OneofSizer, []interface{}{
		(*TreeNode_BinaryNode)(nil),
		(*TreeNode_Leaf)(nil),
		(*TreeNode_CustomNodeType)(nil),
	}
}

func _TreeNode_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*TreeNode)
	// node_type
	switch x := m.NodeType.(type) {
	case *TreeNode_BinaryNode:
		b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.BinaryNode); err != nil {
			return err
		}
	case *TreeNode_Leaf:
		b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Leaf); err != nil {
			return err
		}
	case *TreeNode_CustomNodeType:
		b.EncodeVarint(6<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CustomNodeType); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TreeNode.NodeType has unexpected type %T", x)
	}
	return nil
}

func _TreeNode_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*TreeNode)
	switch tag {
	case 4: // node_type.binary_node
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(BinaryNode)
		err := b.DecodeMessage(msg)
		m.NodeType = &TreeNode_BinaryNode{msg}
		return true, err
	case 5: // node_type.leaf
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Leaf)
		err := b.DecodeMessage(msg)
		m.NodeType = &TreeNode_Leaf{msg}
		return true, err
	case 6: // node_type.custom_node_type
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.NodeType = &TreeNode_CustomNodeType{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TreeNode_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*TreeNode)
	// node_type
	switch x := m.NodeType.(type) {
	case *TreeNode_BinaryNode:
		s := proto1.Size(x.BinaryNode)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *TreeNode_Leaf:
		s := proto1.Size(x.Leaf)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *TreeNode_CustomNodeType:
		s := proto1.Size(x.CustomNodeType)
		n += proto1.SizeVarint(6<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BinaryNode struct {
	LeftChildId  *google_protobuf1.Int32Value `protobuf:"bytes,1,opt,name=left_child_id,json=leftChildId" json:"left_child_id,omitempty"`
	RightChildId *google_protobuf1.Int32Value `protobuf:"bytes,2,opt,name=right_child_id,json=rightChildId" json:"right_child_id,omitempty"`
	// When left_child_test is undefined for a particular datapoint (e.g. because
	// it's not defined when feature value is missing), the datapoint should go
	// in this direction.
	DefaultDirection BinaryNode_Direction `protobuf:"varint,3,opt,name=default_direction,json=defaultDirection,enum=tensorflow.decision_trees.BinaryNode_Direction" json:"default_direction,omitempty"`
	// When a datapoint satisfies the test, it should be propagated to the left
	// child.
	//
	// Types that are valid to be assigned to LeftChildTest:
	//	*BinaryNode_InequalityLeftChildTest
	//	*BinaryNode_CustomLeftChildTest
	LeftChildTest isBinaryNode_LeftChildTest `protobuf_oneof:"left_child_test"`
}

func (m *BinaryNode) Reset()                    { *m = BinaryNode{} }
func (m *BinaryNode) String() string            { return proto1.CompactTextString(m) }
func (*BinaryNode) ProtoMessage()               {}
func (*BinaryNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isBinaryNode_LeftChildTest interface {
	isBinaryNode_LeftChildTest()
}

type BinaryNode_InequalityLeftChildTest struct {
	InequalityLeftChildTest *InequalityTest `protobuf:"bytes,4,opt,name=inequality_left_child_test,json=inequalityLeftChildTest,oneof"`
}
type BinaryNode_CustomLeftChildTest struct {
	CustomLeftChildTest *google_protobuf.Any `protobuf:"bytes,5,opt,name=custom_left_child_test,json=customLeftChildTest,oneof"`
}

func (*BinaryNode_InequalityLeftChildTest) isBinaryNode_LeftChildTest() {}
func (*BinaryNode_CustomLeftChildTest) isBinaryNode_LeftChildTest()     {}

func (m *BinaryNode) GetLeftChildTest() isBinaryNode_LeftChildTest {
	if m != nil {
		return m.LeftChildTest
	}
	return nil
}

func (m *BinaryNode) GetLeftChildId() *google_protobuf1.Int32Value {
	if m != nil {
		return m.LeftChildId
	}
	return nil
}

func (m *BinaryNode) GetRightChildId() *google_protobuf1.Int32Value {
	if m != nil {
		return m.RightChildId
	}
	return nil
}

func (m *BinaryNode) GetDefaultDirection() BinaryNode_Direction {
	if m != nil {
		return m.DefaultDirection
	}
	return BinaryNode_LEFT
}

func (m *BinaryNode) GetInequalityLeftChildTest() *InequalityTest {
	if x, ok := m.GetLeftChildTest().(*BinaryNode_InequalityLeftChildTest); ok {
		return x.InequalityLeftChildTest
	}
	return nil
}

func (m *BinaryNode) GetCustomLeftChildTest() *google_protobuf.Any {
	if x, ok := m.GetLeftChildTest().(*BinaryNode_CustomLeftChildTest); ok {
		return x.CustomLeftChildTest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BinaryNode) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _BinaryNode_OneofMarshaler, _BinaryNode_OneofUnmarshaler, _BinaryNode_OneofSizer, []interface{}{
		(*BinaryNode_InequalityLeftChildTest)(nil),
		(*BinaryNode_CustomLeftChildTest)(nil),
	}
}

func _BinaryNode_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*BinaryNode)
	// left_child_test
	switch x := m.LeftChildTest.(type) {
	case *BinaryNode_InequalityLeftChildTest:
		b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.InequalityLeftChildTest); err != nil {
			return err
		}
	case *BinaryNode_CustomLeftChildTest:
		b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CustomLeftChildTest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BinaryNode.LeftChildTest has unexpected type %T", x)
	}
	return nil
}

func _BinaryNode_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*BinaryNode)
	switch tag {
	case 4: // left_child_test.inequality_left_child_test
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(InequalityTest)
		err := b.DecodeMessage(msg)
		m.LeftChildTest = &BinaryNode_InequalityLeftChildTest{msg}
		return true, err
	case 5: // left_child_test.custom_left_child_test
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.LeftChildTest = &BinaryNode_CustomLeftChildTest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BinaryNode_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*BinaryNode)
	// left_child_test
	switch x := m.LeftChildTest.(type) {
	case *BinaryNode_InequalityLeftChildTest:
		s := proto1.Size(x.InequalityLeftChildTest)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *BinaryNode_CustomLeftChildTest:
		s := proto1.Size(x.CustomLeftChildTest)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A SparseVector represents a vector in which only certain select elements
// are non-zero.  Maps labels to values (e.g. class id to probability or count).
type SparseVector struct {
	SparseValue map[int64]*Value `protobuf:"bytes,1,rep,name=sparse_value,json=sparseValue" json:"sparse_value,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SparseVector) Reset()                    { *m = SparseVector{} }
func (m *SparseVector) String() string            { return proto1.CompactTextString(m) }
func (*SparseVector) ProtoMessage()               {}
func (*SparseVector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SparseVector) GetSparseValue() map[int64]*Value {
	if m != nil {
		return m.SparseValue
	}
	return nil
}

type Vector struct {
	Value []*Value `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *Vector) Reset()                    { *m = Vector{} }
func (m *Vector) String() string            { return proto1.CompactTextString(m) }
func (*Vector) ProtoMessage()               {}
func (*Vector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Vector) GetValue() []*Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type Leaf struct {
	// Types that are valid to be assigned to Leaf:
	//	*Leaf_Vector
	//	*Leaf_SparseVector
	Leaf isLeaf_Leaf `protobuf_oneof:"leaf"`
	// For non-standard handling of leaves.
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,3,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Leaf) Reset()                    { *m = Leaf{} }
func (m *Leaf) String() string            { return proto1.CompactTextString(m) }
func (*Leaf) ProtoMessage()               {}
func (*Leaf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type isLeaf_Leaf interface {
	isLeaf_Leaf()
}

type Leaf_Vector struct {
	Vector *Vector `protobuf:"bytes,1,opt,name=vector,oneof"`
}
type Leaf_SparseVector struct {
	SparseVector *SparseVector `protobuf:"bytes,2,opt,name=sparse_vector,json=sparseVector,oneof"`
}

func (*Leaf_Vector) isLeaf_Leaf()       {}
func (*Leaf_SparseVector) isLeaf_Leaf() {}

func (m *Leaf) GetLeaf() isLeaf_Leaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (m *Leaf) GetVector() *Vector {
	if x, ok := m.GetLeaf().(*Leaf_Vector); ok {
		return x.Vector
	}
	return nil
}

func (m *Leaf) GetSparseVector() *SparseVector {
	if x, ok := m.GetLeaf().(*Leaf_SparseVector); ok {
		return x.SparseVector
	}
	return nil
}

func (m *Leaf) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Leaf) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Leaf_OneofMarshaler, _Leaf_OneofUnmarshaler, _Leaf_OneofSizer, []interface{}{
		(*Leaf_Vector)(nil),
		(*Leaf_SparseVector)(nil),
	}
}

func _Leaf_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Leaf)
	// leaf
	switch x := m.Leaf.(type) {
	case *Leaf_Vector:
		b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Vector); err != nil {
			return err
		}
	case *Leaf_SparseVector:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.SparseVector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Leaf.Leaf has unexpected type %T", x)
	}
	return nil
}

func _Leaf_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Leaf)
	switch tag {
	case 1: // leaf.vector
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Vector)
		err := b.DecodeMessage(msg)
		m.Leaf = &Leaf_Vector{msg}
		return true, err
	case 2: // leaf.sparse_vector
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(SparseVector)
		err := b.DecodeMessage(msg)
		m.Leaf = &Leaf_SparseVector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Leaf_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Leaf)
	// leaf
	switch x := m.Leaf.(type) {
	case *Leaf_Vector:
		s := proto1.Size(x.Vector)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Leaf_SparseVector:
		s := proto1.Size(x.SparseVector)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FeatureId struct {
	Id             *google_protobuf1.StringValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AdditionalData []*google_protobuf.Any        `protobuf:"bytes,2,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *FeatureId) Reset()                    { *m = FeatureId{} }
func (m *FeatureId) String() string            { return proto1.CompactTextString(m) }
func (*FeatureId) ProtoMessage()               {}
func (*FeatureId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FeatureId) GetId() *google_protobuf1.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *FeatureId) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type ObliqueFeatures struct {
	// total value is sum(features[i] * weights[i]).
	Features []*FeatureId `protobuf:"bytes,1,rep,name=features" json:"features,omitempty"`
	Weights  []float32    `protobuf:"fixed32,2,rep,packed,name=weights" json:"weights,omitempty"`
}

func (m *ObliqueFeatures) Reset()                    { *m = ObliqueFeatures{} }
func (m *ObliqueFeatures) String() string            { return proto1.CompactTextString(m) }
func (*ObliqueFeatures) ProtoMessage()               {}
func (*ObliqueFeatures) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ObliqueFeatures) GetFeatures() []*FeatureId {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ObliqueFeatures) GetWeights() []float32 {
	if m != nil {
		return m.Weights
	}
	return nil
}

type InequalityTest struct {
	// When the feature is missing, the test's outcome is undefined.
	//
	// Types that are valid to be assigned to FeatureSum:
	//	*InequalityTest_FeatureId
	//	*InequalityTest_Oblique
	FeatureSum isInequalityTest_FeatureSum `protobuf_oneof:"FeatureSum"`
	Type       InequalityTest_Type         `protobuf:"varint,2,opt,name=type,enum=tensorflow.decision_trees.InequalityTest_Type" json:"type,omitempty"`
	Threshold  *Value                      `protobuf:"bytes,3,opt,name=threshold" json:"threshold,omitempty"`
}

func (m *InequalityTest) Reset()                    { *m = InequalityTest{} }
func (m *InequalityTest) String() string            { return proto1.CompactTextString(m) }
func (*InequalityTest) ProtoMessage()               {}
func (*InequalityTest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type isInequalityTest_FeatureSum interface {
	isInequalityTest_FeatureSum()
}

type InequalityTest_FeatureId struct {
	FeatureId *FeatureId `protobuf:"bytes,1,opt,name=feature_id,json=featureId,oneof"`
}
type InequalityTest_Oblique struct {
	Oblique *ObliqueFeatures `protobuf:"bytes,4,opt,name=oblique,oneof"`
}

func (*InequalityTest_FeatureId) isInequalityTest_FeatureSum() {}
func (*InequalityTest_Oblique) isInequalityTest_FeatureSum()   {}

func (m *InequalityTest) GetFeatureSum() isInequalityTest_FeatureSum {
	if m != nil {
		return m.FeatureSum
	}
	return nil
}

func (m *InequalityTest) GetFeatureId() *FeatureId {
	if x, ok := m.GetFeatureSum().(*InequalityTest_FeatureId); ok {
		return x.FeatureId
	}
	return nil
}

func (m *InequalityTest) GetOblique() *ObliqueFeatures {
	if x, ok := m.GetFeatureSum().(*InequalityTest_Oblique); ok {
		return x.Oblique
	}
	return nil
}

func (m *InequalityTest) GetType() InequalityTest_Type {
	if m != nil {
		return m.Type
	}
	return InequalityTest_LESS_OR_EQUAL
}

func (m *InequalityTest) GetThreshold() *Value {
	if m != nil {
		return m.Threshold
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InequalityTest) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _InequalityTest_OneofMarshaler, _InequalityTest_OneofUnmarshaler, _InequalityTest_OneofSizer, []interface{}{
		(*InequalityTest_FeatureId)(nil),
		(*InequalityTest_Oblique)(nil),
	}
}

func _InequalityTest_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*InequalityTest)
	// FeatureSum
	switch x := m.FeatureSum.(type) {
	case *InequalityTest_FeatureId:
		b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.FeatureId); err != nil {
			return err
		}
	case *InequalityTest_Oblique:
		b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Oblique); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InequalityTest.FeatureSum has unexpected type %T", x)
	}
	return nil
}

func _InequalityTest_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*InequalityTest)
	switch tag {
	case 1: // FeatureSum.feature_id
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(FeatureId)
		err := b.DecodeMessage(msg)
		m.FeatureSum = &InequalityTest_FeatureId{msg}
		return true, err
	case 4: // FeatureSum.oblique
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(ObliqueFeatures)
		err := b.DecodeMessage(msg)
		m.FeatureSum = &InequalityTest_Oblique{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InequalityTest_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*InequalityTest)
	// FeatureSum
	switch x := m.FeatureSum.(type) {
	case *InequalityTest_FeatureId:
		s := proto1.Size(x.FeatureId)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *InequalityTest_Oblique:
		s := proto1.Size(x.Oblique)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Represents a single value of any type, e.g. 5 or "abc".
type Value struct {
	// Types that are valid to be assigned to Value:
	//	*Value_FloatValue
	//	*Value_DoubleValue
	//	*Value_Int32Value
	//	*Value_Int64Value
	//	*Value_CustomValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto1.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type isValue_Value interface {
	isValue_Value()
}

type Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,1,opt,name=float_value,json=floatValue,oneof"`
}
type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,oneof"`
}
type Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,oneof"`
}
type Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,oneof"`
}
type Value_CustomValue struct {
	CustomValue *google_protobuf.Any `protobuf:"bytes,5,opt,name=custom_value,json=customValue,oneof"`
}

func (*Value_FloatValue) isValue_Value()  {}
func (*Value_DoubleValue) isValue_Value() {}
func (*Value_Int32Value) isValue_Value()  {}
func (*Value_Int64Value) isValue_Value()  {}
func (*Value_CustomValue) isValue_Value() {}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Value) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*Value_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *Value) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Value_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Value) GetCustomValue() *google_protobuf.Any {
	if x, ok := m.GetValue().(*Value_CustomValue); ok {
		return x.CustomValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_FloatValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_Int32Value)(nil),
		(*Value_Int64Value)(nil),
		(*Value_CustomValue)(nil),
	}
}

func _Value_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_FloatValue:
		b.EncodeVarint(1<<3 | proto1.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.FloatValue)))
	case *Value_DoubleValue:
		b.EncodeVarint(2<<3 | proto1.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Value_Int32Value:
		b.EncodeVarint(3<<3 | proto1.WireVarint)
		b.EncodeVarint(uint64(x.Int32Value))
	case *Value_Int64Value:
		b.EncodeVarint(4<<3 | proto1.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *Value_CustomValue:
		b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CustomValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Value.Value has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // value.float_value
		if wire != proto1.WireFixed32 {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &Value_FloatValue{math.Float32frombits(uint32(x))}
		return true, err
	case 2: // value.double_value
		if wire != proto1.WireFixed64 {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Value_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 3: // value.int32_value
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Int32Value{int32(x)}
		return true, err
	case 4: // value.int64_value
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Int64Value{int64(x)}
		return true, err
	case 5: // value.custom_value
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.Value = &Value_CustomValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_FloatValue:
		n += proto1.SizeVarint(1<<3 | proto1.WireFixed32)
		n += 4
	case *Value_DoubleValue:
		n += proto1.SizeVarint(2<<3 | proto1.WireFixed64)
		n += 8
	case *Value_Int32Value:
		n += proto1.SizeVarint(3<<3 | proto1.WireVarint)
		n += proto1.SizeVarint(uint64(x.Int32Value))
	case *Value_Int64Value:
		n += proto1.SizeVarint(4<<3 | proto1.WireVarint)
		n += proto1.SizeVarint(uint64(x.Int64Value))
	case *Value_CustomValue:
		s := proto1.Size(x.CustomValue)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto1.RegisterType((*Model)(nil), "tensorflow.decision_trees.Model")
	proto1.RegisterType((*ModelAndFeatures)(nil), "tensorflow.decision_trees.ModelAndFeatures")
	proto1.RegisterType((*ModelAndFeatures_Feature)(nil), "tensorflow.decision_trees.ModelAndFeatures.Feature")
	proto1.RegisterType((*Ensemble)(nil), "tensorflow.decision_trees.Ensemble")
	proto1.RegisterType((*Ensemble_Member)(nil), "tensorflow.decision_trees.Ensemble.Member")
	proto1.RegisterType((*Summation)(nil), "tensorflow.decision_trees.Summation")
	proto1.RegisterType((*Averaging)(nil), "tensorflow.decision_trees.Averaging")
	proto1.RegisterType((*DecisionTree)(nil), "tensorflow.decision_trees.DecisionTree")
	proto1.RegisterType((*TreeNode)(nil), "tensorflow.decision_trees.TreeNode")
	proto1.RegisterType((*BinaryNode)(nil), "tensorflow.decision_trees.BinaryNode")
	proto1.RegisterType((*SparseVector)(nil), "tensorflow.decision_trees.SparseVector")
	proto1.RegisterType((*Vector)(nil), "tensorflow.decision_trees.Vector")
	proto1.RegisterType((*Leaf)(nil), "tensorflow.decision_trees.Leaf")
	proto1.RegisterType((*FeatureId)(nil), "tensorflow.decision_trees.FeatureId")
	proto1.RegisterType((*ObliqueFeatures)(nil), "tensorflow.decision_trees.ObliqueFeatures")
	proto1.RegisterType((*InequalityTest)(nil), "tensorflow.decision_trees.InequalityTest")
	proto1.RegisterType((*Value)(nil), "tensorflow.decision_trees.Value")
	proto1.RegisterEnum("tensorflow.decision_trees.BinaryNode_Direction", BinaryNode_Direction_name, BinaryNode_Direction_value)
	proto1.RegisterEnum("tensorflow.decision_trees.InequalityTest_Type", InequalityTest_Type_name, InequalityTest_Type_value)
}

func init() {
	proto1.RegisterFile("tensorflow/contrib/decision_trees/proto/generic_tree_model.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xcd, 0x92, 0xdb, 0xc4,
	0x16, 0xb6, 0xe4, 0xbf, 0xf1, 0xb1, 0x67, 0xe2, 0xf4, 0xcd, 0xbd, 0x71, 0x7c, 0x73, 0x6f, 0x26,
	0x0a, 0x14, 0x81, 0x22, 0x72, 0x91, 0x84, 0xa9, 0x04, 0x42, 0x18, 0x3b, 0xe3, 0x44, 0x86, 0x49,
	0x02, 0x6d, 0x27, 0x50, 0x40, 0x95, 0x91, 0xad, 0xb6, 0xad, 0x8a, 0x2c, 0x39, 0x52, 0x6b, 0x82,
	0xb3, 0x65, 0xc3, 0x96, 0x07, 0x60, 0xcf, 0x73, 0xc0, 0x9a, 0x07, 0x20, 0x0f, 0xc0, 0x33, 0xb0,
	0xa4, 0xfa, 0x47, 0x92, 0x67, 0xe2, 0x68, 0x94, 0xcc, 0xae, 0xbb, 0x7d, 0xbe, 0xef, 0xf4, 0x39,
	0xa7, 0xcf, 0x8f, 0x0c, 0xbb, 0x94, 0xb8, 0x81, 0xe7, 0x4f, 0x1c, 0xef, 0x59, 0x6b, 0xec, 0xb9,
	0xd4, 0xb7, 0x47, 0x2d, 0x8b, 0x8c, 0xed, 0xc0, 0xf6, 0xdc, 0x21, 0xf5, 0x09, 0x09, 0x5a, 0x0b,
	0xdf, 0xa3, 0x5e, 0x6b, 0x4a, 0x5c, 0xe2, 0xdb, 0x63, 0x7e, 0x36, 0x9c, 0x7b, 0x16, 0x71, 0x74,
	0xfe, 0x03, 0x3a, 0x97, 0x30, 0xe8, 0x87, 0x91, 0xcd, 0x73, 0x53, 0xcf, 0x9b, 0x3a, 0x44, 0x30,
	0x8c, 0xc2, 0x49, 0xcb, 0x74, 0x97, 0x02, 0xd5, 0xfc, 0xff, 0xd1, 0x9f, 0x9e, 0xf9, 0xe6, 0x62,
	0x41, 0xfc, 0x40, 0xfc, 0xae, 0xfd, 0xa2, 0x42, 0xf1, 0x3e, 0xd3, 0x82, 0x1e, 0xc0, 0xe6, 0x21,
	0xda, 0x86, 0xb2, 0xad, 0x5c, 0xae, 0x5e, 0x7d, 0x47, 0x7f, 0xa5, 0x5e, 0x7d, 0x4f, 0x6e, 0x07,
	0x3e, 0x21, 0x46, 0x0e, 0xd7, 0xac, 0x95, 0x3d, 0x6a, 0xc3, 0x06, 0x71, 0x03, 0x32, 0x1f, 0x39,
	0xa4, 0xa1, 0x72, 0xaa, 0x4b, 0x29, 0x54, 0x5d, 0x29, 0x6a, 0xe4, 0x70, 0x0c, 0x43, 0x37, 0xa1,
	0x36, 0x0e, 0x03, 0xea, 0xcd, 0x85, 0x23, 0x1a, 0x79, 0x4e, 0x73, 0x46, 0x17, 0x36, 0xe9, 0x91,
	0x4d, 0x7a, 0xdb, 0x5d, 0x1a, 0x39, 0x5c, 0x15, 0xb2, 0xc2, 0x9a, 0x4f, 0xe0, 0x94, 0x69, 0x59,
	0x36, 0xb5, 0x3d, 0xd7, 0x74, 0x86, 0x96, 0x49, 0xcd, 0x46, 0x61, 0x3b, 0xff, 0x2a, 0x34, 0xde,
	0x4a, 0x84, 0xf7, 0x4c, 0x6a, 0x76, 0xca, 0x50, 0xe4, 0x2a, 0xb5, 0xbf, 0xf2, 0x50, 0xe7, 0x8c,
	0x6d, 0xd7, 0xba, 0x4b, 0x4c, 0x1a, 0xfa, 0x24, 0x40, 0x8f, 0x60, 0x63, 0x22, 0xd7, 0x0d, 0x85,
	0xb3, 0xde, 0x4c, 0x31, 0xed, 0x28, 0x5c, 0x8f, 0x16, 0x5d, 0x97, 0xfa, 0x4b, 0x1c, 0x53, 0xa1,
	0x1d, 0xa9, 0x54, 0xba, 0x6b, 0xfb, 0x38, 0x4e, 0x2c, 0xc4, 0xd7, 0xd9, 0x9a, 0xcf, 0x6e, 0x6b,
	0xf3, 0x67, 0x05, 0xca, 0xf2, 0x4a, 0xe8, 0x1e, 0x80, 0xbc, 0xce, 0xd0, 0xb6, 0xe4, 0x0b, 0x78,
	0x2b, 0xe5, 0x1e, 0x12, 0xd7, 0xb3, 0x3a, 0x6a, 0x43, 0xc1, 0x95, 0x49, 0xb4, 0x5d, 0x77, 0x27,
	0xf5, 0x35, 0xee, 0xb4, 0x80, 0xcd, 0x43, 0x5e, 0x42, 0x75, 0xc8, 0x3f, 0x21, 0x4b, 0x7e, 0xa3,
	0x0a, 0x66, 0x4b, 0xd4, 0x83, 0xe2, 0x81, 0xe9, 0x84, 0xd1, 0xe3, 0xba, 0xf6, 0x06, 0x11, 0xc0,
	0x82, 0xe1, 0x23, 0xf5, 0x86, 0xa2, 0xfd, 0x5a, 0x84, 0x8d, 0xe8, 0x11, 0xa2, 0x3d, 0x28, 0xcf,
	0xc9, 0x7c, 0x44, 0xfc, 0xa0, 0x61, 0xf1, 0x5b, 0xbf, 0x97, 0xe1, 0xe9, 0xea, 0xf7, 0x39, 0x04,
	0x47, 0x50, 0xe4, 0xc2, 0x85, 0x20, 0x9c, 0xcf, 0x4d, 0x66, 0xd7, 0x70, 0xec, 0xcd, 0x47, 0xb6,
	0x2b, 0xd6, 0x94, 0x8c, 0x67, 0xae, 0xfd, 0x34, 0x24, 0x19, 0x3c, 0xdc, 0x8f, 0x18, 0x8c, 0x1c,
	0xfe, 0x5f, 0x4c, 0x77, 0x27, 0x61, 0x1b, 0x44, 0x64, 0x4c, 0x9f, 0x79, 0x40, 0x7c, 0x73, 0x6a,
	0xbb, 0xd3, 0x57, 0xe8, 0x53, 0x8f, 0xd5, 0xd7, 0x8e, 0x18, 0x98, 0xbe, 0x98, 0x6e, 0xad, 0xbe,
	0xaf, 0xe1, 0xbc, 0x4c, 0xcf, 0xf5, 0xca, 0xd2, 0xd3, 0xb5, 0x29, 0xb0, 0x6b, 0x99, 0x4f, 0x96,
	0xbd, 0xcd, 0xdf, 0x15, 0x28, 0x89, 0x60, 0xa0, 0x5b, 0xb0, 0x11, 0x84, 0x23, 0x91, 0x56, 0x4a,
	0xc6, 0xb4, 0x8a, 0x11, 0xe8, 0x16, 0x54, 0xa3, 0x35, 0xcb, 0x07, 0xe1, 0xbd, 0xff, 0xbe, 0x74,
	0x87, 0x9e, 0x4b, 0xaf, 0x5d, 0x7d, 0xcc, 0x9e, 0x12, 0x86, 0x48, 0x7e, 0x7d, 0x0e, 0xbc, 0x46,
	0x5e, 0x76, 0xce, 0xc2, 0xbf, 0xd7, 0xfa, 0x55, 0xfb, 0x0c, 0x2a, 0xf1, 0xab, 0x58, 0xa7, 0x44,
	0xc9, 0xae, 0x84, 0x71, 0xc5, 0x11, 0x3f, 0x29, 0xd7, 0x4f, 0x0a, 0xd4, 0x56, 0x5b, 0x02, 0xba,
	0x09, 0x45, 0xd7, 0xb3, 0xe2, 0x22, 0x99, 0x56, 0xff, 0x99, 0xfc, 0x03, 0xcf, 0x22, 0x58, 0x20,
	0x4e, 0x58, 0x3f, 0xb4, 0xdf, 0xf2, 0xb0, 0x11, 0x51, 0xa2, 0xeb, 0x50, 0x66, 0xa4, 0x49, 0x45,
	0x4b, 0x8d, 0x60, 0x89, 0xc9, 0xf6, 0x2c, 0xf4, 0x01, 0x14, 0x2d, 0xb2, 0xa0, 0xb3, 0x2c, 0x51,
	0x17, 0x92, 0xe8, 0x36, 0xd4, 0x82, 0x70, 0xc4, 0x3b, 0x77, 0x60, 0x3f, 0x8f, 0x12, 0x20, 0x15,
	0x59, 0x95, 0x80, 0xbe, 0xfd, 0x9c, 0x20, 0x03, 0xaa, 0x2c, 0xdc, 0xfe, 0x72, 0xc8, 0xee, 0xd0,
	0x28, 0x70, 0xf8, 0xdb, 0x29, 0x5e, 0xeb, 0x70, 0x69, 0x66, 0xa4, 0x91, 0xc3, 0x30, 0x8a, 0x77,
	0xe8, 0x43, 0x28, 0x38, 0xc4, 0x9c, 0x34, 0x8a, 0x9c, 0xe2, 0x42, 0x0a, 0xc5, 0x3e, 0x31, 0x27,
	0x46, 0x0e, 0x73, 0x71, 0xb4, 0x0b, 0x75, 0x99, 0xd1, 0xdc, 0x61, 0x74, 0xb9, 0x20, 0x8d, 0x52,
	0x6a, 0x16, 0x6f, 0x09, 0x79, 0xa6, 0x74, 0xb0, 0x5c, 0xac, 0xcd, 0xdc, 0xf2, 0x6b, 0xbc, 0xf9,
	0x2a, 0x54, 0x62, 0xcd, 0xda, 0x8b, 0x3c, 0x40, 0x62, 0x21, 0xfa, 0x14, 0x36, 0x1d, 0x32, 0xa1,
	0xc3, 0xf1, 0xcc, 0x76, 0xac, 0x8c, 0xc1, 0xac, 0x32, 0xc4, 0x1d, 0x06, 0xe8, 0x59, 0xa8, 0x0d,
	0x5b, 0xbe, 0x3d, 0x9d, 0xad, 0x30, 0x64, 0x08, 0x6d, 0x8d, 0x43, 0x22, 0x8a, 0xef, 0xe0, 0xb4,
	0x45, 0x26, 0x66, 0xe8, 0xd0, 0xa1, 0x65, 0xfb, 0x64, 0xcc, 0xae, 0xce, 0xc3, 0xbc, 0x75, 0xb5,
	0x95, 0x29, 0x4e, 0xfa, 0x5e, 0x04, 0xc3, 0x75, 0xc9, 0x14, 0x9f, 0xa0, 0x19, 0x34, 0x6d, 0x97,
	0x3c, 0x0d, 0x4d, 0xc7, 0xa6, 0xcb, 0xe1, 0x8a, 0xb1, 0x94, 0x04, 0x54, 0x3e, 0x87, 0x77, 0x53,
	0xd4, 0xf4, 0x62, 0xf0, 0x80, 0x04, 0xd4, 0xc8, 0xe1, 0xb3, 0x09, 0xdd, 0x7e, 0xe4, 0x08, 0xf6,
	0x13, 0xfa, 0x1c, 0xfe, 0x23, 0x03, 0x7d, 0x54, 0x4b, 0x31, 0x35, 0xdc, 0xff, 0x12, 0xa8, 0x43,
	0x64, 0xda, 0x36, 0x54, 0x12, 0x1b, 0x36, 0xa0, 0xb0, 0xdf, 0xbd, 0x3b, 0xa8, 0xe7, 0x50, 0x05,
	0x8a, 0xb8, 0x77, 0xcf, 0x18, 0xd4, 0x95, 0xce, 0x69, 0x38, 0x75, 0x44, 0x8f, 0xf6, 0x87, 0x02,
	0xb5, 0xfe, 0xc2, 0xf4, 0x03, 0xf2, 0x98, 0x8c, 0xa9, 0xe7, 0xa3, 0x6f, 0xa1, 0x16, 0xf0, 0xfd,
	0x50, 0xb4, 0x75, 0x51, 0x33, 0x6e, 0xa4, 0xb5, 0xc6, 0x15, 0x78, 0xb4, 0x61, 0x50, 0x31, 0x57,
	0x55, 0x83, 0xe4, 0xa4, 0xf9, 0x3d, 0xd4, 0x8f, 0x0a, 0xac, 0x8e, 0x14, 0x79, 0x31, 0x52, 0xec,
	0x1c, 0x1e, 0x29, 0xd2, 0x3a, 0x85, 0xcc, 0xfb, 0x64, 0x7e, 0xd8, 0x85, 0x92, 0x34, 0x24, 0x66,
	0x11, 0x16, 0x64, 0x65, 0xd1, 0x5e, 0x28, 0x50, 0x60, 0xd9, 0x88, 0x3e, 0x86, 0xd2, 0x01, 0xa7,
	0x92, 0x2f, 0xfc, 0x62, 0x1a, 0x03, 0x17, 0x34, 0x72, 0x58, 0x42, 0xd8, 0x18, 0x1f, 0xb9, 0x51,
	0x70, 0xa8, 0xc7, 0x8e, 0xf1, 0xab, 0x7e, 0x64, 0x63, 0x7c, 0xb0, 0x1a, 0x96, 0x13, 0x36, 0xb1,
	0x92, 0x28, 0x44, 0xda, 0x0f, 0x50, 0x89, 0x67, 0x45, 0xf4, 0x3e, 0xa8, 0x71, 0xfa, 0x9e, 0x7f,
	0x89, 0xa6, 0x4f, 0x7d, 0xdb, 0x9d, 0x0a, 0xd7, 0xa8, 0xf6, 0x49, 0x47, 0x49, 0x6d, 0x0e, 0xa7,
	0x1e, 0x8e, 0x1c, 0xd6, 0x38, 0xe3, 0xf9, 0x7d, 0xf7, 0xa5, 0xf9, 0x3d, 0xd3, 0x8c, 0xbb, 0x32,
	0xaa, 0x37, 0xa0, 0xfc, 0x8c, 0xb0, 0xc2, 0x10, 0xf0, 0xbb, 0xa8, 0x38, 0xda, 0x6a, 0x3f, 0xe6,
	0x61, 0xeb, 0x70, 0x1e, 0xa2, 0xee, 0x9b, 0x0e, 0xd5, 0x46, 0x6e, 0x75, 0xa4, 0xbe, 0x0b, 0x65,
	0x4f, 0x18, 0x22, 0x4b, 0x41, 0xda, 0x50, 0x7a, 0xc4, 0x64, 0x23, 0x87, 0x23, 0x30, 0xea, 0x40,
	0x81, 0x17, 0x76, 0x95, 0x97, 0x2d, 0x3d, 0x73, 0x3d, 0xd1, 0x59, 0x81, 0xc7, 0x1c, 0x8b, 0x6e,
	0x43, 0x85, 0xce, 0x7c, 0x12, 0xcc, 0x3c, 0xc7, 0x92, 0x6d, 0xee, 0xf8, 0x77, 0x9e, 0x40, 0xb4,
	0x2f, 0xa0, 0xc0, 0xdb, 0xc5, 0x69, 0xd8, 0xdc, 0xef, 0xf6, 0xfb, 0xc3, 0x87, 0x78, 0xd8, 0xfd,
	0xf2, 0x51, 0x7b, 0xbf, 0x9e, 0x43, 0x9b, 0x50, 0xe1, 0x47, 0x03, 0xa3, 0xfd, 0xa0, 0xae, 0xa0,
	0x33, 0x50, 0xbf, 0x87, 0xbb, 0xed, 0x41, 0x17, 0x27, 0x42, 0x2a, 0xaa, 0x43, 0x2d, 0x3a, 0xe5,
	0x72, 0xf9, 0x4e, 0x0d, 0x40, 0x1a, 0xdb, 0x0f, 0xe7, 0xda, 0x9f, 0x0a, 0x14, 0xb9, 0x52, 0x74,
	0x11, 0xaa, 0x13, 0xc7, 0x33, 0x69, 0x5c, 0x55, 0x94, 0xcb, 0x2a, 0x6b, 0x96, 0xfc, 0x50, 0x88,
	0x5c, 0x82, 0x9a, 0xe5, 0x85, 0x23, 0x27, 0xaa, 0x3c, 0xcc, 0x31, 0x0a, 0xfb, 0xa0, 0x14, 0xa7,
	0x31, 0x8f, 0xcd, 0xba, 0x82, 0x94, 0x61, 0x36, 0x17, 0x19, 0x8f, 0x1d, 0xb7, 0x0a, 0x29, 0xb2,
	0x73, 0x5d, 0x8a, 0xb0, 0x20, 0xe5, 0xa5, 0xc8, 0xce, 0x75, 0x21, 0x92, 0x7c, 0xd1, 0x0a, 0x99,
	0x62, 0x96, 0x2f, 0x5a, 0x0e, 0x65, 0x9f, 0xa4, 0x1c, 0xd3, 0xf9, 0xea, 0x1b, 0x3c, 0xb5, 0xe9,
	0x2c, 0x1c, 0xe9, 0x63, 0x6f, 0xde, 0xb2, 0x7c, 0xb2, 0x7c, 0xd2, 0x4a, 0x5c, 0x7f, 0x25, 0x20,
	0xfe, 0x81, 0xed, 0x4e, 0xaf, 0x4c, 0xbd, 0xd6, 0xe2, 0xc9, 0xb4, 0x95, 0xf1, 0x7f, 0x87, 0xbf,
	0x15, 0x65, 0x54, 0xe2, 0xab, 0x6b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x2f, 0x6a, 0x21,
	0xac, 0x10, 0x00, 0x00,
}
