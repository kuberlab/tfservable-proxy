// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/decision_trees/proto/generic_tree_model_extensions.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Used in generic_tree_model.BinaryNode.left_child_test.
// Tests whether the feature's value belongs to the specified list,
// (or does not belong if inverse=True).
type MatchingValuesTest struct {
	// When the feature is missing, the test's outcome is undefined.
	FeatureId *FeatureId `protobuf:"bytes,1,opt,name=feature_id,json=featureId" json:"feature_id,omitempty"`
	Value     []*Value   `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
	Inverse   bool       `protobuf:"varint,3,opt,name=inverse" json:"inverse,omitempty"`
}

func (m *MatchingValuesTest) Reset()                    { *m = MatchingValuesTest{} }
func (m *MatchingValuesTest) String() string            { return proto1.CompactTextString(m) }
func (*MatchingValuesTest) ProtoMessage()               {}
func (*MatchingValuesTest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *MatchingValuesTest) GetFeatureId() *FeatureId {
	if m != nil {
		return m.FeatureId
	}
	return nil
}

func (m *MatchingValuesTest) GetValue() []*Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MatchingValuesTest) GetInverse() bool {
	if m != nil {
		return m.Inverse
	}
	return false
}

func init() {
	proto1.RegisterType((*MatchingValuesTest)(nil), "tensorflow.decision_trees.MatchingValuesTest")
}

func init() {
	proto1.RegisterFile("tensorflow/contrib/decision_trees/proto/generic_tree_model_extensions.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x89, 0xc5, 0x7f, 0xdb, 0xdb, 0x9e, 0xa2, 0xa7, 0x20, 0x1e, 0x72, 0xe9, 0x2e, 0x54,
	0xf0, 0x2c, 0x0a, 0x82, 0x88, 0x97, 0x50, 0x3c, 0x78, 0x09, 0xc9, 0xee, 0x64, 0x3b, 0x34, 0xdd,
	0x29, 0xb3, 0x9b, 0xa8, 0x9f, 0xc9, 0x2f, 0x29, 0x4d, 0x28, 0xc5, 0x83, 0x22, 0x3d, 0xcd, 0x1f,
	0xde, 0xfb, 0xbd, 0x61, 0xc4, 0x73, 0x04, 0x1f, 0x88, 0x9b, 0x96, 0xde, 0xb5, 0x21, 0x1f, 0x19,
	0x6b, 0x6d, 0xc1, 0x60, 0x40, 0xf2, 0x65, 0x64, 0x80, 0xa0, 0x37, 0x4c, 0x91, 0xb4, 0x03, 0x0f,
	0x8c, 0x66, 0xd8, 0x95, 0x6b, 0xb2, 0xd0, 0x96, 0xf0, 0xb1, 0x35, 0x23, 0xf9, 0xa0, 0x06, 0x8d,
	0xbc, 0xd8, 0xc3, 0xd4, 0x4f, 0xc8, 0xe5, 0xdd, 0xe1, 0x39, 0x23, 0xfc, 0xea, 0x2b, 0x11, 0xf2,
	0xa5, 0x8a, 0x66, 0x89, 0xde, 0xbd, 0x56, 0x6d, 0x07, 0x61, 0x01, 0x21, 0xca, 0x07, 0x21, 0x1a,
	0xa8, 0x62, 0xc7, 0x50, 0xa2, 0x4d, 0x93, 0x2c, 0xc9, 0xa7, 0xf3, 0x6b, 0xf5, 0xeb, 0x21, 0xea,
	0x71, 0x14, 0x3f, 0xd9, 0xe2, 0xbc, 0xd9, 0xb5, 0xf2, 0x56, 0x1c, 0xf7, 0x5b, 0x64, 0x7a, 0x94,
	0x4d, 0xf2, 0xe9, 0x3c, 0xfb, 0xc3, 0x3f, 0x44, 0x17, 0xa3, 0x5c, 0xa6, 0xe2, 0x14, 0x7d, 0x0f,
	0x1c, 0x20, 0x9d, 0x64, 0x49, 0x7e, 0x56, 0xec, 0xc6, 0xfb, 0xc5, 0x5b, 0xe1, 0x30, 0x2e, 0xbb,
	0x5a, 0x19, 0x5a, 0x6b, 0xcb, 0xf0, 0xb9, 0xd2, 0x7b, 0xe8, 0x2c, 0x00, 0xf7, 0xe8, 0xdd, 0xcc,
	0x91, 0xde, 0xac, 0x9c, 0xfe, 0xe7, 0x73, 0xea, 0x93, 0xa1, 0xdc, 0x7c, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x2b, 0xee, 0x4e, 0x4b, 0xb6, 0x01, 0x00, 0x00,
}
