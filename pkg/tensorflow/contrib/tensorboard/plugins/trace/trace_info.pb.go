// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto

/*
Package trace is a generated protocol buffer package.

It is generated from these files:
	tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto

It has these top-level messages:
	TraceInfo
	OpInfo
	LineTrace
	TensorInfo
	FileInfo
*/
package trace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TraceInfo struct {
	Ops   []*OpInfo   `protobuf:"bytes,1,rep,name=ops" json:"ops,omitempty"`
	Files []*FileInfo `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
}

func (m *TraceInfo) Reset()                    { *m = TraceInfo{} }
func (m *TraceInfo) String() string            { return proto.CompactTextString(m) }
func (*TraceInfo) ProtoMessage()               {}
func (*TraceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TraceInfo) GetOps() []*OpInfo {
	if m != nil {
		return m.Ops
	}
	return nil
}

func (m *TraceInfo) GetFiles() []*FileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

type OpInfo struct {
	Name      string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OpType    string        `protobuf:"bytes,2,opt,name=op_type,json=opType" json:"op_type,omitempty"`
	Device    string        `protobuf:"bytes,3,opt,name=device" json:"device,omitempty"`
	Traceback []*LineTrace  `protobuf:"bytes,4,rep,name=traceback" json:"traceback,omitempty"`
	Inputs    []*TensorInfo `protobuf:"bytes,5,rep,name=inputs" json:"inputs,omitempty"`
	Outputs   []*TensorInfo `protobuf:"bytes,6,rep,name=outputs" json:"outputs,omitempty"`
}

func (m *OpInfo) Reset()                    { *m = OpInfo{} }
func (m *OpInfo) String() string            { return proto.CompactTextString(m) }
func (*OpInfo) ProtoMessage()               {}
func (*OpInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OpInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpInfo) GetOpType() string {
	if m != nil {
		return m.OpType
	}
	return ""
}

func (m *OpInfo) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *OpInfo) GetTraceback() []*LineTrace {
	if m != nil {
		return m.Traceback
	}
	return nil
}

func (m *OpInfo) GetInputs() []*TensorInfo {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *OpInfo) GetOutputs() []*TensorInfo {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type LineTrace struct {
	// Absolute file path.
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
	// 1-based line number.
	LineNumber uint32 `protobuf:"varint,2,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
}

func (m *LineTrace) Reset()                    { *m = LineTrace{} }
func (m *LineTrace) String() string            { return proto.CompactTextString(m) }
func (*LineTrace) ProtoMessage()               {}
func (*LineTrace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LineTrace) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *LineTrace) GetLineNumber() uint32 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

type TensorInfo struct {
	// Size of the tensor for each dimension. Value of -1 denotes "unknown"
	// size for that dimension.
	Shape []int32 `protobuf:"varint,1,rep,packed,name=shape" json:"shape,omitempty"`
	// The data type of the tensor.
	Dtype string `protobuf:"bytes,2,opt,name=dtype" json:"dtype,omitempty"`
	// Number of bytes per element in the tensor.
	NumBytesPerElem uint32 `protobuf:"varint,3,opt,name=num_bytes_per_elem,json=numBytesPerElem" json:"num_bytes_per_elem,omitempty"`
	// List of operation names that consume this tensor.
	Consumers []string `protobuf:"bytes,4,rep,name=consumers" json:"consumers,omitempty"`
}

func (m *TensorInfo) Reset()                    { *m = TensorInfo{} }
func (m *TensorInfo) String() string            { return proto.CompactTextString(m) }
func (*TensorInfo) ProtoMessage()               {}
func (*TensorInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TensorInfo) GetShape() []int32 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *TensorInfo) GetDtype() string {
	if m != nil {
		return m.Dtype
	}
	return ""
}

func (m *TensorInfo) GetNumBytesPerElem() uint32 {
	if m != nil {
		return m.NumBytesPerElem
	}
	return 0
}

func (m *TensorInfo) GetConsumers() []string {
	if m != nil {
		return m.Consumers
	}
	return nil
}

type FileInfo struct {
	// Absolute file path to the source code.
	FilePath   string `protobuf:"bytes,1,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
	SourceCode string `protobuf:"bytes,2,opt,name=source_code,json=sourceCode" json:"source_code,omitempty"`
	// Map from end of statement to start of statement. End and start are 0-based
	// line indexes.
	MultilineStatements map[uint32]uint32 `protobuf:"bytes,3,rep,name=multiline_statements,json=multilineStatements" json:"multiline_statements,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FileInfo) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *FileInfo) GetSourceCode() string {
	if m != nil {
		return m.SourceCode
	}
	return ""
}

func (m *FileInfo) GetMultilineStatements() map[uint32]uint32 {
	if m != nil {
		return m.MultilineStatements
	}
	return nil
}

func init() {
	proto.RegisterType((*TraceInfo)(nil), "tensorflow.contrib.tensorboard.TraceInfo")
	proto.RegisterType((*OpInfo)(nil), "tensorflow.contrib.tensorboard.OpInfo")
	proto.RegisterType((*LineTrace)(nil), "tensorflow.contrib.tensorboard.LineTrace")
	proto.RegisterType((*TensorInfo)(nil), "tensorflow.contrib.tensorboard.TensorInfo")
	proto.RegisterType((*FileInfo)(nil), "tensorflow.contrib.tensorboard.FileInfo")
}

func init() {
	proto.RegisterFile("tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdb, 0x6b, 0x13, 0x41,
	0x14, 0xc6, 0xd9, 0xa4, 0xd9, 0x76, 0x4f, 0x09, 0xca, 0x58, 0x74, 0x51, 0xd1, 0x92, 0x07, 0x89,
	0x4a, 0x77, 0x41, 0x5f, 0x8a, 0xa0, 0x60, 0xb4, 0x95, 0x82, 0x97, 0xb2, 0x06, 0x44, 0x5f, 0x96,
	0xbd, 0x9c, 0x24, 0x43, 0x76, 0x2e, 0xcc, 0x25, 0xb2, 0xcf, 0xa2, 0x7f, 0x87, 0x7f, 0xaa, 0xec,
	0x6c, 0xd2, 0x2d, 0x88, 0xa6, 0x7d, 0x59, 0xe6, 0x7c, 0xcb, 0xef, 0x9b, 0x73, 0xbe, 0x19, 0x06,
	0x5e, 0x1a, 0xe4, 0x5a, 0xa8, 0x59, 0x25, 0xbe, 0xc7, 0x85, 0xe0, 0x46, 0xd1, 0x3c, 0x6e, 0xa5,
	0x5c, 0x64, 0xaa, 0x8c, 0x65, 0x65, 0xe7, 0x94, 0xeb, 0xd8, 0xa8, 0xac, 0xc0, 0xf6, 0x9b, 0x52,
	0x3e, 0x13, 0x91, 0x54, 0xc2, 0x08, 0xf2, 0xa0, 0xc3, 0xa3, 0x35, 0x1e, 0x5d, 0xc2, 0x47, 0x3f,
	0x3d, 0x08, 0xa6, 0x0d, 0x74, 0xc6, 0x67, 0x82, 0x1c, 0x43, 0x5f, 0x48, 0x1d, 0x7a, 0x87, 0xfd,
	0xf1, 0xfe, 0xb3, 0x47, 0xd1, 0xff, 0xd9, 0xe8, 0x93, 0x6c, 0xa0, 0xa4, 0x41, 0xc8, 0x2b, 0x18,
	0xcc, 0x68, 0x85, 0x3a, 0xec, 0x39, 0x76, 0xbc, 0x8d, 0x3d, 0xa5, 0x95, 0xdb, 0x32, 0x69, 0xb1,
	0xd1, 0xef, 0x1e, 0xf8, 0xad, 0x1f, 0x21, 0xb0, 0xc3, 0x33, 0x86, 0xa1, 0x77, 0xe8, 0x8d, 0x83,
	0xc4, 0xad, 0xc9, 0x1d, 0xd8, 0x15, 0x32, 0x35, 0xb5, 0xc4, 0xb0, 0xe7, 0x64, 0x5f, 0xc8, 0x69,
	0x2d, 0x91, 0xdc, 0x06, 0xbf, 0xc4, 0x15, 0x2d, 0x30, 0xec, 0xb7, 0x7a, 0x5b, 0x91, 0x77, 0x10,
	0xb8, 0x2c, 0xf2, 0xac, 0x58, 0x86, 0x3b, 0xae, 0xa7, 0xc7, 0xdb, 0x7a, 0x7a, 0x4f, 0x39, 0xba,
	0x2c, 0x92, 0x8e, 0x25, 0x13, 0xf0, 0x29, 0x97, 0xd6, 0xe8, 0x70, 0xe0, 0x5c, 0x9e, 0x6c, 0x73,
	0x99, 0xba, 0xb5, 0x9b, 0x6d, 0x4d, 0x92, 0xb7, 0xb0, 0x2b, 0xac, 0x71, 0x26, 0xfe, 0xb5, 0x4d,
	0x36, 0xe8, 0xe8, 0x0c, 0x82, 0x8b, 0x0e, 0xc9, 0x3d, 0x08, 0x9a, 0xe0, 0x52, 0x99, 0x99, 0xc5,
	0x3a, 0xa9, 0xbd, 0x46, 0x38, 0xcf, 0xcc, 0x82, 0x3c, 0x84, 0xfd, 0x8a, 0x72, 0x4c, 0xb9, 0x65,
	0x39, 0x2a, 0x97, 0xd8, 0x30, 0x81, 0x46, 0xfa, 0xe8, 0x94, 0xd1, 0x0f, 0x0f, 0xa0, 0xdb, 0x82,
	0x1c, 0xc0, 0x40, 0x2f, 0x32, 0x89, 0xee, 0xe0, 0x07, 0x49, 0x5b, 0x34, 0x6a, 0x79, 0x29, 0xf1,
	0xb6, 0x20, 0x4f, 0x81, 0x70, 0xcb, 0xd2, 0xbc, 0x36, 0xa8, 0x53, 0x89, 0x2a, 0xc5, 0x0a, 0x99,
	0x0b, 0x7f, 0x98, 0xdc, 0xe0, 0x96, 0x4d, 0x9a, 0x1f, 0xe7, 0xa8, 0x4e, 0x2a, 0x64, 0xe4, 0x3e,
	0x04, 0x85, 0xe0, 0xda, 0x32, 0x54, 0xda, 0x9d, 0x42, 0x90, 0x74, 0xc2, 0xe8, 0x57, 0x0f, 0xf6,
	0x36, 0xf7, 0x60, 0xeb, 0x40, 0x5a, 0x58, 0x55, 0x60, 0x5a, 0x88, 0x72, 0xd3, 0x10, 0xb4, 0xd2,
	0x1b, 0x51, 0x22, 0x31, 0x70, 0xc0, 0x6c, 0x65, 0xa8, 0x1b, 0x5b, 0x9b, 0xcc, 0x20, 0x43, 0x6e,
	0x74, 0xd8, 0x77, 0x71, 0xbf, 0xbe, 0xea, 0x6d, 0x8c, 0x3e, 0x6c, 0x4c, 0x3e, 0x5f, 0x78, 0x9c,
	0x70, 0xa3, 0xea, 0xe4, 0x16, 0xfb, 0xfb, 0xcf, 0xdd, 0x53, 0x08, 0xff, 0x05, 0x90, 0x9b, 0xd0,
	0x5f, 0x62, 0xed, 0x26, 0x19, 0x26, 0xcd, 0xb2, 0xc9, 0x73, 0x95, 0x55, 0x16, 0xd7, 0xe7, 0xd1,
	0x16, 0x2f, 0x7a, 0xc7, 0xde, 0xe4, 0xeb, 0xb7, 0x2f, 0x73, 0x6a, 0x16, 0x36, 0x8f, 0x0a, 0xc1,
	0xe2, 0x52, 0x61, 0xbd, 0x8c, 0xbb, 0x8e, 0x8f, 0x34, 0xaa, 0x15, 0xe5, 0xf3, 0xa3, 0xb9, 0x88,
	0xe5, 0x72, 0x1e, 0x5f, 0xe7, 0x41, 0xc8, 0x7d, 0xf7, 0x0c, 0x3c, 0xff, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x86, 0x99, 0xa3, 0x9b, 0x47, 0x04, 0x00, 0x00,
}
