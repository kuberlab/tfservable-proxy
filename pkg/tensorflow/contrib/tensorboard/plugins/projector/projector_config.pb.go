// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto

/*
Package projector is a generated protocol buffer package.

It is generated from these files:
	tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto

It has these top-level messages:
	SpriteMetadata
	EmbeddingInfo
	ProjectorConfig
*/
package projector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpriteMetadata struct {
	ImagePath string `protobuf:"bytes,1,opt,name=image_path,json=imagePath" json:"image_path,omitempty"`
	// [width, height] of a single image in the sprite.
	SingleImageDim []uint32 `protobuf:"varint,2,rep,packed,name=single_image_dim,json=singleImageDim" json:"single_image_dim,omitempty"`
}

func (m *SpriteMetadata) Reset()                    { *m = SpriteMetadata{} }
func (m *SpriteMetadata) String() string            { return proto.CompactTextString(m) }
func (*SpriteMetadata) ProtoMessage()               {}
func (*SpriteMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SpriteMetadata) GetImagePath() string {
	if m != nil {
		return m.ImagePath
	}
	return ""
}

func (m *SpriteMetadata) GetSingleImageDim() []uint32 {
	if m != nil {
		return m.SingleImageDim
	}
	return nil
}

type EmbeddingInfo struct {
	TensorName    string `protobuf:"bytes,1,opt,name=tensor_name,json=tensorName" json:"tensor_name,omitempty"`
	MetadataPath  string `protobuf:"bytes,2,opt,name=metadata_path,json=metadataPath" json:"metadata_path,omitempty"`
	BookmarksPath string `protobuf:"bytes,3,opt,name=bookmarks_path,json=bookmarksPath" json:"bookmarks_path,omitempty"`
	// Shape of the 2D tensor [N x D]. If missing, it will be inferred from the
	// model checkpoint.
	TensorShape []uint32        `protobuf:"varint,4,rep,packed,name=tensor_shape,json=tensorShape" json:"tensor_shape,omitempty"`
	Sprite      *SpriteMetadata `protobuf:"bytes,5,opt,name=sprite" json:"sprite,omitempty"`
	// Path to the TSV file holding the tensor values. If missing, the tensor
	// is assumed to be stored in the model checkpoint.
	TensorPath string `protobuf:"bytes,6,opt,name=tensor_path,json=tensorPath" json:"tensor_path,omitempty"`
}

func (m *EmbeddingInfo) Reset()                    { *m = EmbeddingInfo{} }
func (m *EmbeddingInfo) String() string            { return proto.CompactTextString(m) }
func (*EmbeddingInfo) ProtoMessage()               {}
func (*EmbeddingInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EmbeddingInfo) GetTensorName() string {
	if m != nil {
		return m.TensorName
	}
	return ""
}

func (m *EmbeddingInfo) GetMetadataPath() string {
	if m != nil {
		return m.MetadataPath
	}
	return ""
}

func (m *EmbeddingInfo) GetBookmarksPath() string {
	if m != nil {
		return m.BookmarksPath
	}
	return ""
}

func (m *EmbeddingInfo) GetTensorShape() []uint32 {
	if m != nil {
		return m.TensorShape
	}
	return nil
}

func (m *EmbeddingInfo) GetSprite() *SpriteMetadata {
	if m != nil {
		return m.Sprite
	}
	return nil
}

func (m *EmbeddingInfo) GetTensorPath() string {
	if m != nil {
		return m.TensorPath
	}
	return ""
}

type ProjectorConfig struct {
	// Path to the checkpoint file. Use either this or model_checkpoint_dir.
	ModelCheckpointPath string           `protobuf:"bytes,1,opt,name=model_checkpoint_path,json=modelCheckpointPath" json:"model_checkpoint_path,omitempty"`
	Embeddings          []*EmbeddingInfo `protobuf:"bytes,2,rep,name=embeddings" json:"embeddings,omitempty"`
	// Path to the checkpoint directory. The directory will be scanned for the
	// latest checkpoint file.
	ModelCheckpointDir string `protobuf:"bytes,3,opt,name=model_checkpoint_dir,json=modelCheckpointDir" json:"model_checkpoint_dir,omitempty"`
}

func (m *ProjectorConfig) Reset()                    { *m = ProjectorConfig{} }
func (m *ProjectorConfig) String() string            { return proto.CompactTextString(m) }
func (*ProjectorConfig) ProtoMessage()               {}
func (*ProjectorConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProjectorConfig) GetModelCheckpointPath() string {
	if m != nil {
		return m.ModelCheckpointPath
	}
	return ""
}

func (m *ProjectorConfig) GetEmbeddings() []*EmbeddingInfo {
	if m != nil {
		return m.Embeddings
	}
	return nil
}

func (m *ProjectorConfig) GetModelCheckpointDir() string {
	if m != nil {
		return m.ModelCheckpointDir
	}
	return ""
}

func init() {
	proto.RegisterType((*SpriteMetadata)(nil), "tensorflow.SpriteMetadata")
	proto.RegisterType((*EmbeddingInfo)(nil), "tensorflow.EmbeddingInfo")
	proto.RegisterType((*ProjectorConfig)(nil), "tensorflow.ProjectorConfig")
}

func init() {
	proto.RegisterFile("tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x51, 0x8b, 0xd4, 0x30,
	0x14, 0x85, 0xe9, 0xae, 0x0e, 0xec, 0x9d, 0x9d, 0x51, 0xa2, 0xc2, 0x28, 0x88, 0xe3, 0x88, 0xd0,
	0x97, 0x6d, 0xa4, 0x3e, 0xf9, 0xea, 0xae, 0xc8, 0x3e, 0x28, 0x4b, 0xf7, 0x49, 0x45, 0x4a, 0xda,
	0x64, 0xd2, 0xd8, 0x26, 0x37, 0x24, 0x59, 0xc5, 0xbf, 0xe5, 0x6f, 0xf3, 0x07, 0xc8, 0xa4, 0x9d,
	0x6d, 0x47, 0x9f, 0x7c, 0x0b, 0x27, 0x87, 0x7b, 0xce, 0xfd, 0xb8, 0xf0, 0x3e, 0x08, 0xe3, 0xd1,
	0x6d, 0x3b, 0xfc, 0x41, 0x6b, 0x34, 0xc1, 0xa9, 0x8a, 0xf6, 0x52, 0x85, 0xcc, 0x71, 0x6a, 0xbb,
	0x1b, 0xa9, 0x8c, 0xa7, 0xd6, 0xe1, 0x37, 0x51, 0x07, 0x74, 0xe3, 0xab, 0xac, 0xd1, 0x6c, 0x95,
	0xcc, 0xac, 0xc3, 0x80, 0x04, 0xc6, 0x41, 0x9b, 0x4f, 0xb0, 0xbc, 0xb6, 0x4e, 0x05, 0xf1, 0x41,
	0x04, 0xc6, 0x59, 0x60, 0xe4, 0x29, 0x80, 0xd2, 0x4c, 0x8a, 0xd2, 0xb2, 0xd0, 0xac, 0x92, 0x75,
	0x92, 0x9e, 0x14, 0x27, 0x51, 0xb9, 0x62, 0xa1, 0x21, 0x29, 0xdc, 0xf7, 0xca, 0xc8, 0x4e, 0x94,
	0xbd, 0x8b, 0x2b, 0xbd, 0x3a, 0x5a, 0x1f, 0xa7, 0x8b, 0x62, 0xd9, 0xeb, 0x97, 0x3b, 0xf9, 0x42,
	0xe9, 0xcd, 0xef, 0x04, 0x16, 0xef, 0x74, 0x25, 0x38, 0x57, 0x46, 0x5e, 0x9a, 0x2d, 0x92, 0x67,
	0x30, 0xef, 0xa3, 0x4b, 0xc3, 0xb4, 0x18, 0x66, 0x0f, 0x6d, 0x3e, 0x32, 0x2d, 0xc8, 0x0b, 0x58,
	0xe8, 0xa1, 0x47, 0x1f, 0x7f, 0x14, 0x2d, 0xa7, 0x7b, 0x31, 0x36, 0x78, 0x09, 0xcb, 0x0a, 0xb1,
	0xd5, 0xcc, 0xb5, 0xbe, 0x77, 0x1d, 0x47, 0xd7, 0xe2, 0x56, 0x8d, 0xb6, 0xe7, 0x70, 0x3a, 0x84,
	0xf9, 0x86, 0x59, 0xb1, 0xba, 0x13, 0x4b, 0x0e, 0x05, 0xae, 0x77, 0x12, 0xc9, 0x61, 0xe6, 0xe3,
	0xf2, 0xab, 0xbb, 0xeb, 0x24, 0x9d, 0xe7, 0x4f, 0xb2, 0x91, 0x4c, 0x76, 0x88, 0xa5, 0x18, 0x9c,
	0x93, 0x1d, 0x62, 0xf4, 0x6c, 0xba, 0xc3, 0x2e, 0x77, 0xf3, 0x2b, 0x81, 0x7b, 0x57, 0x7b, 0xf0,
	0xe7, 0x91, 0x3b, 0xc9, 0xe1, 0x91, 0x46, 0x2e, 0xba, 0xb2, 0x6e, 0x44, 0xdd, 0x5a, 0x54, 0x26,
	0x4c, 0xf1, 0x3e, 0x88, 0x9f, 0xe7, 0xb7, 0x7f, 0xb1, 0xff, 0x1b, 0x00, 0xb1, 0xa7, 0xe7, 0x23,
	0xe2, 0x79, 0xfe, 0x78, 0x5a, 0xf0, 0x80, 0x6d, 0x31, 0x31, 0x93, 0x57, 0xf0, 0xf0, 0x9f, 0x38,
	0xae, 0xdc, 0xc0, 0x89, 0xfc, 0x95, 0x76, 0xa1, 0xdc, 0xdb, 0xaf, 0x9f, 0xbf, 0x48, 0x15, 0x9a,
	0x9b, 0x2a, 0xab, 0x51, 0x53, 0xee, 0xc4, 0xcf, 0x96, 0x8e, 0x51, 0x67, 0x5e, 0xb8, 0xef, 0xca,
	0xc8, 0x33, 0x89, 0xd4, 0xb6, 0x92, 0xfe, 0xef, 0x21, 0x56, 0xb3, 0x78, 0x78, 0xaf, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xad, 0x3b, 0xec, 0xf5, 0xc3, 0x02, 0x00, 0x00,
}
