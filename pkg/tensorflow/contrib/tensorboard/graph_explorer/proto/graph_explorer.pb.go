// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto

It has these top-level messages:
	Node
	Edge
	Graph
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// There are two types of nodes. A 'metanode' contains other
// nodes and a 'leaf node' has no internal structure.  The metanode containment
// relationship is acyclic, meaning that if a metanode 'A' contains the metanode
// 'B', then 'B' cannot contain 'A'.
type Node struct {
	// The identifier of a node is a sequence of strings separated by '/'. The
	// identifier provides a unique name for a node and defines its hierarchical
	// relation to other nodes.  If no label is provided  the last part of the
	// identifier is used as a label.
	//
	// Example: In the graph below, metanodes are written with square brackets and
	// leaf nodes with parentheses. The metanode 'node1' contains the leaf node
	// 'node4' and the metanode 'node2', which contains the leaf node 'node3'.
	//
	//   [node1 [node2 (node3)] (node4)]
	//
	// The identifiers for these nodes are: "node1", "node1/node2",
	// "node1/node2/node3", and "node1/node4".
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A node attribute is information used by Graph Explorer to style a node.
	NodeAttr map[string]string `protobuf:"bytes,2,rep,name=node_attr,json=nodeAttr" json:"node_attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A metanode attribute is one that is inherited by all nodes inside the
	// current metanode. If an attribute applies only to the current node and
	// should not be inherited, it should be specified as a node attribute.
	MetanodeAttr map[string]string `protobuf:"bytes,3,rep,name=metanode_attr,json=metanodeAttr" json:"metanode_attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetNodeAttr() map[string]string {
	if m != nil {
		return m.NodeAttr
	}
	return nil
}

func (m *Node) GetMetanodeAttr() map[string]string {
	if m != nil {
		return m.MetanodeAttr
	}
	return nil
}

// An edge consists of a source and a target node, specified by their
// identifiers. An edge has attributes and data that are similar to node
// attributes and node data. Edges do not form a hierarchy so there are no
// metanode attributes.
type Edge struct {
	// The source and target fields must have the format of a Node name.
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	// Edge attributes.
	EdgeAttr map[string]string `protobuf:"bytes,3,rep,name=edge_attr,json=edgeAttr" json:"edge_attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto1.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Edge) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Edge) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Edge) GetEdgeAttr() map[string]string {
	if m != nil {
		return m.EdgeAttr
	}
	return nil
}

type Graph struct {
	// List of nodes in the graph.
	Node []*Node `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
	// List of edges in the graph.
	Edge []*Edge `protobuf:"bytes,2,rep,name=edge" json:"edge,omitempty"`
	// Default values of node, metanode and edge attributes.
	NodeAttr     map[string]string `protobuf:"bytes,3,rep,name=node_attr,json=nodeAttr" json:"node_attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MetanodeAttr map[string]string `protobuf:"bytes,4,rep,name=metanode_attr,json=metanodeAttr" json:"metanode_attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EdgeAttr     map[string]string `protobuf:"bytes,5,rep,name=edge_attr,json=edgeAttr" json:"edge_attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Graph attributes.
	GraphAttr map[string]string `protobuf:"bytes,6,rep,name=graph_attr,json=graphAttr" json:"graph_attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Graph) Reset()                    { *m = Graph{} }
func (m *Graph) String() string            { return proto1.CompactTextString(m) }
func (*Graph) ProtoMessage()               {}
func (*Graph) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Graph) GetNode() []*Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Graph) GetEdge() []*Edge {
	if m != nil {
		return m.Edge
	}
	return nil
}

func (m *Graph) GetNodeAttr() map[string]string {
	if m != nil {
		return m.NodeAttr
	}
	return nil
}

func (m *Graph) GetMetanodeAttr() map[string]string {
	if m != nil {
		return m.MetanodeAttr
	}
	return nil
}

func (m *Graph) GetEdgeAttr() map[string]string {
	if m != nil {
		return m.EdgeAttr
	}
	return nil
}

func (m *Graph) GetGraphAttr() map[string]string {
	if m != nil {
		return m.GraphAttr
	}
	return nil
}

func init() {
	proto1.RegisterType((*Node)(nil), "graph_explorer.Node")
	proto1.RegisterType((*Edge)(nil), "graph_explorer.Edge")
	proto1.RegisterType((*Graph)(nil), "graph_explorer.Graph")
}

func init() {
	proto1.RegisterFile("tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcd, 0x6e, 0xe2, 0x30,
	0x10, 0xc7, 0x95, 0x10, 0xd0, 0x32, 0xbb, 0xa0, 0x5d, 0x0b, 0xad, 0x22, 0x4e, 0x88, 0x5d, 0xed,
	0x72, 0x01, 0x4b, 0xed, 0xa5, 0x6a, 0x2b, 0xd1, 0x0f, 0xa1, 0x56, 0xea, 0xc7, 0x21, 0xc7, 0x1e,
	0x4a, 0x13, 0xe2, 0x1a, 0x04, 0x89, 0x23, 0x63, 0x68, 0x79, 0xa1, 0x3e, 0x41, 0xdf, 0xaa, 0x2f,
	0x51, 0xd9, 0x31, 0x0a, 0x09, 0xa1, 0x15, 0xed, 0xa1, 0x17, 0xc7, 0xf3, 0xcf, 0xf8, 0x37, 0x1f,
	0x1e, 0x19, 0xce, 0x05, 0x09, 0xa7, 0x8c, 0xdf, 0x4f, 0xd8, 0x03, 0x1e, 0xb0, 0x50, 0xf0, 0x91,
	0x87, 0x63, 0xc9, 0x63, 0x2e, 0xf7, 0x31, 0xe5, 0x6e, 0x34, 0xec, 0x93, 0xc7, 0x68, 0xc2, 0x38,
	0xe1, 0x38, 0xe2, 0x4c, 0xb0, 0x8c, 0xd8, 0x51, 0x22, 0xaa, 0xa6, 0xd5, 0xe6, 0x93, 0x09, 0xd6,
	0x35, 0xf3, 0x09, 0x42, 0x60, 0x85, 0x6e, 0x40, 0x6c, 0xa3, 0x61, 0xb4, 0xca, 0x8e, 0xda, 0xa3,
	0x2e, 0x94, 0x43, 0xe6, 0x93, 0xbe, 0x2b, 0x04, 0xb7, 0xcd, 0x46, 0xa1, 0xf5, 0x7d, 0xa7, 0xd9,
	0xc9, 0x60, 0xe5, 0x61, 0xb5, 0x1c, 0x0b, 0xc1, 0x7b, 0xa1, 0xe0, 0x0b, 0xe7, 0x5b, 0xa8, 0x4d,
	0x74, 0x01, 0x95, 0x80, 0x08, 0x37, 0x81, 0x14, 0x14, 0xe4, 0x5f, 0x2e, 0xe4, 0x4a, 0x7b, 0x26,
	0xa0, 0x1f, 0xc1, 0x8a, 0x54, 0x3f, 0x80, 0x4a, 0x2a, 0x0e, 0xfa, 0x09, 0x85, 0x31, 0x59, 0xe8,
	0x8c, 0xe5, 0x16, 0xd5, 0xa0, 0x38, 0x77, 0x27, 0x33, 0x62, 0x9b, 0x4a, 0x8b, 0x8d, 0x7d, 0x73,
	0xcf, 0xa8, 0x77, 0xe1, 0xd7, 0x1a, 0x7f, 0x1b, 0x40, 0xf3, 0xd9, 0x00, 0xab, 0xe7, 0x53, 0x82,
	0x7e, 0x43, 0x69, 0xca, 0x66, 0x7c, 0xb0, 0x6c, 0x95, 0xb6, 0xa4, 0x2e, 0x5c, 0x4e, 0x89, 0xd0,
	0x67, 0xb5, 0x25, 0x9b, 0x48, 0x7c, 0x9a, 0xaa, 0x7f, 0xad, 0x89, 0x12, 0xac, 0x96, 0x95, 0x26,
	0x12, 0x6d, 0xca, 0xba, 0x53, 0xbf, 0xb6, 0x4a, 0xfb, 0xc5, 0x82, 0xe2, 0x99, 0x0c, 0x86, 0x5a,
	0x60, 0xc9, 0xea, 0x6d, 0x43, 0xa5, 0x50, 0xcb, 0xbb, 0x02, 0x47, 0x79, 0x48, 0x4f, 0x19, 0x5c,
	0xdf, 0x78, 0x2d, 0x2f, 0x59, 0x47, 0x79, 0xa0, 0xa3, 0xd5, 0x01, 0x89, 0x6b, 0xfb, 0x93, 0x75,
	0x57, 0xd1, 0x37, 0x4e, 0xc8, 0x65, 0x76, 0x42, 0x2c, 0x45, 0xf9, 0x9f, 0x4f, 0x79, 0x67, 0x44,
	0x64, 0x3e, 0x49, 0xaf, 0x8b, 0x6f, 0xe5, 0xb3, 0xa1, 0xd9, 0xe8, 0x14, 0x20, 0xf6, 0x57, 0x88,
	0x92, 0x42, 0xfc, 0xcd, 0x47, 0xa8, 0x35, 0x61, 0x94, 0xe9, 0xd2, 0xfe, 0xda, 0x49, 0xfd, 0xd4,
	0xbc, 0xd4, 0x0f, 0xa1, 0x9a, 0xae, 0x6b, 0x9b, 0xd3, 0x27, 0x77, 0x37, 0xb7, 0x74, 0x24, 0x86,
	0x33, 0xaf, 0x33, 0x60, 0x01, 0xf6, 0x39, 0x59, 0x8c, 0x71, 0xf2, 0x74, 0xb5, 0xa7, 0x84, 0xcf,
	0x47, 0x21, 0x6d, 0x53, 0x86, 0xa3, 0x31, 0xc5, 0x1f, 0x78, 0xd4, 0xbc, 0x92, 0xfa, 0xec, 0xbe,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x9e, 0x66, 0xb1, 0x12, 0x05, 0x00, 0x00,
}
